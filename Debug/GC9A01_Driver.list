
GC9A01_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032c8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08003450  08003450  00004450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003460  08003460  00005004  2**0
                  CONTENTS
  4 .ARM          00000000  08003460  08003460  00005004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003460  08003460  00005004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003460  08003460  00004460  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003464  08003464  00004464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08003468  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005004  2**0
                  CONTENTS
 10 .bss          000000d4  20000004  20000004  00005004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00005004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000085b4  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000eba  00000000  00000000  0000d5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002a0  00000000  00000000  0000e4a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001dc  00000000  00000000  0000e748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a65f  00000000  00000000  0000e924  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005f38  00000000  00000000  00028f83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ef0c  00000000  00000000  0002eebb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bddc7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000ba4  00000000  00000000  000bde0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000be9b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003438 	.word	0x08003438

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003438 	.word	0x08003438

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2lz>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2300      	movs	r3, #0
 8000aca:	4604      	mov	r4, r0
 8000acc:	460d      	mov	r5, r1
 8000ace:	f7ff ffa9 	bl	8000a24 <__aeabi_dcmplt>
 8000ad2:	b928      	cbnz	r0, 8000ae0 <__aeabi_d2lz+0x1c>
 8000ad4:	4620      	mov	r0, r4
 8000ad6:	4629      	mov	r1, r5
 8000ad8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000adc:	f000 b80a 	b.w	8000af4 <__aeabi_d2ulz>
 8000ae0:	4620      	mov	r0, r4
 8000ae2:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000ae6:	f000 f805 	bl	8000af4 <__aeabi_d2ulz>
 8000aea:	4240      	negs	r0, r0
 8000aec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af0:	bd38      	pop	{r3, r4, r5, pc}
 8000af2:	bf00      	nop

08000af4 <__aeabi_d2ulz>:
 8000af4:	b5d0      	push	{r4, r6, r7, lr}
 8000af6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b28 <__aeabi_d2ulz+0x34>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	4606      	mov	r6, r0
 8000afc:	460f      	mov	r7, r1
 8000afe:	f7ff fd1f 	bl	8000540 <__aeabi_dmul>
 8000b02:	f000 f815 	bl	8000b30 <__aeabi_d2uiz>
 8000b06:	4604      	mov	r4, r0
 8000b08:	f7ff fca0 	bl	800044c <__aeabi_ui2d>
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <__aeabi_d2ulz+0x38>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f7ff fd16 	bl	8000540 <__aeabi_dmul>
 8000b14:	4602      	mov	r2, r0
 8000b16:	460b      	mov	r3, r1
 8000b18:	4630      	mov	r0, r6
 8000b1a:	4639      	mov	r1, r7
 8000b1c:	f7ff fb58 	bl	80001d0 <__aeabi_dsub>
 8000b20:	f000 f806 	bl	8000b30 <__aeabi_d2uiz>
 8000b24:	4621      	mov	r1, r4
 8000b26:	bdd0      	pop	{r4, r6, r7, pc}
 8000b28:	3df00000 	.word	0x3df00000
 8000b2c:	41f00000 	.word	0x41f00000

08000b30 <__aeabi_d2uiz>:
 8000b30:	004a      	lsls	r2, r1, #1
 8000b32:	d211      	bcs.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b34:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b38:	d211      	bcs.n	8000b5e <__aeabi_d2uiz+0x2e>
 8000b3a:	d50d      	bpl.n	8000b58 <__aeabi_d2uiz+0x28>
 8000b3c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b44:	d40e      	bmi.n	8000b64 <__aeabi_d2uiz+0x34>
 8000b46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	4770      	bx	lr
 8000b58:	f04f 0000 	mov.w	r0, #0
 8000b5c:	4770      	bx	lr
 8000b5e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b62:	d102      	bne.n	8000b6a <__aeabi_d2uiz+0x3a>
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	4770      	bx	lr
 8000b6a:	f04f 0000 	mov.w	r0, #0
 8000b6e:	4770      	bx	lr

08000b70 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 8000b7a:	480e      	ldr	r0, [pc, #56]	@ (8000bb4 <Console_Init+0x44>)
 8000b7c:	f001 fded 	bl	800275a <USART_Config_Reset>
	 serial.Port = USART1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <Console_Init+0x44>)
 8000b82:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <Console_Init+0x48>)
 8000b84:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <Console_Init+0x44>)
 8000b8a:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <Console_Init+0x44>)
 8000b90:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <Console_Init+0x44>)
 8000b98:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <Console_Init+0x44>)
 8000b9e:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <Console_Init+0x44>)
 8000ba4:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8000ba6:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <Console_Init+0x44>)
 8000ba8:	f002 faf6 	bl	8003198 <USART_Init>


}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000020 	.word	0x20000020
 8000bb8:	40011000 	.word	0x40011000

08000bbc <DMA_Clock_Enable>:

#include "DMA.h"


void DMA_Clock_Enable(DMA_Config *config)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	if(config->controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <DMA_Clock_Enable+0x40>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d105      	bne.n	8000bda <DMA_Clock_Enable+0x1e>
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config->controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <DMA_Clock_Enable+0x48>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d105      	bne.n	8000bf0 <DMA_Clock_Enable+0x34>
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40026000 	.word	0x40026000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40026400 	.word	0x40026400

08000c08 <DMA_Init>:
	if(config->controller == DMA2) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA2RST;
}
//

void DMA_Init(DMA_Config *config)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffd3 	bl	8000bbc <DMA_Clock_Enable>
	config -> stream -> CR |= config -> channel << DMA_SxCR_CHSEL_Pos;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	065a      	lsls	r2, r3, #25
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> circular_mode;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	6819      	ldr	r1, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> flow_control;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> priority_level;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695a      	ldr	r2, [r3, #20]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_data_size;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_data_size;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699a      	ldr	r2, [r3, #24]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> transfer_direction;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	6819      	ldr	r1, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> interrupts;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= DMA_SxCR_MINC;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8000cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cce:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000d14 <Delay_ms+0x54>
 8000cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cda:	ee17 3a90 	vmov	r3, s15
 8000cde:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <Delay_ms+0x58>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <Delay_ms+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <Delay_ms+0x58>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a09      	ldr	r2, [pc, #36]	@ (8000d18 <Delay_ms+0x58>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000cf8:	bf00      	nop
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <Delay_ms+0x58>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f9      	beq.n	8000cfa <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	48241000 	.word	0x48241000
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <command_line_high>:
#include "GC9A01.h"



static void command_line_high(GC9A01_Typedef *config)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->DC_Port, config->DC_Pin);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4610      	mov	r0, r2
 8000d32:	f000 fbbd 	bl	80014b0 <GPIO_Pin_High>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <command_line_low>:

static void command_line_low(GC9A01_Typedef *config)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->DC_Port, config->DC_Pin);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	4610      	mov	r0, r2
 8000d54:	f000 fbbe 	bl	80014d4 <GPIO_Pin_Low>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <reset_line_high>:

static void reset_line_high(GC9A01_Typedef *config)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->Reset_Port, config->Reset_Pin);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f993 3034 	ldrsb.w	r3, [r3, #52]	@ 0x34
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f000 fb9b 	bl	80014b0 <GPIO_Pin_High>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <reset_line_low>:

static void reset_line_low(GC9A01_Typedef *config)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->Reset_Port, config->Reset_Pin);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f993 3034 	ldrsb.w	r3, [r3, #52]	@ 0x34
 8000d94:	4619      	mov	r1, r3
 8000d96:	4610      	mov	r0, r2
 8000d98:	f000 fb9c 	bl	80014d4 <GPIO_Pin_Low>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <Command>:

static void Command(GC9A01_Typedef *config,uint8_t command)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	command_line_low(config);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffc4 	bl	8000d3e <command_line_low>
	SPI_NSS_Low(&(config->SPI_Driver));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fac0 	bl	800233e <SPI_NSS_Low>
	SPI_TRX_Byte(&(config->SPI_Driver), command);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	78fa      	ldrb	r2, [r7, #3]
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fa70 	bl	80022ac <SPI_TRX_Byte>
	SPI_NSS_Low(&(config->SPI_Driver));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fab5 	bl	800233e <SPI_NSS_Low>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Data>:

static void Data(GC9A01_Typedef *config,uint8_t data)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
	command_line_high(config);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff97 	bl	8000d1c <command_line_high>
	SPI_NSS_Low(&(config->SPI_Driver));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 faa4 	bl	800233e <SPI_NSS_Low>
	SPI_TRX_Byte(&(config->SPI_Driver), data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	b292      	uxth	r2, r2
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fa54 	bl	80022ac <SPI_TRX_Byte>
	SPI_NSS_Low(&(config->SPI_Driver));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 fa99 	bl	800233e <SPI_NSS_Low>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <GC9A01_DeInit>:

void GC9A01_DeInit(GC9A01_Typedef *config)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
	SPI_DeInit(&(config->SPI_Driver)); //check this
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 fa10 	bl	8002244 <SPI_DeInit>
	config->DC_Pin = -1;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	22ff      	movs	r2, #255	@ 0xff
 8000e28:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
	config->DC_Port = NULL;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	@ 0x28
	config->Reset_Pin = -1;
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	22ff      	movs	r2, #255	@ 0xff
 8000e36:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	config->Reset_Port = NULL;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <GC9A01_Init>:

void GC9A01_Init(GC9A01_Typedef *config)
{
 8000e48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4a:	b087      	sub	sp, #28
 8000e4c:	af04      	add	r7, sp, #16
 8000e4e:	6078      	str	r0, [r7, #4]

	SPI_Init(&(config->SPI_Driver));
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4618      	mov	r0, r3
 8000e54:	f001 f866 	bl	8001f24 <SPI_Init>

	GPIO_Pin_Init(config->DC_Port, config->DC_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8000e62:	b2d9      	uxtb	r1, r3
 8000e64:	2501      	movs	r5, #1
 8000e66:	2600      	movs	r6, #0
 8000e68:	2303      	movs	r3, #3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2400      	movs	r4, #0
 8000e6e:	9402      	str	r4, [sp, #8]
 8000e70:	9201      	str	r2, [sp, #4]
 8000e72:	9300      	str	r3, [sp, #0]
 8000e74:	4633      	mov	r3, r6
 8000e76:	462a      	mov	r2, r5
 8000e78:	f000 fba0 	bl	80015bc <GPIO_Pin_Init>

	GPIO_Pin_Init(config->Reset_Port, config->Reset_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	f993 3034 	ldrsb.w	r3, [r3, #52]	@ 0x34
 8000e86:	b2d9      	uxtb	r1, r3
 8000e88:	2501      	movs	r5, #1
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2400      	movs	r4, #0
 8000e92:	9402      	str	r4, [sp, #8]
 8000e94:	9201      	str	r2, [sp, #4]
 8000e96:	9300      	str	r3, [sp, #0]
 8000e98:	4633      	mov	r3, r6
 8000e9a:	462a      	mov	r2, r5
 8000e9c:	f000 fb8e 	bl	80015bc <GPIO_Pin_Init>


	SPI_NSS_High(&(config->SPI_Driver));
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f001 fa3b 	bl	800231e <SPI_NSS_High>
	Delay_ms(5);
 8000ea8:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000eac:	f7ff ff08 	bl	8000cc0 <Delay_ms>
	reset_line_low(config);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff66 	bl	8000d82 <reset_line_low>
	Delay_ms(10);
 8000eb6:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000eba:	f7ff ff01 	bl	8000cc0 <Delay_ms>
	reset_line_high(config);
 8000ebe:	6878      	ldr	r0, [r7, #4]
 8000ec0:	f7ff ff4e 	bl	8000d60 <reset_line_high>
	Delay_ms(120);
 8000ec4:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 80011f4 <GC9A01_Init+0x3ac>
 8000ec8:	f7ff fefa 	bl	8000cc0 <Delay_ms>

	Command(config,0xEF);
 8000ecc:	21ef      	movs	r1, #239	@ 0xef
 8000ece:	6878      	ldr	r0, [r7, #4]
 8000ed0:	f7ff ff68 	bl	8000da4 <Command>

	    Command(config,0xEB);
 8000ed4:	21eb      	movs	r1, #235	@ 0xeb
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f7ff ff64 	bl	8000da4 <Command>
	    Data(config,0x14);
 8000edc:	2114      	movs	r1, #20
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f7ff ff7c 	bl	8000ddc <Data>

	    Command(config,0xFE);
 8000ee4:	21fe      	movs	r1, #254	@ 0xfe
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff5c 	bl	8000da4 <Command>
	    Command(config,0xEF);
 8000eec:	21ef      	movs	r1, #239	@ 0xef
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ff58 	bl	8000da4 <Command>

	    Command(config,0xEB);
 8000ef4:	21eb      	movs	r1, #235	@ 0xeb
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f7ff ff54 	bl	8000da4 <Command>
	    Data(config,0x14);
 8000efc:	2114      	movs	r1, #20
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff6c 	bl	8000ddc <Data>

	    Command(config,0x84);
 8000f04:	2184      	movs	r1, #132	@ 0x84
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f7ff ff4c 	bl	8000da4 <Command>
	    Data(config,0x40);
 8000f0c:	2140      	movs	r1, #64	@ 0x40
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff ff64 	bl	8000ddc <Data>

	    Command(config,0x85);
 8000f14:	2185      	movs	r1, #133	@ 0x85
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff44 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000f1c:	21ff      	movs	r1, #255	@ 0xff
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff5c 	bl	8000ddc <Data>

	    Command(config,0x86);
 8000f24:	2186      	movs	r1, #134	@ 0x86
 8000f26:	6878      	ldr	r0, [r7, #4]
 8000f28:	f7ff ff3c 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000f2c:	21ff      	movs	r1, #255	@ 0xff
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff54 	bl	8000ddc <Data>

	    Command(config,0x87);
 8000f34:	2187      	movs	r1, #135	@ 0x87
 8000f36:	6878      	ldr	r0, [r7, #4]
 8000f38:	f7ff ff34 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000f3c:	21ff      	movs	r1, #255	@ 0xff
 8000f3e:	6878      	ldr	r0, [r7, #4]
 8000f40:	f7ff ff4c 	bl	8000ddc <Data>

	    Command(config,0x88);
 8000f44:	2188      	movs	r1, #136	@ 0x88
 8000f46:	6878      	ldr	r0, [r7, #4]
 8000f48:	f7ff ff2c 	bl	8000da4 <Command>
	    Data(config,0x0A);
 8000f4c:	210a      	movs	r1, #10
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff ff44 	bl	8000ddc <Data>

	    Command(config,0x89);
 8000f54:	2189      	movs	r1, #137	@ 0x89
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff24 	bl	8000da4 <Command>
	    Data(config,0x21);
 8000f5c:	2121      	movs	r1, #33	@ 0x21
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff ff3c 	bl	8000ddc <Data>

	    Command(config,0x8A);
 8000f64:	218a      	movs	r1, #138	@ 0x8a
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f7ff ff1c 	bl	8000da4 <Command>
	    Data(config,0x00);
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	6878      	ldr	r0, [r7, #4]
 8000f70:	f7ff ff34 	bl	8000ddc <Data>

	    Command(config,0x8B);
 8000f74:	218b      	movs	r1, #139	@ 0x8b
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff ff14 	bl	8000da4 <Command>
	    Data(config,0x80);
 8000f7c:	2180      	movs	r1, #128	@ 0x80
 8000f7e:	6878      	ldr	r0, [r7, #4]
 8000f80:	f7ff ff2c 	bl	8000ddc <Data>

	    Command(config,0x8C);
 8000f84:	218c      	movs	r1, #140	@ 0x8c
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ff0c 	bl	8000da4 <Command>
	    Data(config,0x01);
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	6878      	ldr	r0, [r7, #4]
 8000f90:	f7ff ff24 	bl	8000ddc <Data>

	    Command(config,0x8D);
 8000f94:	218d      	movs	r1, #141	@ 0x8d
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff04 	bl	8000da4 <Command>
	    Data(config,0x01);
 8000f9c:	2101      	movs	r1, #1
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f7ff ff1c 	bl	8000ddc <Data>

	    Command(config,0x8E);
 8000fa4:	218e      	movs	r1, #142	@ 0x8e
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fefc 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000fac:	21ff      	movs	r1, #255	@ 0xff
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ff14 	bl	8000ddc <Data>

	    Command(config,0x8F);
 8000fb4:	218f      	movs	r1, #143	@ 0x8f
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f7ff fef4 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000fbc:	21ff      	movs	r1, #255	@ 0xff
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f7ff ff0c 	bl	8000ddc <Data>


	    Command(config,0xB6);
 8000fc4:	21b6      	movs	r1, #182	@ 0xb6
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff feec 	bl	8000da4 <Command>
	    Data(config,0x00);
 8000fcc:	2100      	movs	r1, #0
 8000fce:	6878      	ldr	r0, [r7, #4]
 8000fd0:	f7ff ff04 	bl	8000ddc <Data>
	    Data(config,0x00);
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	6878      	ldr	r0, [r7, #4]
 8000fd8:	f7ff ff00 	bl	8000ddc <Data>

	    Command(config,0x36);
 8000fdc:	2136      	movs	r1, #54	@ 0x36
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff fee0 	bl	8000da4 <Command>
	#if ORIENTATION == 0
	    Data(config,0x18);
	#elif ORIENTATION == 1
	    Data(config,0x28);
	#elif ORIENTATION == 2
	    Data(config,0x48);
 8000fe4:	2148      	movs	r1, #72	@ 0x48
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fef8 	bl	8000ddc <Data>
	#else
	    Data(config,0x88);
	#endif

	    Command(config,COLOR_MODE);
 8000fec:	213a      	movs	r1, #58	@ 0x3a
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff fed8 	bl	8000da4 <Command>
	    Data(config,COLOR_MODE__18_BIT);
 8000ff4:	2106      	movs	r1, #6
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff fef0 	bl	8000ddc <Data>

	    Command(config,0x90);
 8000ffc:	2190      	movs	r1, #144	@ 0x90
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff fed0 	bl	8000da4 <Command>
	    Data(config,0x08);
 8001004:	2108      	movs	r1, #8
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff fee8 	bl	8000ddc <Data>
	    Data(config,0x08);
 800100c:	2108      	movs	r1, #8
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff fee4 	bl	8000ddc <Data>
	    Data(config,0x08);
 8001014:	2108      	movs	r1, #8
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff fee0 	bl	8000ddc <Data>
	    Data(config,0x08);
 800101c:	2108      	movs	r1, #8
 800101e:	6878      	ldr	r0, [r7, #4]
 8001020:	f7ff fedc 	bl	8000ddc <Data>

	    Command(config,0xBD);
 8001024:	21bd      	movs	r1, #189	@ 0xbd
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff febc 	bl	8000da4 <Command>
	    Data(config,0x06);
 800102c:	2106      	movs	r1, #6
 800102e:	6878      	ldr	r0, [r7, #4]
 8001030:	f7ff fed4 	bl	8000ddc <Data>

	    Command(config,0xBC);
 8001034:	21bc      	movs	r1, #188	@ 0xbc
 8001036:	6878      	ldr	r0, [r7, #4]
 8001038:	f7ff feb4 	bl	8000da4 <Command>
	    Data(config,0x00);
 800103c:	2100      	movs	r1, #0
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f7ff fecc 	bl	8000ddc <Data>

	    Command(config,0xFF);
 8001044:	21ff      	movs	r1, #255	@ 0xff
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	f7ff feac 	bl	8000da4 <Command>
	    Data(config,0x60);
 800104c:	2160      	movs	r1, #96	@ 0x60
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fec4 	bl	8000ddc <Data>
	    Data(config,0x01);
 8001054:	2101      	movs	r1, #1
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fec0 	bl	8000ddc <Data>
	    Data(config,0x04);
 800105c:	2104      	movs	r1, #4
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f7ff febc 	bl	8000ddc <Data>

	    Command(config,0xC3);
 8001064:	21c3      	movs	r1, #195	@ 0xc3
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fe9c 	bl	8000da4 <Command>
	    Data(config,0x13);
 800106c:	2113      	movs	r1, #19
 800106e:	6878      	ldr	r0, [r7, #4]
 8001070:	f7ff feb4 	bl	8000ddc <Data>
	    Command(config,0xC4);
 8001074:	21c4      	movs	r1, #196	@ 0xc4
 8001076:	6878      	ldr	r0, [r7, #4]
 8001078:	f7ff fe94 	bl	8000da4 <Command>
	    Data(config,0x13);
 800107c:	2113      	movs	r1, #19
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff feac 	bl	8000ddc <Data>

	    Command(config,0xC9);
 8001084:	21c9      	movs	r1, #201	@ 0xc9
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fe8c 	bl	8000da4 <Command>
	    Data(config,0x22);
 800108c:	2122      	movs	r1, #34	@ 0x22
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f7ff fea4 	bl	8000ddc <Data>

	    Command(config,0xBE);
 8001094:	21be      	movs	r1, #190	@ 0xbe
 8001096:	6878      	ldr	r0, [r7, #4]
 8001098:	f7ff fe84 	bl	8000da4 <Command>
	    Data(config,0x11);
 800109c:	2111      	movs	r1, #17
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff fe9c 	bl	8000ddc <Data>

	    Command(config,0xE1);
 80010a4:	21e1      	movs	r1, #225	@ 0xe1
 80010a6:	6878      	ldr	r0, [r7, #4]
 80010a8:	f7ff fe7c 	bl	8000da4 <Command>
	    Data(config,0x10);
 80010ac:	2110      	movs	r1, #16
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff fe94 	bl	8000ddc <Data>
	    Data(config,0x0E);
 80010b4:	210e      	movs	r1, #14
 80010b6:	6878      	ldr	r0, [r7, #4]
 80010b8:	f7ff fe90 	bl	8000ddc <Data>

	    Command(config,0xDF);
 80010bc:	21df      	movs	r1, #223	@ 0xdf
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff fe70 	bl	8000da4 <Command>
	    Data(config,0x21);
 80010c4:	2121      	movs	r1, #33	@ 0x21
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff fe88 	bl	8000ddc <Data>
	    Data(config,0x0c);
 80010cc:	210c      	movs	r1, #12
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fe84 	bl	8000ddc <Data>
	    Data(config,0x02);
 80010d4:	2102      	movs	r1, #2
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f7ff fe80 	bl	8000ddc <Data>

	    Command(config,0xF0);
 80010dc:	21f0      	movs	r1, #240	@ 0xf0
 80010de:	6878      	ldr	r0, [r7, #4]
 80010e0:	f7ff fe60 	bl	8000da4 <Command>
	    Data(config,0x45);
 80010e4:	2145      	movs	r1, #69	@ 0x45
 80010e6:	6878      	ldr	r0, [r7, #4]
 80010e8:	f7ff fe78 	bl	8000ddc <Data>
	    Data(config,0x09);
 80010ec:	2109      	movs	r1, #9
 80010ee:	6878      	ldr	r0, [r7, #4]
 80010f0:	f7ff fe74 	bl	8000ddc <Data>
	    Data(config,0x08);
 80010f4:	2108      	movs	r1, #8
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff fe70 	bl	8000ddc <Data>
	    Data(config,0x08);
 80010fc:	2108      	movs	r1, #8
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fe6c 	bl	8000ddc <Data>
	    Data(config,0x26);
 8001104:	2126      	movs	r1, #38	@ 0x26
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fe68 	bl	8000ddc <Data>
	    Data(config,0x2A);
 800110c:	212a      	movs	r1, #42	@ 0x2a
 800110e:	6878      	ldr	r0, [r7, #4]
 8001110:	f7ff fe64 	bl	8000ddc <Data>

	    Command(config,0xF1);
 8001114:	21f1      	movs	r1, #241	@ 0xf1
 8001116:	6878      	ldr	r0, [r7, #4]
 8001118:	f7ff fe44 	bl	8000da4 <Command>
	    Data(config,0x43);
 800111c:	2143      	movs	r1, #67	@ 0x43
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff fe5c 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001124:	2170      	movs	r1, #112	@ 0x70
 8001126:	6878      	ldr	r0, [r7, #4]
 8001128:	f7ff fe58 	bl	8000ddc <Data>
	    Data(config,0x72);
 800112c:	2172      	movs	r1, #114	@ 0x72
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff fe54 	bl	8000ddc <Data>
	    Data(config,0x36);
 8001134:	2136      	movs	r1, #54	@ 0x36
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fe50 	bl	8000ddc <Data>
	    Data(config,0x37);
 800113c:	2137      	movs	r1, #55	@ 0x37
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff fe4c 	bl	8000ddc <Data>
	    Data(config,0x6F);
 8001144:	216f      	movs	r1, #111	@ 0x6f
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f7ff fe48 	bl	8000ddc <Data>

	    Command(config,0xF2);
 800114c:	21f2      	movs	r1, #242	@ 0xf2
 800114e:	6878      	ldr	r0, [r7, #4]
 8001150:	f7ff fe28 	bl	8000da4 <Command>
	    Data(config,0x45);
 8001154:	2145      	movs	r1, #69	@ 0x45
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f7ff fe40 	bl	8000ddc <Data>
	    Data(config,0x09);
 800115c:	2109      	movs	r1, #9
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f7ff fe3c 	bl	8000ddc <Data>
	    Data(config,0x08);
 8001164:	2108      	movs	r1, #8
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff fe38 	bl	8000ddc <Data>
	    Data(config,0x08);
 800116c:	2108      	movs	r1, #8
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f7ff fe34 	bl	8000ddc <Data>
	    Data(config,0x26);
 8001174:	2126      	movs	r1, #38	@ 0x26
 8001176:	6878      	ldr	r0, [r7, #4]
 8001178:	f7ff fe30 	bl	8000ddc <Data>
	    Data(config,0x2A);
 800117c:	212a      	movs	r1, #42	@ 0x2a
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fe2c 	bl	8000ddc <Data>

	    Command(config,0xF3);
 8001184:	21f3      	movs	r1, #243	@ 0xf3
 8001186:	6878      	ldr	r0, [r7, #4]
 8001188:	f7ff fe0c 	bl	8000da4 <Command>
	    Data(config,0x43);
 800118c:	2143      	movs	r1, #67	@ 0x43
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff fe24 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001194:	2170      	movs	r1, #112	@ 0x70
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f7ff fe20 	bl	8000ddc <Data>
	    Data(config,0x72);
 800119c:	2172      	movs	r1, #114	@ 0x72
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe1c 	bl	8000ddc <Data>
	    Data(config,0x36);
 80011a4:	2136      	movs	r1, #54	@ 0x36
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f7ff fe18 	bl	8000ddc <Data>
	    Data(config,0x37);
 80011ac:	2137      	movs	r1, #55	@ 0x37
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff fe14 	bl	8000ddc <Data>
	    Data(config,0x6F);
 80011b4:	216f      	movs	r1, #111	@ 0x6f
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f7ff fe10 	bl	8000ddc <Data>

	    Command(config,0xED);
 80011bc:	21ed      	movs	r1, #237	@ 0xed
 80011be:	6878      	ldr	r0, [r7, #4]
 80011c0:	f7ff fdf0 	bl	8000da4 <Command>
	    Data(config,0x1B);
 80011c4:	211b      	movs	r1, #27
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff fe08 	bl	8000ddc <Data>
	    Data(config,0x0B);
 80011cc:	210b      	movs	r1, #11
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f7ff fe04 	bl	8000ddc <Data>

	    Command(config,0xAE);
 80011d4:	21ae      	movs	r1, #174	@ 0xae
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fde4 	bl	8000da4 <Command>
	    Data(config,0x77);
 80011dc:	2177      	movs	r1, #119	@ 0x77
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fdfc 	bl	8000ddc <Data>

	    Command(config,0xCD);
 80011e4:	21cd      	movs	r1, #205	@ 0xcd
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fddc 	bl	8000da4 <Command>
	    Data(config,0x63);
 80011ec:	2163      	movs	r1, #99	@ 0x63
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	e004      	b.n	80011fc <GC9A01_Init+0x3b4>
 80011f2:	bf00      	nop
 80011f4:	42f00000 	.word	0x42f00000
 80011f8:	42f00000 	.word	0x42f00000
 80011fc:	f7ff fdee 	bl	8000ddc <Data>

	    Command(config,0x70);
 8001200:	2170      	movs	r1, #112	@ 0x70
 8001202:	6878      	ldr	r0, [r7, #4]
 8001204:	f7ff fdce 	bl	8000da4 <Command>
	    Data(config,0x07);
 8001208:	2107      	movs	r1, #7
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff fde6 	bl	8000ddc <Data>
	    Data(config,0x07);
 8001210:	2107      	movs	r1, #7
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f7ff fde2 	bl	8000ddc <Data>
	    Data(config,0x04);
 8001218:	2104      	movs	r1, #4
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff fdde 	bl	8000ddc <Data>
	    Data(config,0x0E);
 8001220:	210e      	movs	r1, #14
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff fdda 	bl	8000ddc <Data>
	    Data(config,0x0F);
 8001228:	210f      	movs	r1, #15
 800122a:	6878      	ldr	r0, [r7, #4]
 800122c:	f7ff fdd6 	bl	8000ddc <Data>
	    Data(config,0x09);
 8001230:	2109      	movs	r1, #9
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f7ff fdd2 	bl	8000ddc <Data>
	    Data(config,0x07);
 8001238:	2107      	movs	r1, #7
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fdce 	bl	8000ddc <Data>
	    Data(config,0x08);
 8001240:	2108      	movs	r1, #8
 8001242:	6878      	ldr	r0, [r7, #4]
 8001244:	f7ff fdca 	bl	8000ddc <Data>
	    Data(config,0x03);
 8001248:	2103      	movs	r1, #3
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fdc6 	bl	8000ddc <Data>

	    Command(config,0xE8);
 8001250:	21e8      	movs	r1, #232	@ 0xe8
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f7ff fda6 	bl	8000da4 <Command>
	    Data(config,0x34);
 8001258:	2134      	movs	r1, #52	@ 0x34
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f7ff fdbe 	bl	8000ddc <Data>

	    Command(config,0x62);
 8001260:	2162      	movs	r1, #98	@ 0x62
 8001262:	6878      	ldr	r0, [r7, #4]
 8001264:	f7ff fd9e 	bl	8000da4 <Command>
	    Data(config,0x18);
 8001268:	2118      	movs	r1, #24
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7ff fdb6 	bl	8000ddc <Data>
	    Data(config,0x0D);
 8001270:	210d      	movs	r1, #13
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff fdb2 	bl	8000ddc <Data>
	    Data(config,0x71);
 8001278:	2171      	movs	r1, #113	@ 0x71
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff fdae 	bl	8000ddc <Data>
	    Data(config,0xED);
 8001280:	21ed      	movs	r1, #237	@ 0xed
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff fdaa 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001288:	2170      	movs	r1, #112	@ 0x70
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f7ff fda6 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001290:	2170      	movs	r1, #112	@ 0x70
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff fda2 	bl	8000ddc <Data>
	    Data(config,0x18);
 8001298:	2118      	movs	r1, #24
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff fd9e 	bl	8000ddc <Data>
	    Data(config,0x0F);
 80012a0:	210f      	movs	r1, #15
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff fd9a 	bl	8000ddc <Data>
	    Data(config,0x71);
 80012a8:	2171      	movs	r1, #113	@ 0x71
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff fd96 	bl	8000ddc <Data>
	    Data(config,0xEF);
 80012b0:	21ef      	movs	r1, #239	@ 0xef
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff fd92 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012b8:	2170      	movs	r1, #112	@ 0x70
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff fd8e 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012c0:	2170      	movs	r1, #112	@ 0x70
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff fd8a 	bl	8000ddc <Data>

	    Command(config,0x63);
 80012c8:	2163      	movs	r1, #99	@ 0x63
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff fd6a 	bl	8000da4 <Command>
	    Data(config,0x18);
 80012d0:	2118      	movs	r1, #24
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fd82 	bl	8000ddc <Data>
	    Data(config,0x11);
 80012d8:	2111      	movs	r1, #17
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff fd7e 	bl	8000ddc <Data>
	    Data(config,0x71);
 80012e0:	2171      	movs	r1, #113	@ 0x71
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff fd7a 	bl	8000ddc <Data>
	    Data(config,0xF1);
 80012e8:	21f1      	movs	r1, #241	@ 0xf1
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff fd76 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012f0:	2170      	movs	r1, #112	@ 0x70
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff fd72 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012f8:	2170      	movs	r1, #112	@ 0x70
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff fd6e 	bl	8000ddc <Data>
	    Data(config,0x18);
 8001300:	2118      	movs	r1, #24
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f7ff fd6a 	bl	8000ddc <Data>
	    Data(config,0x13);
 8001308:	2113      	movs	r1, #19
 800130a:	6878      	ldr	r0, [r7, #4]
 800130c:	f7ff fd66 	bl	8000ddc <Data>
	    Data(config,0x71);
 8001310:	2171      	movs	r1, #113	@ 0x71
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f7ff fd62 	bl	8000ddc <Data>
	    Data(config,0xF3);
 8001318:	21f3      	movs	r1, #243	@ 0xf3
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff fd5e 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001320:	2170      	movs	r1, #112	@ 0x70
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fd5a 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001328:	2170      	movs	r1, #112	@ 0x70
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fd56 	bl	8000ddc <Data>

	    Command(config,0x64);
 8001330:	2164      	movs	r1, #100	@ 0x64
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f7ff fd36 	bl	8000da4 <Command>
	    Data(config,0x28);
 8001338:	2128      	movs	r1, #40	@ 0x28
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f7ff fd4e 	bl	8000ddc <Data>
	    Data(config,0x29);
 8001340:	2129      	movs	r1, #41	@ 0x29
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff fd4a 	bl	8000ddc <Data>
	    Data(config,0xF1);
 8001348:	21f1      	movs	r1, #241	@ 0xf1
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff fd46 	bl	8000ddc <Data>
	    Data(config,0x01);
 8001350:	2101      	movs	r1, #1
 8001352:	6878      	ldr	r0, [r7, #4]
 8001354:	f7ff fd42 	bl	8000ddc <Data>
	    Data(config,0xF1);
 8001358:	21f1      	movs	r1, #241	@ 0xf1
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fd3e 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001360:	2100      	movs	r1, #0
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f7ff fd3a 	bl	8000ddc <Data>
	    Data(config,0x07);
 8001368:	2107      	movs	r1, #7
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff fd36 	bl	8000ddc <Data>

	    Command(config,0x66);
 8001370:	2166      	movs	r1, #102	@ 0x66
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f7ff fd16 	bl	8000da4 <Command>
	    Data(config,0x3C);
 8001378:	213c      	movs	r1, #60	@ 0x3c
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f7ff fd2e 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001380:	2100      	movs	r1, #0
 8001382:	6878      	ldr	r0, [r7, #4]
 8001384:	f7ff fd2a 	bl	8000ddc <Data>
	    Data(config,0xCD);
 8001388:	21cd      	movs	r1, #205	@ 0xcd
 800138a:	6878      	ldr	r0, [r7, #4]
 800138c:	f7ff fd26 	bl	8000ddc <Data>
	    Data(config,0x67);
 8001390:	2167      	movs	r1, #103	@ 0x67
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fd22 	bl	8000ddc <Data>
	    Data(config,0x45);
 8001398:	2145      	movs	r1, #69	@ 0x45
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff fd1e 	bl	8000ddc <Data>
	    Data(config,0x45);
 80013a0:	2145      	movs	r1, #69	@ 0x45
 80013a2:	6878      	ldr	r0, [r7, #4]
 80013a4:	f7ff fd1a 	bl	8000ddc <Data>
	    Data(config,0x10);
 80013a8:	2110      	movs	r1, #16
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fd16 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013b0:	2100      	movs	r1, #0
 80013b2:	6878      	ldr	r0, [r7, #4]
 80013b4:	f7ff fd12 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013b8:	2100      	movs	r1, #0
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f7ff fd0e 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013c0:	2100      	movs	r1, #0
 80013c2:	6878      	ldr	r0, [r7, #4]
 80013c4:	f7ff fd0a 	bl	8000ddc <Data>

	    Command(config,0x67);
 80013c8:	2167      	movs	r1, #103	@ 0x67
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f7ff fcea 	bl	8000da4 <Command>
	    Data(config,0x00);
 80013d0:	2100      	movs	r1, #0
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fd02 	bl	8000ddc <Data>
	    Data(config,0x3C);
 80013d8:	213c      	movs	r1, #60	@ 0x3c
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fcfe 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013e0:	2100      	movs	r1, #0
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fcfa 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013e8:	2100      	movs	r1, #0
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f7ff fcf6 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013f0:	2100      	movs	r1, #0
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff fcf2 	bl	8000ddc <Data>
	    Data(config,0x01);
 80013f8:	2101      	movs	r1, #1
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff fcee 	bl	8000ddc <Data>
	    Data(config,0x54);
 8001400:	2154      	movs	r1, #84	@ 0x54
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f7ff fcea 	bl	8000ddc <Data>
	    Data(config,0x10);
 8001408:	2110      	movs	r1, #16
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7ff fce6 	bl	8000ddc <Data>
	    Data(config,0x32);
 8001410:	2132      	movs	r1, #50	@ 0x32
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fce2 	bl	8000ddc <Data>
	    Data(config,0x98);
 8001418:	2198      	movs	r1, #152	@ 0x98
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f7ff fcde 	bl	8000ddc <Data>

	    Command(config,0x74);
 8001420:	2174      	movs	r1, #116	@ 0x74
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff fcbe 	bl	8000da4 <Command>
	    Data(config,0x10);
 8001428:	2110      	movs	r1, #16
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff fcd6 	bl	8000ddc <Data>
	    Data(config,0x85);
 8001430:	2185      	movs	r1, #133	@ 0x85
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff fcd2 	bl	8000ddc <Data>
	    Data(config,0x80);
 8001438:	2180      	movs	r1, #128	@ 0x80
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff fcce 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001440:	2100      	movs	r1, #0
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff fcca 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001448:	2100      	movs	r1, #0
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff fcc6 	bl	8000ddc <Data>
	    Data(config,0x4E);
 8001450:	214e      	movs	r1, #78	@ 0x4e
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff fcc2 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001458:	2100      	movs	r1, #0
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f7ff fcbe 	bl	8000ddc <Data>

	    Command(config,0x98);
 8001460:	2198      	movs	r1, #152	@ 0x98
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f7ff fc9e 	bl	8000da4 <Command>
	    Data(config,0x3e);
 8001468:	213e      	movs	r1, #62	@ 0x3e
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff fcb6 	bl	8000ddc <Data>
	    Data(config,0x07);
 8001470:	2107      	movs	r1, #7
 8001472:	6878      	ldr	r0, [r7, #4]
 8001474:	f7ff fcb2 	bl	8000ddc <Data>

	    Command(config,0x35);
 8001478:	2135      	movs	r1, #53	@ 0x35
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff fc92 	bl	8000da4 <Command>
	    Command(config,0x21);
 8001480:	2121      	movs	r1, #33	@ 0x21
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f7ff fc8e 	bl	8000da4 <Command>

	    Command(config,0x11);
 8001488:	2111      	movs	r1, #17
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff fc8a 	bl	8000da4 <Command>
	    Delay_ms(120);
 8001490:	ed1f 0aa7 	vldr	s0, [pc, #-668]	@ 80011f8 <GC9A01_Init+0x3b0>
 8001494:	f7ff fc14 	bl	8000cc0 <Delay_ms>
	    Command(config,0x29);
 8001498:	2129      	movs	r1, #41	@ 0x29
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f7ff fc82 	bl	8000da4 <Command>
	    Delay_ms(20);
 80014a0:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 80014a4:	f7ff fc0c 	bl	8000cc0 <Delay_ms>





}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014b0 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b083      	sub	sp, #12
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 80014ba:	2201      	movs	r2, #1
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	461a      	mov	r2, r3
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	615a      	str	r2, [r3, #20]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr

080014d4 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	2101      	movs	r1, #1
 80014e4:	683a      	ldr	r2, [r7, #0]
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	43d2      	mvns	r2, r2
 80014ec:	401a      	ands	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	615a      	str	r2, [r3, #20]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a25      	ldr	r2, [pc, #148]	@ (80015a0 <GPIO_Clock_Enable+0xa0>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d106      	bne.n	800151e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8001510:	4b24      	ldr	r3, [pc, #144]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001514:	4a23      	ldr	r2, [pc, #140]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001516:	f043 0301 	orr.w	r3, r3, #1
 800151a:	6313      	str	r3, [r2, #48]	@ 0x30
 800151c:	e039      	b.n	8001592 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a21      	ldr	r2, [pc, #132]	@ (80015a8 <GPIO_Clock_Enable+0xa8>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d106      	bne.n	8001534 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8001526:	4b1f      	ldr	r3, [pc, #124]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a1e      	ldr	r2, [pc, #120]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	e02e      	b.n	8001592 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a1d      	ldr	r2, [pc, #116]	@ (80015ac <GPIO_Clock_Enable+0xac>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d106      	bne.n	800154a <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800153c:	4b19      	ldr	r3, [pc, #100]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 800153e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001540:	4a18      	ldr	r2, [pc, #96]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	6313      	str	r3, [r2, #48]	@ 0x30
 8001548:	e023      	b.n	8001592 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a18      	ldr	r2, [pc, #96]	@ (80015b0 <GPIO_Clock_Enable+0xb0>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d106      	bne.n	8001560 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8001552:	4b14      	ldr	r3, [pc, #80]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a13      	ldr	r2, [pc, #76]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001558:	f043 0308 	orr.w	r3, r3, #8
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	e018      	b.n	8001592 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4a14      	ldr	r2, [pc, #80]	@ (80015b4 <GPIO_Clock_Enable+0xb4>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d106      	bne.n	8001576 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001568:	4b0e      	ldr	r3, [pc, #56]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 800156a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156c:	4a0d      	ldr	r2, [pc, #52]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 800156e:	f043 0310 	orr.w	r3, r3, #16
 8001572:	6313      	str	r3, [r2, #48]	@ 0x30
 8001574:	e00d      	b.n	8001592 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a0f      	ldr	r2, [pc, #60]	@ (80015b8 <GPIO_Clock_Enable+0xb8>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d106      	bne.n	800158c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800157e:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001582:	4a08      	ldr	r2, [pc, #32]	@ (80015a4 <GPIO_Clock_Enable+0xa4>)
 8001584:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001588:	6313      	str	r3, [r2, #48]	@ 0x30
 800158a:	e002      	b.n	8001592 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800158c:	f04f 33ff 	mov.w	r3, #4294967295
 8001590:	e000      	b.n	8001594 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8001592:	2301      	movs	r3, #1
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40020000 	.word	0x40020000
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020400 	.word	0x40020400
 80015ac:	40020800 	.word	0x40020800
 80015b0:	40020c00 	.word	0x40020c00
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40021c00 	.word	0x40021c00

080015bc <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	4608      	mov	r0, r1
 80015c6:	4611      	mov	r1, r2
 80015c8:	461a      	mov	r2, r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	70fb      	strb	r3, [r7, #3]
 80015ce:	460b      	mov	r3, r1
 80015d0:	70bb      	strb	r3, [r7, #2]
 80015d2:	4613      	mov	r3, r2
 80015d4:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ff92 	bl	8001500 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	78b9      	ldrb	r1, [r7, #2]
 80015e2:	78fa      	ldrb	r2, [r7, #3]
 80015e4:	0052      	lsls	r2, r2, #1
 80015e6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ea:	431a      	orrs	r2, r3
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	7879      	ldrb	r1, [r7, #1]
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	fa01 f202 	lsl.w	r2, r1, r2
 80015fc:	431a      	orrs	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	7c39      	ldrb	r1, [r7, #16]
 8001608:	78fa      	ldrb	r2, [r7, #3]
 800160a:	0052      	lsls	r2, r2, #1
 800160c:	fa01 f202 	lsl.w	r2, r1, r2
 8001610:	431a      	orrs	r2, r3
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	7d39      	ldrb	r1, [r7, #20]
 800161c:	78fa      	ldrb	r2, [r7, #3]
 800161e:	0052      	lsls	r2, r2, #1
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	431a      	orrs	r2, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 800162a:	78fb      	ldrb	r3, [r7, #3]
 800162c:	2b07      	cmp	r3, #7
 800162e:	d80a      	bhi.n	8001646 <GPIO_Pin_Init+0x8a>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	7e39      	ldrb	r1, [r7, #24]
 8001636:	78fa      	ldrb	r2, [r7, #3]
 8001638:	0092      	lsls	r2, r2, #2
 800163a:	fa01 f202 	lsl.w	r2, r1, r2
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001644:	e00a      	b.n	800165c <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	7e39      	ldrb	r1, [r7, #24]
 800164c:	78fa      	ldrb	r2, [r7, #3]
 800164e:	3a08      	subs	r2, #8
 8001650:	0092      	lsls	r2, r2, #2
 8001652:	fa01 f202 	lsl.w	r2, r1, r2
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <SPI_Clock_Enable>:

DMA_Config xDMA_TX;
DMA_Config xDMA_RX;

int8_t SPI_Clock_Enable(SPI_Config *config)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <SPI_Clock_Enable+0x64>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d105      	bne.n	8001686 <SPI_Clock_Enable+0x22>
 800167a:	4b14      	ldr	r3, [pc, #80]	@ (80016cc <SPI_Clock_Enable+0x68>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	4a13      	ldr	r2, [pc, #76]	@ (80016cc <SPI_Clock_Enable+0x68>)
 8001680:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001684:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	4a11      	ldr	r2, [pc, #68]	@ (80016d0 <SPI_Clock_Enable+0x6c>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d105      	bne.n	800169c <SPI_Clock_Enable+0x38>
 8001690:	4b0e      	ldr	r3, [pc, #56]	@ (80016cc <SPI_Clock_Enable+0x68>)
 8001692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001694:	4a0d      	ldr	r2, [pc, #52]	@ (80016cc <SPI_Clock_Enable+0x68>)
 8001696:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800169a:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a0c      	ldr	r2, [pc, #48]	@ (80016d4 <SPI_Clock_Enable+0x70>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d106      	bne.n	80016b4 <SPI_Clock_Enable+0x50>
 80016a6:	4b09      	ldr	r3, [pc, #36]	@ (80016cc <SPI_Clock_Enable+0x68>)
 80016a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016aa:	4a08      	ldr	r2, [pc, #32]	@ (80016cc <SPI_Clock_Enable+0x68>)
 80016ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80016b2:	e001      	b.n	80016b8 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 80016b4:	23ff      	movs	r3, #255	@ 0xff
 80016b6:	73fb      	strb	r3, [r7, #15]
	return retval;
 80016b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3714      	adds	r7, #20
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	40013000 	.word	0x40013000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40003800 	.word	0x40003800
 80016d4:	40003c00 	.word	0x40003c00

080016d8 <SPI_Pin>:
	return retval;
}


static void SPI_Pin(SPI_Config *config)
{
 80016d8:	b590      	push	{r4, r7, lr}
 80016da:	b087      	sub	sp, #28
 80016dc:	af04      	add	r7, sp, #16
 80016de:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4aaa      	ldr	r2, [pc, #680]	@ (8001990 <SPI_Pin+0x2b8>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	f040 8158 	bne.w	800199c <SPI_Pin+0x2c4>
	{
		if(config->mode == 0)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	89db      	ldrh	r3, [r3, #14]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f040 8081 	bne.w	80017f8 <SPI_Pin+0x120>
		{
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	791b      	ldrb	r3, [r3, #4]
 80016fa:	461a      	mov	r2, r3
 80016fc:	230f      	movs	r3, #15
 80016fe:	429a      	cmp	r2, r3
 8001700:	d10d      	bne.n	800171e <SPI_Pin+0x46>
 8001702:	2002      	movs	r0, #2
 8001704:	2400      	movs	r4, #0
 8001706:	2303      	movs	r3, #3
 8001708:	2200      	movs	r2, #0
 800170a:	2105      	movs	r1, #5
 800170c:	9102      	str	r1, [sp, #8]
 800170e:	9201      	str	r2, [sp, #4]
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	4623      	mov	r3, r4
 8001714:	4602      	mov	r2, r0
 8001716:	2105      	movs	r1, #5
 8001718:	489e      	ldr	r0, [pc, #632]	@ (8001994 <SPI_Pin+0x2bc>)
 800171a:	f7ff ff4f 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	791b      	ldrb	r3, [r3, #4]
 8001722:	461a      	mov	r2, r3
 8001724:	2317      	movs	r3, #23
 8001726:	429a      	cmp	r2, r3
 8001728:	d10d      	bne.n	8001746 <SPI_Pin+0x6e>
 800172a:	2002      	movs	r0, #2
 800172c:	2400      	movs	r4, #0
 800172e:	2303      	movs	r3, #3
 8001730:	2200      	movs	r2, #0
 8001732:	2105      	movs	r1, #5
 8001734:	9102      	str	r1, [sp, #8]
 8001736:	9201      	str	r2, [sp, #4]
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4623      	mov	r3, r4
 800173c:	4602      	mov	r2, r0
 800173e:	2103      	movs	r1, #3
 8001740:	4895      	ldr	r0, [pc, #596]	@ (8001998 <SPI_Pin+0x2c0>)
 8001742:	f7ff ff3b 	bl	80015bc <GPIO_Pin_Init>

			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	799b      	ldrb	r3, [r3, #6]
 800174a:	461a      	mov	r2, r3
 800174c:	2310      	movs	r3, #16
 800174e:	429a      	cmp	r2, r3
 8001750:	d10d      	bne.n	800176e <SPI_Pin+0x96>
 8001752:	2002      	movs	r0, #2
 8001754:	2400      	movs	r4, #0
 8001756:	2303      	movs	r3, #3
 8001758:	2200      	movs	r2, #0
 800175a:	2105      	movs	r1, #5
 800175c:	9102      	str	r1, [sp, #8]
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	4623      	mov	r3, r4
 8001764:	4602      	mov	r2, r0
 8001766:	2106      	movs	r1, #6
 8001768:	488a      	ldr	r0, [pc, #552]	@ (8001994 <SPI_Pin+0x2bc>)
 800176a:	f7ff ff27 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	799b      	ldrb	r3, [r3, #6]
 8001772:	461a      	mov	r2, r3
 8001774:	2318      	movs	r3, #24
 8001776:	429a      	cmp	r2, r3
 8001778:	d10d      	bne.n	8001796 <SPI_Pin+0xbe>
 800177a:	2002      	movs	r0, #2
 800177c:	2400      	movs	r4, #0
 800177e:	2303      	movs	r3, #3
 8001780:	2200      	movs	r2, #0
 8001782:	2105      	movs	r1, #5
 8001784:	9102      	str	r1, [sp, #8]
 8001786:	9201      	str	r2, [sp, #4]
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	4623      	mov	r3, r4
 800178c:	4602      	mov	r2, r0
 800178e:	2104      	movs	r1, #4
 8001790:	4881      	ldr	r0, [pc, #516]	@ (8001998 <SPI_Pin+0x2c0>)
 8001792:	f7ff ff13 	bl	80015bc <GPIO_Pin_Init>

			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	795b      	ldrb	r3, [r3, #5]
 800179a:	461a      	mov	r2, r3
 800179c:	2311      	movs	r3, #17
 800179e:	429a      	cmp	r2, r3
 80017a0:	d10d      	bne.n	80017be <SPI_Pin+0xe6>
 80017a2:	2002      	movs	r0, #2
 80017a4:	2400      	movs	r4, #0
 80017a6:	2303      	movs	r3, #3
 80017a8:	2200      	movs	r2, #0
 80017aa:	2105      	movs	r1, #5
 80017ac:	9102      	str	r1, [sp, #8]
 80017ae:	9201      	str	r2, [sp, #4]
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	4623      	mov	r3, r4
 80017b4:	4602      	mov	r2, r0
 80017b6:	2107      	movs	r1, #7
 80017b8:	4876      	ldr	r0, [pc, #472]	@ (8001994 <SPI_Pin+0x2bc>)
 80017ba:	f7ff feff 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	795b      	ldrb	r3, [r3, #5]
 80017c2:	461a      	mov	r2, r3
 80017c4:	2319      	movs	r3, #25
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d10d      	bne.n	80017e6 <SPI_Pin+0x10e>
 80017ca:	2002      	movs	r0, #2
 80017cc:	2400      	movs	r4, #0
 80017ce:	2303      	movs	r3, #3
 80017d0:	2200      	movs	r2, #0
 80017d2:	2105      	movs	r1, #5
 80017d4:	9102      	str	r1, [sp, #8]
 80017d6:	9201      	str	r2, [sp, #4]
 80017d8:	9300      	str	r3, [sp, #0]
 80017da:	4623      	mov	r3, r4
 80017dc:	4602      	mov	r2, r0
 80017de:	2105      	movs	r1, #5
 80017e0:	486d      	ldr	r0, [pc, #436]	@ (8001998 <SPI_Pin+0x2c0>)
 80017e2:	f7ff feeb 	bl	80015bc <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80017f4:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 80017f6:	e38b      	b.n	8001f10 <SPI_Pin+0x838>
		else if(config->mode == 1)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	89db      	ldrh	r3, [r3, #14]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d160      	bne.n	80018c2 <SPI_Pin+0x1ea>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	791b      	ldrb	r3, [r3, #4]
 8001804:	461a      	mov	r2, r3
 8001806:	230f      	movs	r3, #15
 8001808:	429a      	cmp	r2, r3
 800180a:	d10d      	bne.n	8001828 <SPI_Pin+0x150>
 800180c:	2002      	movs	r0, #2
 800180e:	2400      	movs	r4, #0
 8001810:	2303      	movs	r3, #3
 8001812:	2200      	movs	r2, #0
 8001814:	2105      	movs	r1, #5
 8001816:	9102      	str	r1, [sp, #8]
 8001818:	9201      	str	r2, [sp, #4]
 800181a:	9300      	str	r3, [sp, #0]
 800181c:	4623      	mov	r3, r4
 800181e:	4602      	mov	r2, r0
 8001820:	2105      	movs	r1, #5
 8001822:	485c      	ldr	r0, [pc, #368]	@ (8001994 <SPI_Pin+0x2bc>)
 8001824:	f7ff feca 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	791b      	ldrb	r3, [r3, #4]
 800182c:	461a      	mov	r2, r3
 800182e:	2317      	movs	r3, #23
 8001830:	429a      	cmp	r2, r3
 8001832:	d10d      	bne.n	8001850 <SPI_Pin+0x178>
 8001834:	2002      	movs	r0, #2
 8001836:	2400      	movs	r4, #0
 8001838:	2303      	movs	r3, #3
 800183a:	2200      	movs	r2, #0
 800183c:	2105      	movs	r1, #5
 800183e:	9102      	str	r1, [sp, #8]
 8001840:	9201      	str	r2, [sp, #4]
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	4623      	mov	r3, r4
 8001846:	4602      	mov	r2, r0
 8001848:	2103      	movs	r1, #3
 800184a:	4853      	ldr	r0, [pc, #332]	@ (8001998 <SPI_Pin+0x2c0>)
 800184c:	f7ff feb6 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	795b      	ldrb	r3, [r3, #5]
 8001854:	461a      	mov	r2, r3
 8001856:	2311      	movs	r3, #17
 8001858:	429a      	cmp	r2, r3
 800185a:	d10d      	bne.n	8001878 <SPI_Pin+0x1a0>
 800185c:	2002      	movs	r0, #2
 800185e:	2400      	movs	r4, #0
 8001860:	2303      	movs	r3, #3
 8001862:	2200      	movs	r2, #0
 8001864:	2105      	movs	r1, #5
 8001866:	9102      	str	r1, [sp, #8]
 8001868:	9201      	str	r2, [sp, #4]
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	4623      	mov	r3, r4
 800186e:	4602      	mov	r2, r0
 8001870:	2107      	movs	r1, #7
 8001872:	4848      	ldr	r0, [pc, #288]	@ (8001994 <SPI_Pin+0x2bc>)
 8001874:	f7ff fea2 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	795b      	ldrb	r3, [r3, #5]
 800187c:	461a      	mov	r2, r3
 800187e:	2319      	movs	r3, #25
 8001880:	429a      	cmp	r2, r3
 8001882:	d10d      	bne.n	80018a0 <SPI_Pin+0x1c8>
 8001884:	2002      	movs	r0, #2
 8001886:	2400      	movs	r4, #0
 8001888:	2303      	movs	r3, #3
 800188a:	2200      	movs	r2, #0
 800188c:	2105      	movs	r1, #5
 800188e:	9102      	str	r1, [sp, #8]
 8001890:	9201      	str	r2, [sp, #4]
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	4623      	mov	r3, r4
 8001896:	4602      	mov	r2, r0
 8001898:	2105      	movs	r1, #5
 800189a:	483f      	ldr	r0, [pc, #252]	@ (8001998 <SPI_Pin+0x2c0>)
 800189c:	f7ff fe8e 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80018ae:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80018be:	601a      	str	r2, [r3, #0]
}
 80018c0:	e326      	b.n	8001f10 <SPI_Pin+0x838>
		else if(config->mode == 2)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	89db      	ldrh	r3, [r3, #14]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	f040 8322 	bne.w	8001f10 <SPI_Pin+0x838>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	791b      	ldrb	r3, [r3, #4]
 80018d0:	461a      	mov	r2, r3
 80018d2:	230f      	movs	r3, #15
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d10d      	bne.n	80018f4 <SPI_Pin+0x21c>
 80018d8:	2002      	movs	r0, #2
 80018da:	2400      	movs	r4, #0
 80018dc:	2303      	movs	r3, #3
 80018de:	2200      	movs	r2, #0
 80018e0:	2105      	movs	r1, #5
 80018e2:	9102      	str	r1, [sp, #8]
 80018e4:	9201      	str	r2, [sp, #4]
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	4623      	mov	r3, r4
 80018ea:	4602      	mov	r2, r0
 80018ec:	2105      	movs	r1, #5
 80018ee:	4829      	ldr	r0, [pc, #164]	@ (8001994 <SPI_Pin+0x2bc>)
 80018f0:	f7ff fe64 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	791b      	ldrb	r3, [r3, #4]
 80018f8:	461a      	mov	r2, r3
 80018fa:	2317      	movs	r3, #23
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d10d      	bne.n	800191c <SPI_Pin+0x244>
 8001900:	2002      	movs	r0, #2
 8001902:	2400      	movs	r4, #0
 8001904:	2303      	movs	r3, #3
 8001906:	2200      	movs	r2, #0
 8001908:	2105      	movs	r1, #5
 800190a:	9102      	str	r1, [sp, #8]
 800190c:	9201      	str	r2, [sp, #4]
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	4623      	mov	r3, r4
 8001912:	4602      	mov	r2, r0
 8001914:	2103      	movs	r1, #3
 8001916:	4820      	ldr	r0, [pc, #128]	@ (8001998 <SPI_Pin+0x2c0>)
 8001918:	f7ff fe50 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	799b      	ldrb	r3, [r3, #6]
 8001920:	461a      	mov	r2, r3
 8001922:	2310      	movs	r3, #16
 8001924:	429a      	cmp	r2, r3
 8001926:	d10d      	bne.n	8001944 <SPI_Pin+0x26c>
 8001928:	2002      	movs	r0, #2
 800192a:	2400      	movs	r4, #0
 800192c:	2303      	movs	r3, #3
 800192e:	2200      	movs	r2, #0
 8001930:	2105      	movs	r1, #5
 8001932:	9102      	str	r1, [sp, #8]
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9300      	str	r3, [sp, #0]
 8001938:	4623      	mov	r3, r4
 800193a:	4602      	mov	r2, r0
 800193c:	2106      	movs	r1, #6
 800193e:	4815      	ldr	r0, [pc, #84]	@ (8001994 <SPI_Pin+0x2bc>)
 8001940:	f7ff fe3c 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	799b      	ldrb	r3, [r3, #6]
 8001948:	461a      	mov	r2, r3
 800194a:	2318      	movs	r3, #24
 800194c:	429a      	cmp	r2, r3
 800194e:	d10d      	bne.n	800196c <SPI_Pin+0x294>
 8001950:	2002      	movs	r0, #2
 8001952:	2400      	movs	r4, #0
 8001954:	2303      	movs	r3, #3
 8001956:	2200      	movs	r2, #0
 8001958:	2105      	movs	r1, #5
 800195a:	9102      	str	r1, [sp, #8]
 800195c:	9201      	str	r2, [sp, #4]
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	4623      	mov	r3, r4
 8001962:	4602      	mov	r2, r0
 8001964:	2104      	movs	r1, #4
 8001966:	480c      	ldr	r0, [pc, #48]	@ (8001998 <SPI_Pin+0x2c0>)
 8001968:	f7ff fe28 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	681a      	ldr	r2, [r3, #0]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800197a:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800198a:	601a      	str	r2, [r3, #0]
}
 800198c:	e2c0      	b.n	8001f10 <SPI_Pin+0x838>
 800198e:	bf00      	nop
 8001990:	40013000 	.word	0x40013000
 8001994:	40020000 	.word	0x40020000
 8001998:	40020400 	.word	0x40020400
	else if(config -> Port == SPI2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4aaa      	ldr	r2, [pc, #680]	@ (8001c4c <SPI_Pin+0x574>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	f040 8158 	bne.w	8001c58 <SPI_Pin+0x580>
		if(config->mode == 0)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	89db      	ldrh	r3, [r3, #14]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f040 8081 	bne.w	8001ab4 <SPI_Pin+0x3dc>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	791b      	ldrb	r3, [r3, #4]
 80019b6:	461a      	mov	r2, r3
 80019b8:	23d2      	movs	r3, #210	@ 0xd2
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d10d      	bne.n	80019da <SPI_Pin+0x302>
 80019be:	2002      	movs	r0, #2
 80019c0:	2400      	movs	r4, #0
 80019c2:	2303      	movs	r3, #3
 80019c4:	2200      	movs	r2, #0
 80019c6:	2105      	movs	r1, #5
 80019c8:	9102      	str	r1, [sp, #8]
 80019ca:	9201      	str	r2, [sp, #4]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4623      	mov	r3, r4
 80019d0:	4602      	mov	r2, r0
 80019d2:	210a      	movs	r1, #10
 80019d4:	489e      	ldr	r0, [pc, #632]	@ (8001c50 <SPI_Pin+0x578>)
 80019d6:	f7ff fdf1 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	791b      	ldrb	r3, [r3, #4]
 80019de:	461a      	mov	r2, r3
 80019e0:	23d5      	movs	r3, #213	@ 0xd5
 80019e2:	429a      	cmp	r2, r3
 80019e4:	d10d      	bne.n	8001a02 <SPI_Pin+0x32a>
 80019e6:	2002      	movs	r0, #2
 80019e8:	2400      	movs	r4, #0
 80019ea:	2303      	movs	r3, #3
 80019ec:	2200      	movs	r2, #0
 80019ee:	2105      	movs	r1, #5
 80019f0:	9102      	str	r1, [sp, #8]
 80019f2:	9201      	str	r2, [sp, #4]
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	4623      	mov	r3, r4
 80019f8:	4602      	mov	r2, r0
 80019fa:	210d      	movs	r1, #13
 80019fc:	4894      	ldr	r0, [pc, #592]	@ (8001c50 <SPI_Pin+0x578>)
 80019fe:	f7ff fddd 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	799b      	ldrb	r3, [r3, #6]
 8001a06:	461a      	mov	r2, r3
 8001a08:	23d6      	movs	r3, #214	@ 0xd6
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d10d      	bne.n	8001a2a <SPI_Pin+0x352>
 8001a0e:	2002      	movs	r0, #2
 8001a10:	2400      	movs	r4, #0
 8001a12:	2303      	movs	r3, #3
 8001a14:	2200      	movs	r2, #0
 8001a16:	2105      	movs	r1, #5
 8001a18:	9102      	str	r1, [sp, #8]
 8001a1a:	9201      	str	r2, [sp, #4]
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4623      	mov	r3, r4
 8001a20:	4602      	mov	r2, r0
 8001a22:	210e      	movs	r1, #14
 8001a24:	488a      	ldr	r0, [pc, #552]	@ (8001c50 <SPI_Pin+0x578>)
 8001a26:	f7ff fdc9 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	799b      	ldrb	r3, [r3, #6]
 8001a2e:	461a      	mov	r2, r3
 8001a30:	2320      	movs	r3, #32
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d10d      	bne.n	8001a52 <SPI_Pin+0x37a>
 8001a36:	2002      	movs	r0, #2
 8001a38:	2400      	movs	r4, #0
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	2105      	movs	r1, #5
 8001a40:	9102      	str	r1, [sp, #8]
 8001a42:	9201      	str	r2, [sp, #4]
 8001a44:	9300      	str	r3, [sp, #0]
 8001a46:	4623      	mov	r3, r4
 8001a48:	4602      	mov	r2, r0
 8001a4a:	2102      	movs	r1, #2
 8001a4c:	4881      	ldr	r0, [pc, #516]	@ (8001c54 <SPI_Pin+0x57c>)
 8001a4e:	f7ff fdb5 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PB15) GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	795b      	ldrb	r3, [r3, #5]
 8001a56:	461a      	mov	r2, r3
 8001a58:	23d7      	movs	r3, #215	@ 0xd7
 8001a5a:	429a      	cmp	r2, r3
 8001a5c:	d10d      	bne.n	8001a7a <SPI_Pin+0x3a2>
 8001a5e:	2002      	movs	r0, #2
 8001a60:	2400      	movs	r4, #0
 8001a62:	2303      	movs	r3, #3
 8001a64:	2200      	movs	r2, #0
 8001a66:	2105      	movs	r1, #5
 8001a68:	9102      	str	r1, [sp, #8]
 8001a6a:	9201      	str	r2, [sp, #4]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	4623      	mov	r3, r4
 8001a70:	4602      	mov	r2, r0
 8001a72:	210f      	movs	r1, #15
 8001a74:	4876      	ldr	r0, [pc, #472]	@ (8001c50 <SPI_Pin+0x578>)
 8001a76:	f7ff fda1 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PC3) GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	795b      	ldrb	r3, [r3, #5]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2321      	movs	r3, #33	@ 0x21
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d10d      	bne.n	8001aa2 <SPI_Pin+0x3ca>
 8001a86:	2002      	movs	r0, #2
 8001a88:	2400      	movs	r4, #0
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	2105      	movs	r1, #5
 8001a90:	9102      	str	r1, [sp, #8]
 8001a92:	9201      	str	r2, [sp, #4]
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	4623      	mov	r3, r4
 8001a98:	4602      	mov	r2, r0
 8001a9a:	2103      	movs	r1, #3
 8001a9c:	486d      	ldr	r0, [pc, #436]	@ (8001c54 <SPI_Pin+0x57c>)
 8001a9e:	f7ff fd8d 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ab0:	601a      	str	r2, [r3, #0]
}
 8001ab2:	e22d      	b.n	8001f10 <SPI_Pin+0x838>
		else if(config->mode == 1)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	89db      	ldrh	r3, [r3, #14]
 8001ab8:	2b01      	cmp	r3, #1
 8001aba:	d160      	bne.n	8001b7e <SPI_Pin+0x4a6>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	791b      	ldrb	r3, [r3, #4]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	23d2      	movs	r3, #210	@ 0xd2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d10d      	bne.n	8001ae4 <SPI_Pin+0x40c>
 8001ac8:	2002      	movs	r0, #2
 8001aca:	2400      	movs	r4, #0
 8001acc:	2303      	movs	r3, #3
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2105      	movs	r1, #5
 8001ad2:	9102      	str	r1, [sp, #8]
 8001ad4:	9201      	str	r2, [sp, #4]
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	4623      	mov	r3, r4
 8001ada:	4602      	mov	r2, r0
 8001adc:	210a      	movs	r1, #10
 8001ade:	485c      	ldr	r0, [pc, #368]	@ (8001c50 <SPI_Pin+0x578>)
 8001ae0:	f7ff fd6c 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	791b      	ldrb	r3, [r3, #4]
 8001ae8:	461a      	mov	r2, r3
 8001aea:	23d5      	movs	r3, #213	@ 0xd5
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d10d      	bne.n	8001b0c <SPI_Pin+0x434>
 8001af0:	2002      	movs	r0, #2
 8001af2:	2400      	movs	r4, #0
 8001af4:	2303      	movs	r3, #3
 8001af6:	2200      	movs	r2, #0
 8001af8:	2105      	movs	r1, #5
 8001afa:	9102      	str	r1, [sp, #8]
 8001afc:	9201      	str	r2, [sp, #4]
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	4623      	mov	r3, r4
 8001b02:	4602      	mov	r2, r0
 8001b04:	210d      	movs	r1, #13
 8001b06:	4852      	ldr	r0, [pc, #328]	@ (8001c50 <SPI_Pin+0x578>)
 8001b08:	f7ff fd58 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	791b      	ldrb	r3, [r3, #4]
 8001b10:	461a      	mov	r2, r3
 8001b12:	23d2      	movs	r3, #210	@ 0xd2
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d10d      	bne.n	8001b34 <SPI_Pin+0x45c>
 8001b18:	2002      	movs	r0, #2
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	2200      	movs	r2, #0
 8001b20:	2105      	movs	r1, #5
 8001b22:	9102      	str	r1, [sp, #8]
 8001b24:	9201      	str	r2, [sp, #4]
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	4623      	mov	r3, r4
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	210a      	movs	r1, #10
 8001b2e:	4848      	ldr	r0, [pc, #288]	@ (8001c50 <SPI_Pin+0x578>)
 8001b30:	f7ff fd44 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	791b      	ldrb	r3, [r3, #4]
 8001b38:	461a      	mov	r2, r3
 8001b3a:	23d5      	movs	r3, #213	@ 0xd5
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d10d      	bne.n	8001b5c <SPI_Pin+0x484>
 8001b40:	2002      	movs	r0, #2
 8001b42:	2400      	movs	r4, #0
 8001b44:	2303      	movs	r3, #3
 8001b46:	2200      	movs	r2, #0
 8001b48:	2105      	movs	r1, #5
 8001b4a:	9102      	str	r1, [sp, #8]
 8001b4c:	9201      	str	r2, [sp, #4]
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	4623      	mov	r3, r4
 8001b52:	4602      	mov	r2, r0
 8001b54:	210d      	movs	r1, #13
 8001b56:	483e      	ldr	r0, [pc, #248]	@ (8001c50 <SPI_Pin+0x578>)
 8001b58:	f7ff fd30 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001b6a:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001b7a:	601a      	str	r2, [r3, #0]
}
 8001b7c:	e1c8      	b.n	8001f10 <SPI_Pin+0x838>
		else if(config->mode == 2)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	89db      	ldrh	r3, [r3, #14]
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	f040 81c4 	bne.w	8001f10 <SPI_Pin+0x838>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	791b      	ldrb	r3, [r3, #4]
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	23d2      	movs	r3, #210	@ 0xd2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d10d      	bne.n	8001bb0 <SPI_Pin+0x4d8>
 8001b94:	2002      	movs	r0, #2
 8001b96:	2400      	movs	r4, #0
 8001b98:	2303      	movs	r3, #3
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2105      	movs	r1, #5
 8001b9e:	9102      	str	r1, [sp, #8]
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	4623      	mov	r3, r4
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	210a      	movs	r1, #10
 8001baa:	4829      	ldr	r0, [pc, #164]	@ (8001c50 <SPI_Pin+0x578>)
 8001bac:	f7ff fd06 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	791b      	ldrb	r3, [r3, #4]
 8001bb4:	461a      	mov	r2, r3
 8001bb6:	23d5      	movs	r3, #213	@ 0xd5
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d10d      	bne.n	8001bd8 <SPI_Pin+0x500>
 8001bbc:	2002      	movs	r0, #2
 8001bbe:	2400      	movs	r4, #0
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	9102      	str	r1, [sp, #8]
 8001bc8:	9201      	str	r2, [sp, #4]
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	4623      	mov	r3, r4
 8001bce:	4602      	mov	r2, r0
 8001bd0:	210d      	movs	r1, #13
 8001bd2:	481f      	ldr	r0, [pc, #124]	@ (8001c50 <SPI_Pin+0x578>)
 8001bd4:	f7ff fcf2 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	799b      	ldrb	r3, [r3, #6]
 8001bdc:	461a      	mov	r2, r3
 8001bde:	23d6      	movs	r3, #214	@ 0xd6
 8001be0:	429a      	cmp	r2, r3
 8001be2:	d10d      	bne.n	8001c00 <SPI_Pin+0x528>
 8001be4:	2002      	movs	r0, #2
 8001be6:	2400      	movs	r4, #0
 8001be8:	2303      	movs	r3, #3
 8001bea:	2200      	movs	r2, #0
 8001bec:	2105      	movs	r1, #5
 8001bee:	9102      	str	r1, [sp, #8]
 8001bf0:	9201      	str	r2, [sp, #4]
 8001bf2:	9300      	str	r3, [sp, #0]
 8001bf4:	4623      	mov	r3, r4
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	210e      	movs	r1, #14
 8001bfa:	4815      	ldr	r0, [pc, #84]	@ (8001c50 <SPI_Pin+0x578>)
 8001bfc:	f7ff fcde 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	799b      	ldrb	r3, [r3, #6]
 8001c04:	461a      	mov	r2, r3
 8001c06:	2320      	movs	r3, #32
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10d      	bne.n	8001c28 <SPI_Pin+0x550>
 8001c0c:	2002      	movs	r0, #2
 8001c0e:	2400      	movs	r4, #0
 8001c10:	2303      	movs	r3, #3
 8001c12:	2200      	movs	r2, #0
 8001c14:	2105      	movs	r1, #5
 8001c16:	9102      	str	r1, [sp, #8]
 8001c18:	9201      	str	r2, [sp, #4]
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	4623      	mov	r3, r4
 8001c1e:	4602      	mov	r2, r0
 8001c20:	2102      	movs	r1, #2
 8001c22:	480c      	ldr	r0, [pc, #48]	@ (8001c54 <SPI_Pin+0x57c>)
 8001c24:	f7ff fcca 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c36:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001c46:	601a      	str	r2, [r3, #0]
}
 8001c48:	e162      	b.n	8001f10 <SPI_Pin+0x838>
 8001c4a:	bf00      	nop
 8001c4c:	40003800 	.word	0x40003800
 8001c50:	40020400 	.word	0x40020400
 8001c54:	40020800 	.word	0x40020800
	else if(config -> Port == SPI3)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	4aae      	ldr	r2, [pc, #696]	@ (8001f18 <SPI_Pin+0x840>)
 8001c5e:	4293      	cmp	r3, r2
 8001c60:	f040 8156 	bne.w	8001f10 <SPI_Pin+0x838>
		if(config->mode == 0)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	89db      	ldrh	r3, [r3, #14]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 8084 	bne.w	8001d76 <SPI_Pin+0x69e>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	791b      	ldrb	r3, [r3, #4]
 8001c72:	461a      	mov	r2, r3
 8001c74:	2317      	movs	r3, #23
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d10d      	bne.n	8001c96 <SPI_Pin+0x5be>
 8001c7a:	2002      	movs	r0, #2
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	2303      	movs	r3, #3
 8001c80:	2200      	movs	r2, #0
 8001c82:	2106      	movs	r1, #6
 8001c84:	9102      	str	r1, [sp, #8]
 8001c86:	9201      	str	r2, [sp, #4]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	4623      	mov	r3, r4
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	2103      	movs	r1, #3
 8001c90:	48a2      	ldr	r0, [pc, #648]	@ (8001f1c <SPI_Pin+0x844>)
 8001c92:	f7ff fc93 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	791b      	ldrb	r3, [r3, #4]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d10d      	bne.n	8001cc0 <SPI_Pin+0x5e8>
 8001ca4:	2002      	movs	r0, #2
 8001ca6:	2400      	movs	r4, #0
 8001ca8:	2303      	movs	r3, #3
 8001caa:	2200      	movs	r2, #0
 8001cac:	2106      	movs	r1, #6
 8001cae:	9102      	str	r1, [sp, #8]
 8001cb0:	9201      	str	r2, [sp, #4]
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	4623      	mov	r3, r4
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	210a      	movs	r1, #10
 8001cba:	4899      	ldr	r0, [pc, #612]	@ (8001f20 <SPI_Pin+0x848>)
 8001cbc:	f7ff fc7e 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	799b      	ldrb	r3, [r3, #6]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2318      	movs	r3, #24
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d10d      	bne.n	8001ce8 <SPI_Pin+0x610>
 8001ccc:	2002      	movs	r0, #2
 8001cce:	2400      	movs	r4, #0
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2106      	movs	r1, #6
 8001cd6:	9102      	str	r1, [sp, #8]
 8001cd8:	9201      	str	r2, [sp, #4]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	4623      	mov	r3, r4
 8001cde:	4602      	mov	r2, r0
 8001ce0:	2104      	movs	r1, #4
 8001ce2:	488e      	ldr	r0, [pc, #568]	@ (8001f1c <SPI_Pin+0x844>)
 8001ce4:	f7ff fc6a 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	799b      	ldrb	r3, [r3, #6]
 8001cec:	461a      	mov	r2, r3
 8001cee:	f240 1337 	movw	r3, #311	@ 0x137
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d10d      	bne.n	8001d12 <SPI_Pin+0x63a>
 8001cf6:	2002      	movs	r0, #2
 8001cf8:	2400      	movs	r4, #0
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2106      	movs	r1, #6
 8001d00:	9102      	str	r1, [sp, #8]
 8001d02:	9201      	str	r2, [sp, #4]
 8001d04:	9300      	str	r3, [sp, #0]
 8001d06:	4623      	mov	r3, r4
 8001d08:	4602      	mov	r2, r0
 8001d0a:	210b      	movs	r1, #11
 8001d0c:	4884      	ldr	r0, [pc, #528]	@ (8001f20 <SPI_Pin+0x848>)
 8001d0e:	f7ff fc55 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	795b      	ldrb	r3, [r3, #5]
 8001d16:	461a      	mov	r2, r3
 8001d18:	2319      	movs	r3, #25
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d10d      	bne.n	8001d3a <SPI_Pin+0x662>
 8001d1e:	2002      	movs	r0, #2
 8001d20:	2400      	movs	r4, #0
 8001d22:	2303      	movs	r3, #3
 8001d24:	2200      	movs	r2, #0
 8001d26:	2106      	movs	r1, #6
 8001d28:	9102      	str	r1, [sp, #8]
 8001d2a:	9201      	str	r2, [sp, #4]
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	4623      	mov	r3, r4
 8001d30:	4602      	mov	r2, r0
 8001d32:	2105      	movs	r1, #5
 8001d34:	4879      	ldr	r0, [pc, #484]	@ (8001f1c <SPI_Pin+0x844>)
 8001d36:	f7ff fc41 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	795b      	ldrb	r3, [r3, #5]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d10d      	bne.n	8001d64 <SPI_Pin+0x68c>
 8001d48:	2002      	movs	r0, #2
 8001d4a:	2400      	movs	r4, #0
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	2200      	movs	r2, #0
 8001d50:	2106      	movs	r1, #6
 8001d52:	9102      	str	r1, [sp, #8]
 8001d54:	9201      	str	r2, [sp, #4]
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	4623      	mov	r3, r4
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	210c      	movs	r1, #12
 8001d5e:	4870      	ldr	r0, [pc, #448]	@ (8001f20 <SPI_Pin+0x848>)
 8001d60:	f7ff fc2c 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d72:	601a      	str	r2, [r3, #0]
}
 8001d74:	e0cc      	b.n	8001f10 <SPI_Pin+0x838>
		else if(config->mode == 1)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	89db      	ldrh	r3, [r3, #14]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d162      	bne.n	8001e44 <SPI_Pin+0x76c>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	791b      	ldrb	r3, [r3, #4]
 8001d82:	461a      	mov	r2, r3
 8001d84:	2317      	movs	r3, #23
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d10d      	bne.n	8001da6 <SPI_Pin+0x6ce>
 8001d8a:	2002      	movs	r0, #2
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	2303      	movs	r3, #3
 8001d90:	2200      	movs	r2, #0
 8001d92:	2106      	movs	r1, #6
 8001d94:	9102      	str	r1, [sp, #8]
 8001d96:	9201      	str	r2, [sp, #4]
 8001d98:	9300      	str	r3, [sp, #0]
 8001d9a:	4623      	mov	r3, r4
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	2103      	movs	r1, #3
 8001da0:	485e      	ldr	r0, [pc, #376]	@ (8001f1c <SPI_Pin+0x844>)
 8001da2:	f7ff fc0b 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	791b      	ldrb	r3, [r3, #4]
 8001daa:	461a      	mov	r2, r3
 8001dac:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d10d      	bne.n	8001dd0 <SPI_Pin+0x6f8>
 8001db4:	2002      	movs	r0, #2
 8001db6:	2400      	movs	r4, #0
 8001db8:	2303      	movs	r3, #3
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2106      	movs	r1, #6
 8001dbe:	9102      	str	r1, [sp, #8]
 8001dc0:	9201      	str	r2, [sp, #4]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	210a      	movs	r1, #10
 8001dca:	4855      	ldr	r0, [pc, #340]	@ (8001f20 <SPI_Pin+0x848>)
 8001dcc:	f7ff fbf6 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	799b      	ldrb	r3, [r3, #6]
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	2318      	movs	r3, #24
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d10d      	bne.n	8001df8 <SPI_Pin+0x720>
 8001ddc:	2002      	movs	r0, #2
 8001dde:	2400      	movs	r4, #0
 8001de0:	2303      	movs	r3, #3
 8001de2:	2200      	movs	r2, #0
 8001de4:	2106      	movs	r1, #6
 8001de6:	9102      	str	r1, [sp, #8]
 8001de8:	9201      	str	r2, [sp, #4]
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	4623      	mov	r3, r4
 8001dee:	4602      	mov	r2, r0
 8001df0:	2104      	movs	r1, #4
 8001df2:	484a      	ldr	r0, [pc, #296]	@ (8001f1c <SPI_Pin+0x844>)
 8001df4:	f7ff fbe2 	bl	80015bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	799b      	ldrb	r3, [r3, #6]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f240 1337 	movw	r3, #311	@ 0x137
 8001e02:	429a      	cmp	r2, r3
 8001e04:	d10d      	bne.n	8001e22 <SPI_Pin+0x74a>
 8001e06:	2002      	movs	r0, #2
 8001e08:	2400      	movs	r4, #0
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2106      	movs	r1, #6
 8001e10:	9102      	str	r1, [sp, #8]
 8001e12:	9201      	str	r2, [sp, #4]
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	4623      	mov	r3, r4
 8001e18:	4602      	mov	r2, r0
 8001e1a:	210b      	movs	r1, #11
 8001e1c:	4840      	ldr	r0, [pc, #256]	@ (8001f20 <SPI_Pin+0x848>)
 8001e1e:	f7ff fbcd 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001e30:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001e40:	601a      	str	r2, [r3, #0]
}
 8001e42:	e065      	b.n	8001f10 <SPI_Pin+0x838>
		else if(config->mode == 2)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	89db      	ldrh	r3, [r3, #14]
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d161      	bne.n	8001f10 <SPI_Pin+0x838>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	791b      	ldrb	r3, [r3, #4]
 8001e50:	461a      	mov	r2, r3
 8001e52:	2317      	movs	r3, #23
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d10d      	bne.n	8001e74 <SPI_Pin+0x79c>
 8001e58:	2002      	movs	r0, #2
 8001e5a:	2400      	movs	r4, #0
 8001e5c:	2303      	movs	r3, #3
 8001e5e:	2200      	movs	r2, #0
 8001e60:	2106      	movs	r1, #6
 8001e62:	9102      	str	r1, [sp, #8]
 8001e64:	9201      	str	r2, [sp, #4]
 8001e66:	9300      	str	r3, [sp, #0]
 8001e68:	4623      	mov	r3, r4
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	482b      	ldr	r0, [pc, #172]	@ (8001f1c <SPI_Pin+0x844>)
 8001e70:	f7ff fba4 	bl	80015bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	791b      	ldrb	r3, [r3, #4]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d10d      	bne.n	8001e9e <SPI_Pin+0x7c6>
 8001e82:	2002      	movs	r0, #2
 8001e84:	2400      	movs	r4, #0
 8001e86:	2303      	movs	r3, #3
 8001e88:	2200      	movs	r2, #0
 8001e8a:	2106      	movs	r1, #6
 8001e8c:	9102      	str	r1, [sp, #8]
 8001e8e:	9201      	str	r2, [sp, #4]
 8001e90:	9300      	str	r3, [sp, #0]
 8001e92:	4623      	mov	r3, r4
 8001e94:	4602      	mov	r2, r0
 8001e96:	210a      	movs	r1, #10
 8001e98:	4821      	ldr	r0, [pc, #132]	@ (8001f20 <SPI_Pin+0x848>)
 8001e9a:	f7ff fb8f 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	795b      	ldrb	r3, [r3, #5]
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2319      	movs	r3, #25
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	d10d      	bne.n	8001ec6 <SPI_Pin+0x7ee>
 8001eaa:	2002      	movs	r0, #2
 8001eac:	2400      	movs	r4, #0
 8001eae:	2303      	movs	r3, #3
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	2106      	movs	r1, #6
 8001eb4:	9102      	str	r1, [sp, #8]
 8001eb6:	9201      	str	r2, [sp, #4]
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	4623      	mov	r3, r4
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	2105      	movs	r1, #5
 8001ec0:	4816      	ldr	r0, [pc, #88]	@ (8001f1c <SPI_Pin+0x844>)
 8001ec2:	f7ff fb7b 	bl	80015bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	795b      	ldrb	r3, [r3, #5]
 8001eca:	461a      	mov	r2, r3
 8001ecc:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10d      	bne.n	8001ef0 <SPI_Pin+0x818>
 8001ed4:	2002      	movs	r0, #2
 8001ed6:	2400      	movs	r4, #0
 8001ed8:	2303      	movs	r3, #3
 8001eda:	2200      	movs	r2, #0
 8001edc:	2106      	movs	r1, #6
 8001ede:	9102      	str	r1, [sp, #8]
 8001ee0:	9201      	str	r2, [sp, #4]
 8001ee2:	9300      	str	r3, [sp, #0]
 8001ee4:	4623      	mov	r3, r4
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	210c      	movs	r1, #12
 8001eea:	480d      	ldr	r0, [pc, #52]	@ (8001f20 <SPI_Pin+0x848>)
 8001eec:	f7ff fb66 	bl	80015bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001efe:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001f0e:	601a      	str	r2, [r3, #0]
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd90      	pop	{r4, r7, pc}
 8001f18:	40003c00 	.word	0x40003c00
 8001f1c:	40020400 	.word	0x40020400
 8001f20:	40020800 	.word	0x40020800

08001f24 <SPI_Init>:


void SPI_Init(SPI_Config *config)
{
 8001f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af04      	add	r7, sp, #16
 8001f2a:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Type.Master){
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	8b1b      	ldrh	r3, [r3, #24]
 8001f30:	2204      	movs	r2, #4
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d10f      	bne.n	8001f56 <SPI_Init+0x32>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6898      	ldr	r0, [r3, #8]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	7b19      	ldrb	r1, [r3, #12]
 8001f3e:	2501      	movs	r5, #1
 8001f40:	2600      	movs	r6, #0
 8001f42:	2303      	movs	r3, #3
 8001f44:	2201      	movs	r2, #1
 8001f46:	2400      	movs	r4, #0
 8001f48:	9402      	str	r4, [sp, #8]
 8001f4a:	9201      	str	r2, [sp, #4]
 8001f4c:	9300      	str	r3, [sp, #0]
 8001f4e:	4633      	mov	r3, r6
 8001f50:	462a      	mov	r2, r5
 8001f52:	f7ff fb33 	bl	80015bc <GPIO_Pin_Init>
	}
	if(config->type == SPI_Type.Slave){
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	8b1b      	ldrh	r3, [r3, #24]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d10f      	bne.n	8001f80 <SPI_Init+0x5c>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.Input, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6898      	ldr	r0, [r3, #8]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7b19      	ldrb	r1, [r3, #12]
 8001f68:	2500      	movs	r5, #0
 8001f6a:	2600      	movs	r6, #0
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	2201      	movs	r2, #1
 8001f70:	2400      	movs	r4, #0
 8001f72:	9402      	str	r4, [sp, #8]
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	4633      	mov	r3, r6
 8001f7a:	462a      	mov	r2, r5
 8001f7c:	f7ff fb1e 	bl	80015bc <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f7ff fb6f 	bl	8001664 <SPI_Clock_Enable>
	SPI_Pin(config);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fba6 	bl	80016d8 <SPI_Pin>

	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	8b99      	ldrh	r1, [r3, #28]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	8b5b      	ldrh	r3, [r3, #26]
					config->type | config->frame_format |
					config->data_format | config->crc ;
 8001f9a:	430b      	orrs	r3, r1
 8001f9c:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	8b1b      	ldrh	r3, [r3, #24]
					config->data_format | config->crc ;
 8001fa2:	430b      	orrs	r3, r1
 8001fa4:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	8a9b      	ldrh	r3, [r3, #20]
					config->data_format | config->crc ;
 8001faa:	430b      	orrs	r3, r1
 8001fac:	b299      	uxth	r1, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	8a5b      	ldrh	r3, [r3, #18]
 8001fb2:	430b      	orrs	r3, r1
 8001fb4:	b299      	uxth	r1, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	8a1b      	ldrh	r3, [r3, #16]
 8001fba:	430b      	orrs	r3, r1
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	4619      	mov	r1, r3
	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	430a      	orrs	r2, r1
 8001fc6:	601a      	str	r2, [r3, #0]
	config->Port->CR2 |= config->dma | config->interrupt;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	685a      	ldr	r2, [r3, #4]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	8c19      	ldrh	r1, [r3, #32]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	8bdb      	ldrh	r3, [r3, #30]
 8001fd6:	430b      	orrs	r3, r1
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	4619      	mov	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	430a      	orrs	r2, r1
 8001fe2:	605a      	str	r2, [r3, #4]

//	if(config->Port == SPI1)config->speed = (SystemCoreClock/2)/(2*2^(config->prescaler));
//	else config->speed = (SystemCoreClock/4)/(2*2^(config->prescaler));

	config -> Port -> CR1 |= config->prescaler << SPI_CR1_BR_Pos;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	6819      	ldr	r1, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	8adb      	ldrh	r3, [r3, #22]
 8001fee:	00da      	lsls	r2, r3, #3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 &= ~SPI_CR1_SSM ;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002006:	601a      	str	r2, [r3, #0]
	config->Port -> CR2 |=  SPI_CR2_SSOE ;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f042 0204 	orr.w	r2, r2, #4
 8002016:	605a      	str	r2, [r3, #4]


	if(config->dma == SPI_DMA.RX_DMA_Enable)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	8c1b      	ldrh	r3, [r3, #32]
 800201c:	2201      	movs	r2, #1
 800201e:	4293      	cmp	r3, r2
 8002020:	d176      	bne.n	8002110 <SPI_Init+0x1ec>
	{
		if(config->Port == SPI1)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a7a      	ldr	r2, [pc, #488]	@ (8002210 <SPI_Init+0x2ec>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d122      	bne.n	8002072 <SPI_Init+0x14e>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI1_RX;
 800202c:	4a79      	ldr	r2, [pc, #484]	@ (8002214 <SPI_Init+0x2f0>)
 800202e:	4b7a      	ldr	r3, [pc, #488]	@ (8002218 <SPI_Init+0x2f4>)
 8002030:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA2;
 8002032:	4b79      	ldr	r3, [pc, #484]	@ (8002218 <SPI_Init+0x2f4>)
 8002034:	4a79      	ldr	r2, [pc, #484]	@ (800221c <SPI_Init+0x2f8>)
 8002036:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 8002038:	2203      	movs	r2, #3
 800203a:	4b77      	ldr	r3, [pc, #476]	@ (8002218 <SPI_Init+0x2f4>)
 800203c:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 800203e:	2200      	movs	r2, #0
 8002040:	4b75      	ldr	r3, [pc, #468]	@ (8002218 <SPI_Init+0x2f4>)
 8002042:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8002044:	2220      	movs	r2, #32
 8002046:	4b74      	ldr	r3, [pc, #464]	@ (8002218 <SPI_Init+0x2f4>)
 8002048:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 800204a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800204e:	4b72      	ldr	r3, [pc, #456]	@ (8002218 <SPI_Init+0x2f4>)
 8002050:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 8002052:	2200      	movs	r2, #0
 8002054:	4b70      	ldr	r3, [pc, #448]	@ (8002218 <SPI_Init+0x2f4>)
 8002056:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8002058:	2200      	movs	r2, #0
 800205a:	4b6f      	ldr	r3, [pc, #444]	@ (8002218 <SPI_Init+0x2f4>)
 800205c:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 800205e:	2200      	movs	r2, #0
 8002060:	4b6d      	ldr	r3, [pc, #436]	@ (8002218 <SPI_Init+0x2f4>)
 8002062:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8002064:	2200      	movs	r2, #0
 8002066:	4b6c      	ldr	r3, [pc, #432]	@ (8002218 <SPI_Init+0x2f4>)
 8002068:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 800206a:	486b      	ldr	r0, [pc, #428]	@ (8002218 <SPI_Init+0x2f4>)
 800206c:	f7fe fdcc 	bl	8000c08 <DMA_Init>
 8002070:	e04e      	b.n	8002110 <SPI_Init+0x1ec>
		}
		else if(config->Port == SPI2)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6a      	ldr	r2, [pc, #424]	@ (8002220 <SPI_Init+0x2fc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d122      	bne.n	80020c2 <SPI_Init+0x19e>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI2_RX;
 800207c:	4a69      	ldr	r2, [pc, #420]	@ (8002224 <SPI_Init+0x300>)
 800207e:	4b66      	ldr	r3, [pc, #408]	@ (8002218 <SPI_Init+0x2f4>)
 8002080:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 8002082:	4b65      	ldr	r3, [pc, #404]	@ (8002218 <SPI_Init+0x2f4>)
 8002084:	4a68      	ldr	r2, [pc, #416]	@ (8002228 <SPI_Init+0x304>)
 8002086:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 8002088:	2200      	movs	r2, #0
 800208a:	4b63      	ldr	r3, [pc, #396]	@ (8002218 <SPI_Init+0x2f4>)
 800208c:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 800208e:	2200      	movs	r2, #0
 8002090:	4b61      	ldr	r3, [pc, #388]	@ (8002218 <SPI_Init+0x2f4>)
 8002092:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8002094:	2220      	movs	r2, #32
 8002096:	4b60      	ldr	r3, [pc, #384]	@ (8002218 <SPI_Init+0x2f4>)
 8002098:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 800209a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800209e:	4b5e      	ldr	r3, [pc, #376]	@ (8002218 <SPI_Init+0x2f4>)
 80020a0:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 80020a2:	2200      	movs	r2, #0
 80020a4:	4b5c      	ldr	r3, [pc, #368]	@ (8002218 <SPI_Init+0x2f4>)
 80020a6:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80020a8:	2200      	movs	r2, #0
 80020aa:	4b5b      	ldr	r3, [pc, #364]	@ (8002218 <SPI_Init+0x2f4>)
 80020ac:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80020ae:	2200      	movs	r2, #0
 80020b0:	4b59      	ldr	r3, [pc, #356]	@ (8002218 <SPI_Init+0x2f4>)
 80020b2:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 80020b4:	2200      	movs	r2, #0
 80020b6:	4b58      	ldr	r3, [pc, #352]	@ (8002218 <SPI_Init+0x2f4>)
 80020b8:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 80020ba:	4857      	ldr	r0, [pc, #348]	@ (8002218 <SPI_Init+0x2f4>)
 80020bc:	f7fe fda4 	bl	8000c08 <DMA_Init>
 80020c0:	e026      	b.n	8002110 <SPI_Init+0x1ec>
		}
		else if(config->Port == SPI3)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a59      	ldr	r2, [pc, #356]	@ (800222c <SPI_Init+0x308>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d121      	bne.n	8002110 <SPI_Init+0x1ec>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI3_RX;
 80020cc:	4a58      	ldr	r2, [pc, #352]	@ (8002230 <SPI_Init+0x30c>)
 80020ce:	4b52      	ldr	r3, [pc, #328]	@ (8002218 <SPI_Init+0x2f4>)
 80020d0:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 80020d2:	4b51      	ldr	r3, [pc, #324]	@ (8002218 <SPI_Init+0x2f4>)
 80020d4:	4a54      	ldr	r2, [pc, #336]	@ (8002228 <SPI_Init+0x304>)
 80020d6:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 80020d8:	2200      	movs	r2, #0
 80020da:	4b4f      	ldr	r3, [pc, #316]	@ (8002218 <SPI_Init+0x2f4>)
 80020dc:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 80020de:	2200      	movs	r2, #0
 80020e0:	4b4d      	ldr	r3, [pc, #308]	@ (8002218 <SPI_Init+0x2f4>)
 80020e2:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 80020e4:	2220      	movs	r2, #32
 80020e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002218 <SPI_Init+0x2f4>)
 80020e8:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 80020ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002218 <SPI_Init+0x2f4>)
 80020f0:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 80020f2:	2200      	movs	r2, #0
 80020f4:	4b48      	ldr	r3, [pc, #288]	@ (8002218 <SPI_Init+0x2f4>)
 80020f6:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80020f8:	2200      	movs	r2, #0
 80020fa:	4b47      	ldr	r3, [pc, #284]	@ (8002218 <SPI_Init+0x2f4>)
 80020fc:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80020fe:	2200      	movs	r2, #0
 8002100:	4b45      	ldr	r3, [pc, #276]	@ (8002218 <SPI_Init+0x2f4>)
 8002102:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8002104:	2200      	movs	r2, #0
 8002106:	4b44      	ldr	r3, [pc, #272]	@ (8002218 <SPI_Init+0x2f4>)
 8002108:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 800210a:	4843      	ldr	r0, [pc, #268]	@ (8002218 <SPI_Init+0x2f4>)
 800210c:	f7fe fd7c 	bl	8000c08 <DMA_Init>
		}
	}
	if(config->dma == SPI_DMA.TX_DMA_Enable)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	8c1b      	ldrh	r3, [r3, #32]
 8002114:	2202      	movs	r2, #2
 8002116:	4293      	cmp	r3, r2
 8002118:	d176      	bne.n	8002208 <SPI_Init+0x2e4>
	{
		if(config->Port == SPI1)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a3c      	ldr	r2, [pc, #240]	@ (8002210 <SPI_Init+0x2ec>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d122      	bne.n	800216a <SPI_Init+0x246>
		{
			xDMA_TX.stream = SPI_DMA_Stream.SPI1_TX;
 8002124:	4a43      	ldr	r2, [pc, #268]	@ (8002234 <SPI_Init+0x310>)
 8002126:	4b44      	ldr	r3, [pc, #272]	@ (8002238 <SPI_Init+0x314>)
 8002128:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA2;
 800212a:	4b43      	ldr	r3, [pc, #268]	@ (8002238 <SPI_Init+0x314>)
 800212c:	4a3b      	ldr	r2, [pc, #236]	@ (800221c <SPI_Init+0x2f8>)
 800212e:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 8002130:	2203      	movs	r2, #3
 8002132:	4b41      	ldr	r3, [pc, #260]	@ (8002238 <SPI_Init+0x314>)
 8002134:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 8002136:	2200      	movs	r2, #0
 8002138:	4b3f      	ldr	r3, [pc, #252]	@ (8002238 <SPI_Init+0x314>)
 800213a:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 800213c:	2220      	movs	r2, #32
 800213e:	4b3e      	ldr	r3, [pc, #248]	@ (8002238 <SPI_Init+0x314>)
 8002140:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 8002142:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002146:	4b3c      	ldr	r3, [pc, #240]	@ (8002238 <SPI_Init+0x314>)
 8002148:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 800214a:	2200      	movs	r2, #0
 800214c:	4b3a      	ldr	r3, [pc, #232]	@ (8002238 <SPI_Init+0x314>)
 800214e:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8002150:	2200      	movs	r2, #0
 8002152:	4b39      	ldr	r3, [pc, #228]	@ (8002238 <SPI_Init+0x314>)
 8002154:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8002156:	2200      	movs	r2, #0
 8002158:	4b37      	ldr	r3, [pc, #220]	@ (8002238 <SPI_Init+0x314>)
 800215a:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 800215c:	2200      	movs	r2, #0
 800215e:	4b36      	ldr	r3, [pc, #216]	@ (8002238 <SPI_Init+0x314>)
 8002160:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 8002162:	4835      	ldr	r0, [pc, #212]	@ (8002238 <SPI_Init+0x314>)
 8002164:	f7fe fd50 	bl	8000c08 <DMA_Init>
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
			DMA_Init(&xDMA_TX);
		}
	}
}
 8002168:	e04e      	b.n	8002208 <SPI_Init+0x2e4>
		else if(config->Port == SPI2)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2c      	ldr	r2, [pc, #176]	@ (8002220 <SPI_Init+0x2fc>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d122      	bne.n	80021ba <SPI_Init+0x296>
			xDMA_TX.stream = SPI_DMA_Stream.SPI2_TX;
 8002174:	4a31      	ldr	r2, [pc, #196]	@ (800223c <SPI_Init+0x318>)
 8002176:	4b30      	ldr	r3, [pc, #192]	@ (8002238 <SPI_Init+0x314>)
 8002178:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 800217a:	4b2f      	ldr	r3, [pc, #188]	@ (8002238 <SPI_Init+0x314>)
 800217c:	4a2a      	ldr	r2, [pc, #168]	@ (8002228 <SPI_Init+0x304>)
 800217e:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 8002180:	2200      	movs	r2, #0
 8002182:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <SPI_Init+0x314>)
 8002184:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 8002186:	2200      	movs	r2, #0
 8002188:	4b2b      	ldr	r3, [pc, #172]	@ (8002238 <SPI_Init+0x314>)
 800218a:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 800218c:	2220      	movs	r2, #32
 800218e:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <SPI_Init+0x314>)
 8002190:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 8002192:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002196:	4b28      	ldr	r3, [pc, #160]	@ (8002238 <SPI_Init+0x314>)
 8002198:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 800219a:	2200      	movs	r2, #0
 800219c:	4b26      	ldr	r3, [pc, #152]	@ (8002238 <SPI_Init+0x314>)
 800219e:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80021a0:	2200      	movs	r2, #0
 80021a2:	4b25      	ldr	r3, [pc, #148]	@ (8002238 <SPI_Init+0x314>)
 80021a4:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80021a6:	2200      	movs	r2, #0
 80021a8:	4b23      	ldr	r3, [pc, #140]	@ (8002238 <SPI_Init+0x314>)
 80021aa:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 80021ac:	2200      	movs	r2, #0
 80021ae:	4b22      	ldr	r3, [pc, #136]	@ (8002238 <SPI_Init+0x314>)
 80021b0:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 80021b2:	4821      	ldr	r0, [pc, #132]	@ (8002238 <SPI_Init+0x314>)
 80021b4:	f7fe fd28 	bl	8000c08 <DMA_Init>
}
 80021b8:	e026      	b.n	8002208 <SPI_Init+0x2e4>
		else if(config->Port == SPI3)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a1b      	ldr	r2, [pc, #108]	@ (800222c <SPI_Init+0x308>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d121      	bne.n	8002208 <SPI_Init+0x2e4>
			xDMA_TX.stream = SPI_DMA_Stream.SPI3_TX;
 80021c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002240 <SPI_Init+0x31c>)
 80021c6:	4b1c      	ldr	r3, [pc, #112]	@ (8002238 <SPI_Init+0x314>)
 80021c8:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002238 <SPI_Init+0x314>)
 80021cc:	4a16      	ldr	r2, [pc, #88]	@ (8002228 <SPI_Init+0x304>)
 80021ce:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 80021d0:	2200      	movs	r2, #0
 80021d2:	4b19      	ldr	r3, [pc, #100]	@ (8002238 <SPI_Init+0x314>)
 80021d4:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 80021d6:	2200      	movs	r2, #0
 80021d8:	4b17      	ldr	r3, [pc, #92]	@ (8002238 <SPI_Init+0x314>)
 80021da:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 80021dc:	2220      	movs	r2, #32
 80021de:	4b16      	ldr	r3, [pc, #88]	@ (8002238 <SPI_Init+0x314>)
 80021e0:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 80021e2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021e6:	4b14      	ldr	r3, [pc, #80]	@ (8002238 <SPI_Init+0x314>)
 80021e8:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 80021ea:	2200      	movs	r2, #0
 80021ec:	4b12      	ldr	r3, [pc, #72]	@ (8002238 <SPI_Init+0x314>)
 80021ee:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80021f0:	2200      	movs	r2, #0
 80021f2:	4b11      	ldr	r3, [pc, #68]	@ (8002238 <SPI_Init+0x314>)
 80021f4:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80021f6:	2200      	movs	r2, #0
 80021f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002238 <SPI_Init+0x314>)
 80021fa:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 80021fc:	2200      	movs	r2, #0
 80021fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002238 <SPI_Init+0x314>)
 8002200:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 8002202:	480d      	ldr	r0, [pc, #52]	@ (8002238 <SPI_Init+0x314>)
 8002204:	f7fe fd00 	bl	8000c08 <DMA_Init>
}
 8002208:	bf00      	nop
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002210:	40013000 	.word	0x40013000
 8002214:	40026410 	.word	0x40026410
 8002218:	2000006c 	.word	0x2000006c
 800221c:	40026400 	.word	0x40026400
 8002220:	40003800 	.word	0x40003800
 8002224:	40026058 	.word	0x40026058
 8002228:	40026000 	.word	0x40026000
 800222c:	40003c00 	.word	0x40003c00
 8002230:	40026040 	.word	0x40026040
 8002234:	40026458 	.word	0x40026458
 8002238:	20000038 	.word	0x20000038
 800223c:	40026070 	.word	0x40026070
 8002240:	400260b8 	.word	0x400260b8

08002244 <SPI_DeInit>:
}



void SPI_DeInit(SPI_Config *config)
{
 8002244:	b480      	push	{r7}
 8002246:	b083      	sub	sp, #12
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
	if(config ->Port == SPI1)RCC -> APB2RSTR |= RCC_APB2RSTR_SPI1RST;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a12      	ldr	r2, [pc, #72]	@ (800229c <SPI_DeInit+0x58>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d105      	bne.n	8002262 <SPI_DeInit+0x1e>
 8002256:	4b12      	ldr	r3, [pc, #72]	@ (80022a0 <SPI_DeInit+0x5c>)
 8002258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800225a:	4a11      	ldr	r2, [pc, #68]	@ (80022a0 <SPI_DeInit+0x5c>)
 800225c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002260:	6253      	str	r3, [r2, #36]	@ 0x24
	if(config ->Port == SPI2)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI2RST;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a0f      	ldr	r2, [pc, #60]	@ (80022a4 <SPI_DeInit+0x60>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d105      	bne.n	8002278 <SPI_DeInit+0x34>
 800226c:	4b0c      	ldr	r3, [pc, #48]	@ (80022a0 <SPI_DeInit+0x5c>)
 800226e:	6a1b      	ldr	r3, [r3, #32]
 8002270:	4a0b      	ldr	r2, [pc, #44]	@ (80022a0 <SPI_DeInit+0x5c>)
 8002272:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002276:	6213      	str	r3, [r2, #32]
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0a      	ldr	r2, [pc, #40]	@ (80022a8 <SPI_DeInit+0x64>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d105      	bne.n	800228e <SPI_DeInit+0x4a>
 8002282:	4b07      	ldr	r3, [pc, #28]	@ (80022a0 <SPI_DeInit+0x5c>)
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4a06      	ldr	r2, [pc, #24]	@ (80022a0 <SPI_DeInit+0x5c>)
 8002288:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800228c:	6213      	str	r3, [r2, #32]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40013000 	.word	0x40013000
 80022a0:	40023800 	.word	0x40023800
 80022a4:	40003800 	.word	0x40003800
 80022a8:	40003c00 	.word	0x40003c00

080022ac <SPI_TRX_Byte>:


uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 80022bc:	bf00      	nop
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d0f8      	beq.n	80022be <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	887a      	ldrh	r2, [r7, #2]
 80022d2:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 80022d4:	bf00      	nop
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f003 0301 	and.w	r3, r3, #1
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d0f8      	beq.n	80022d6 <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 80022ee:	bf00      	nop
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f8      	beq.n	80022f0 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 80022fe:	bf00      	nop
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230a:	2b00      	cmp	r3, #0
 800230c:	d1f8      	bne.n	8002300 <SPI_TRX_Byte+0x54>
	return temp;
 800230e:	89fb      	ldrh	r3, [r7, #14]
 8002310:	b29b      	uxth	r3, r3
}
 8002312:	4618      	mov	r0, r3
 8002314:	3714      	adds	r7, #20
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <SPI_NSS_High>:
	}

}

void SPI_NSS_High(SPI_Config *config)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	7b1b      	ldrb	r3, [r3, #12]
 800232e:	4619      	mov	r1, r3
 8002330:	4610      	mov	r0, r2
 8002332:	f7ff f8bd 	bl	80014b0 <GPIO_Pin_High>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}

0800233e <SPI_NSS_Low>:

void SPI_NSS_Low(SPI_Config *config)
{
 800233e:	b580      	push	{r7, lr}
 8002340:	b082      	sub	sp, #8
 8002342:	af00      	add	r7, sp, #0
 8002344:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	689a      	ldr	r2, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	7b1b      	ldrb	r3, [r3, #12]
 800234e:	4619      	mov	r1, r3
 8002350:	4610      	mov	r0, r2
 8002352:	f7ff f8bf 	bl	80014d4 <GPIO_Pin_Low>
}
 8002356:	bf00      	nop
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
	...

08002360 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	4603      	mov	r3, r0
 8002368:	6039      	str	r1, [r7, #0]
 800236a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800236c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002370:	2b00      	cmp	r3, #0
 8002372:	db0a      	blt.n	800238a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	b2da      	uxtb	r2, r3
 8002378:	490c      	ldr	r1, [pc, #48]	@ (80023ac <__NVIC_SetPriority+0x4c>)
 800237a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237e:	0112      	lsls	r2, r2, #4
 8002380:	b2d2      	uxtb	r2, r2
 8002382:	440b      	add	r3, r1
 8002384:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002388:	e00a      	b.n	80023a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	b2da      	uxtb	r2, r3
 800238e:	4908      	ldr	r1, [pc, #32]	@ (80023b0 <__NVIC_SetPriority+0x50>)
 8002390:	79fb      	ldrb	r3, [r7, #7]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	3b04      	subs	r3, #4
 8002398:	0112      	lsls	r2, r2, #4
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	440b      	add	r3, r1
 800239e:	761a      	strb	r2, [r3, #24]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr
 80023ac:	e000e100 	.word	0xe000e100
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3b01      	subs	r3, #1
 80023c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023c4:	d301      	bcc.n	80023ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023c6:	2301      	movs	r3, #1
 80023c8:	e00f      	b.n	80023ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ca:	4a0a      	ldr	r2, [pc, #40]	@ (80023f4 <SysTick_Config+0x40>)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023d2:	210f      	movs	r1, #15
 80023d4:	f04f 30ff 	mov.w	r0, #4294967295
 80023d8:	f7ff ffc2 	bl	8002360 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023dc:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <SysTick_Config+0x40>)
 80023de:	2200      	movs	r2, #0
 80023e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023e2:	4b04      	ldr	r3, [pc, #16]	@ (80023f4 <SysTick_Config+0x40>)
 80023e4:	2207      	movs	r2, #7
 80023e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3708      	adds	r7, #8
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	e000e010 	.word	0xe000e010

080023f8 <MCU_Clock_Setup>:
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 80023fe:	2304      	movs	r3, #4
 8002400:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 8002402:	23a8      	movs	r3, #168	@ 0xa8
 8002404:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 8002406:	2300      	movs	r3, #0
 8002408:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 800240a:	2307      	movs	r3, #7
 800240c:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 800240e:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002410:	2200      	movs	r2, #0
 8002412:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 8002414:	4b3b      	ldr	r3, [pc, #236]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a3a      	ldr	r2, [pc, #232]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 800241a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800241e:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8002420:	bf00      	nop
 8002422:	4b38      	ldr	r3, [pc, #224]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f9      	beq.n	8002422 <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 800242e:	4b35      	ldr	r3, [pc, #212]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4a34      	ldr	r2, [pc, #208]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002438:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 800243a:	4b33      	ldr	r3, [pc, #204]	@ (8002508 <MCU_Clock_Setup+0x110>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a32      	ldr	r2, [pc, #200]	@ (8002508 <MCU_Clock_Setup+0x110>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002444:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 8002446:	4b31      	ldr	r3, [pc, #196]	@ (800250c <MCU_Clock_Setup+0x114>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a30      	ldr	r2, [pc, #192]	@ (800250c <MCU_Clock_Setup+0x114>)
 800244c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002450:	f043 0305 	orr.w	r3, r3, #5
 8002454:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 8002456:	4b2b      	ldr	r3, [pc, #172]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	793a      	ldrb	r2, [r7, #4]
 800245c:	0611      	lsls	r1, r2, #24
 800245e:	797a      	ldrb	r2, [r7, #5]
 8002460:	0412      	lsls	r2, r2, #16
 8002462:	4311      	orrs	r1, r2
 8002464:	79ba      	ldrb	r2, [r7, #6]
 8002466:	0192      	lsls	r2, r2, #6
 8002468:	4311      	orrs	r1, r2
 800246a:	79fa      	ldrb	r2, [r7, #7]
 800246c:	430a      	orrs	r2, r1
 800246e:	4611      	mov	r1, r2
 8002470:	4a24      	ldr	r2, [pc, #144]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002472:	430b      	orrs	r3, r1
 8002474:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 8002476:	4b23      	ldr	r3, [pc, #140]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 800247c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002480:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8002482:	4b20      	ldr	r3, [pc, #128]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002484:	4a1f      	ldr	r2, [pc, #124]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 800248a:	4b1e      	ldr	r3, [pc, #120]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	4a1d      	ldr	r2, [pc, #116]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002490:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8002494:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 8002496:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	4a1a      	ldr	r2, [pc, #104]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 800249c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80024a0:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a17      	ldr	r2, [pc, #92]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80024ac:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80024ae:	bf00      	nop
 80024b0:	4b14      	ldr	r3, [pc, #80]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0f9      	beq.n	80024b0 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024c2:	f043 0302 	orr.w	r3, r3, #2
 80024c6:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80024c8:	bf00      	nop
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b08      	cmp	r3, #8
 80024d4:	d1f9      	bne.n	80024ca <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 80024d6:	f000 f871 	bl	80025bc <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80024da:	4b0d      	ldr	r3, [pc, #52]	@ (8002510 <MCU_Clock_Setup+0x118>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	08db      	lsrs	r3, r3, #3
 80024e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002514 <MCU_Clock_Setup+0x11c>)
 80024e2:	fba2 2303 	umull	r2, r3, r2, r3
 80024e6:	085b      	lsrs	r3, r3, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff ff63 	bl	80023b4 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80024ee:	4b05      	ldr	r3, [pc, #20]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024f2:	4a04      	ldr	r2, [pc, #16]	@ (8002504 <MCU_Clock_Setup+0x10c>)
 80024f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024f8:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	40023800 	.word	0x40023800
 8002508:	40007000 	.word	0x40007000
 800250c:	40023c00 	.word	0x40023c00
 8002510:	20000000 	.word	0x20000000
 8002514:	18618619 	.word	0x18618619

08002518 <Delay_Config>:
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <Delay_Config+0x2c>)
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <Delay_Config+0x2c>)
 8002524:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002528:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <Delay_Config+0x2c>)
 800252c:	2200      	movs	r2, #0
 800252e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8002530:	4b04      	ldr	r3, [pc, #16]	@ (8002544 <Delay_Config+0x2c>)
 8002532:	2205      	movs	r2, #5
 8002534:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
 8002542:	bf00      	nop
 8002544:	e000e010 	.word	0xe000e010

08002548 <main>:
#include "GC9A01.h"

GC9A01_Typedef display;

int main(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 800254c:	f7ff ff54 	bl	80023f8 <MCU_Clock_Setup>
	Delay_Config();
 8002550:	f7ff ffe2 	bl	8002518 <Delay_Config>
	Console_Init(USART1, 9600);
 8002554:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002558:	480c      	ldr	r0, [pc, #48]	@ (800258c <main+0x44>)
 800255a:	f7fe fb09 	bl	8000b70 <Console_Init>

	// test this part
	GC9A01_DeInit(&display);
 800255e:	480c      	ldr	r0, [pc, #48]	@ (8002590 <main+0x48>)
 8002560:	f7fe fc58 	bl	8000e14 <GC9A01_DeInit>

	display.DC_Port = GPIOA;
 8002564:	4b0a      	ldr	r3, [pc, #40]	@ (8002590 <main+0x48>)
 8002566:	4a0b      	ldr	r2, [pc, #44]	@ (8002594 <main+0x4c>)
 8002568:	629a      	str	r2, [r3, #40]	@ 0x28
	display.DC_Pin = 3;
 800256a:	4b09      	ldr	r3, [pc, #36]	@ (8002590 <main+0x48>)
 800256c:	2203      	movs	r2, #3
 800256e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	display.Reset_Port = GPIOA;
 8002572:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <main+0x48>)
 8002574:	4a07      	ldr	r2, [pc, #28]	@ (8002594 <main+0x4c>)
 8002576:	631a      	str	r2, [r3, #48]	@ 0x30
	display.Reset_Pin = 2;
 8002578:	4b05      	ldr	r3, [pc, #20]	@ (8002590 <main+0x48>)
 800257a:	2202      	movs	r2, #2
 800257c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	GC9A01_Init(&display);
 8002580:	4803      	ldr	r0, [pc, #12]	@ (8002590 <main+0x48>)
 8002582:	f7fe fc61 	bl	8000e48 <GC9A01_Init>





	for(;;);
 8002586:	bf00      	nop
 8002588:	e7fd      	b.n	8002586 <main+0x3e>
 800258a:	bf00      	nop
 800258c:	40011000 	.word	0x40011000
 8002590:	200000a0 	.word	0x200000a0
 8002594:	40020000 	.word	0x40020000

08002598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002598:	b480      	push	{r7}
 800259a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800259c:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <SystemInit+0x20>)
 800259e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025a2:	4a05      	ldr	r2, [pc, #20]	@ (80025b8 <SystemInit+0x20>)
 80025a4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025a8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025ac:	bf00      	nop
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80025c2:	2300      	movs	r3, #0
 80025c4:	613b      	str	r3, [r7, #16]
 80025c6:	2300      	movs	r3, #0
 80025c8:	617b      	str	r3, [r7, #20]
 80025ca:	2302      	movs	r3, #2
 80025cc:	60fb      	str	r3, [r7, #12]
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
 80025d2:	2302      	movs	r3, #2
 80025d4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80025d6:	4b34      	ldr	r3, [pc, #208]	@ (80026a8 <SystemCoreClockUpdate+0xec>)
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 030c 	and.w	r3, r3, #12
 80025de:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	2b08      	cmp	r3, #8
 80025e4:	d011      	beq.n	800260a <SystemCoreClockUpdate+0x4e>
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	2b08      	cmp	r3, #8
 80025ea:	d844      	bhi.n	8002676 <SystemCoreClockUpdate+0xba>
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <SystemCoreClockUpdate+0x3e>
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d004      	beq.n	8002602 <SystemCoreClockUpdate+0x46>
 80025f8:	e03d      	b.n	8002676 <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80025fa:	4b2c      	ldr	r3, [pc, #176]	@ (80026ac <SystemCoreClockUpdate+0xf0>)
 80025fc:	4a2c      	ldr	r2, [pc, #176]	@ (80026b0 <SystemCoreClockUpdate+0xf4>)
 80025fe:	601a      	str	r2, [r3, #0]
      break;
 8002600:	e03d      	b.n	800267e <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002602:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <SystemCoreClockUpdate+0xf0>)
 8002604:	4a2b      	ldr	r2, [pc, #172]	@ (80026b4 <SystemCoreClockUpdate+0xf8>)
 8002606:	601a      	str	r2, [r3, #0]
      break;
 8002608:	e039      	b.n	800267e <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800260a:	4b27      	ldr	r3, [pc, #156]	@ (80026a8 <SystemCoreClockUpdate+0xec>)
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	0d9b      	lsrs	r3, r3, #22
 8002610:	f003 0301 	and.w	r3, r3, #1
 8002614:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002616:	4b24      	ldr	r3, [pc, #144]	@ (80026a8 <SystemCoreClockUpdate+0xec>)
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800261e:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00c      	beq.n	8002640 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002626:	4a23      	ldr	r2, [pc, #140]	@ (80026b4 <SystemCoreClockUpdate+0xf8>)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	fbb2 f3f3 	udiv	r3, r2, r3
 800262e:	4a1e      	ldr	r2, [pc, #120]	@ (80026a8 <SystemCoreClockUpdate+0xec>)
 8002630:	6852      	ldr	r2, [r2, #4]
 8002632:	0992      	lsrs	r2, r2, #6
 8002634:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002638:	fb02 f303 	mul.w	r3, r2, r3
 800263c:	617b      	str	r3, [r7, #20]
 800263e:	e00b      	b.n	8002658 <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002640:	4a1b      	ldr	r2, [pc, #108]	@ (80026b0 <SystemCoreClockUpdate+0xf4>)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	fbb2 f3f3 	udiv	r3, r2, r3
 8002648:	4a17      	ldr	r2, [pc, #92]	@ (80026a8 <SystemCoreClockUpdate+0xec>)
 800264a:	6852      	ldr	r2, [r2, #4]
 800264c:	0992      	lsrs	r2, r2, #6
 800264e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002658:	4b13      	ldr	r3, [pc, #76]	@ (80026a8 <SystemCoreClockUpdate+0xec>)
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	0c1b      	lsrs	r3, r3, #16
 800265e:	f003 0303 	and.w	r3, r3, #3
 8002662:	3301      	adds	r3, #1
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002670:	4a0e      	ldr	r2, [pc, #56]	@ (80026ac <SystemCoreClockUpdate+0xf0>)
 8002672:	6013      	str	r3, [r2, #0]
      break;
 8002674:	e003      	b.n	800267e <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <SystemCoreClockUpdate+0xf0>)
 8002678:	4a0d      	ldr	r2, [pc, #52]	@ (80026b0 <SystemCoreClockUpdate+0xf4>)
 800267a:	601a      	str	r2, [r3, #0]
      break;
 800267c:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800267e:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <SystemCoreClockUpdate+0xec>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	4a0b      	ldr	r2, [pc, #44]	@ (80026b8 <SystemCoreClockUpdate+0xfc>)
 800268a:	5cd3      	ldrb	r3, [r2, r3]
 800268c:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800268e:	4b07      	ldr	r3, [pc, #28]	@ (80026ac <SystemCoreClockUpdate+0xf0>)
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	fa22 f303 	lsr.w	r3, r2, r3
 8002698:	4a04      	ldr	r2, [pc, #16]	@ (80026ac <SystemCoreClockUpdate+0xf0>)
 800269a:	6013      	str	r3, [r2, #0]
}
 800269c:	bf00      	nop
 800269e:	371c      	adds	r7, #28
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40023800 	.word	0x40023800
 80026ac:	20000000 	.word	0x20000000
 80026b0:	00f42400 	.word	0x00f42400
 80026b4:	007a1200 	.word	0x007a1200
 80026b8:	08003450 	.word	0x08003450

080026bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80026bc:	480d      	ldr	r0, [pc, #52]	@ (80026f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80026be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80026c0:	f7ff ff6a 	bl	8002598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80026c6:	490d      	ldr	r1, [pc, #52]	@ (80026fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80026c8:	4a0d      	ldr	r2, [pc, #52]	@ (8002700 <LoopForever+0xe>)
  movs r3, #0
 80026ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026cc:	e002      	b.n	80026d4 <LoopCopyDataInit>

080026ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026d2:	3304      	adds	r3, #4

080026d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d8:	d3f9      	bcc.n	80026ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026da:	4a0a      	ldr	r2, [pc, #40]	@ (8002704 <LoopForever+0x12>)
  ldr r4, =_ebss
 80026dc:	4c0a      	ldr	r4, [pc, #40]	@ (8002708 <LoopForever+0x16>)
  movs r3, #0
 80026de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026e0:	e001      	b.n	80026e6 <LoopFillZerobss>

080026e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026e4:	3204      	adds	r2, #4

080026e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e8:	d3fb      	bcc.n	80026e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80026ea:	f000 fe05 	bl	80032f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80026ee:	f7ff ff2b 	bl	8002548 <main>

080026f2 <LoopForever>:

LoopForever:
  b LoopForever
 80026f2:	e7fe      	b.n	80026f2 <LoopForever>
  ldr   r0, =_estack
 80026f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002700:	08003468 	.word	0x08003468
  ldr r2, =_sbss
 8002704:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002708:	200000d8 	.word	0x200000d8

0800270c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800270c:	e7fe      	b.n	800270c <ADC_IRQHandler>

0800270e <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 800270e:	b580      	push	{r7, lr}
 8002710:	b084      	sub	sp, #16
 8002712:	af00      	add	r7, sp, #0
 8002714:	ed87 0b02 	vstr	d0, [r7, #8]
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 800271c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002720:	f7fe f9d0 	bl	8000ac4 <__aeabi_d2lz>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4610      	mov	r0, r2
 800272a:	4619      	mov	r1, r3
 800272c:	f7fd feda 	bl	80004e4 <__aeabi_l2d>
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	6839      	ldr	r1, [r7, #0]
 8002736:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002744:	f7fd fd44 	bl	80001d0 <__aeabi_dsub>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002752:	bf00      	nop
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 800275a:	b480      	push	{r7}
 800275c:	b083      	sub	sp, #12
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 8002762:	2200      	movs	r2, #0
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8002768:	2200      	movs	r2, #0
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 800276e:	2200      	movs	r2, #0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800277a:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 800277c:	2203      	movs	r2, #3
 800277e:	2301      	movs	r3, #1
 8002780:	4313      	orrs	r3, r2
 8002782:	b2da      	uxtb	r2, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8002788:	2300      	movs	r3, #0
 800278a:	b2da      	uxtb	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	749a      	strb	r2, [r3, #18]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a47      	ldr	r2, [pc, #284]	@ (80028c8 <USART_Clock_Enable+0x12c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d112      	bne.n	80027d4 <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	791b      	ldrb	r3, [r3, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	4293      	cmp	r3, r2
 80027b6:	d106      	bne.n	80027c6 <USART_Clock_Enable+0x2a>
 80027b8:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027ba:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027bc:	4a43      	ldr	r2, [pc, #268]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027be:	f043 0310 	orr.w	r3, r3, #16
 80027c2:	6653      	str	r3, [r2, #100]	@ 0x64
 80027c4:	e079      	b.n	80028ba <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ca:	4a40      	ldr	r2, [pc, #256]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027cc:	f043 0310 	orr.w	r3, r3, #16
 80027d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d2:	e072      	b.n	80028ba <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3d      	ldr	r2, [pc, #244]	@ (80028d0 <USART_Clock_Enable+0x134>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d112      	bne.n	8002804 <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	791b      	ldrb	r3, [r3, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d106      	bne.n	80027f6 <USART_Clock_Enable+0x5a>
 80027e8:	4b38      	ldr	r3, [pc, #224]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ec:	4a37      	ldr	r2, [pc, #220]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80027f4:	e061      	b.n	80028ba <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 80027f6:	4b35      	ldr	r3, [pc, #212]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a34      	ldr	r2, [pc, #208]	@ (80028cc <USART_Clock_Enable+0x130>)
 80027fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
 8002802:	e05a      	b.n	80028ba <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a32      	ldr	r2, [pc, #200]	@ (80028d4 <USART_Clock_Enable+0x138>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d112      	bne.n	8002834 <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	791b      	ldrb	r3, [r3, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	4293      	cmp	r3, r2
 8002816:	d106      	bne.n	8002826 <USART_Clock_Enable+0x8a>
 8002818:	4b2c      	ldr	r3, [pc, #176]	@ (80028cc <USART_Clock_Enable+0x130>)
 800281a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800281c:	4a2b      	ldr	r2, [pc, #172]	@ (80028cc <USART_Clock_Enable+0x130>)
 800281e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002822:	6613      	str	r3, [r2, #96]	@ 0x60
 8002824:	e049      	b.n	80028ba <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8002826:	4b29      	ldr	r3, [pc, #164]	@ (80028cc <USART_Clock_Enable+0x130>)
 8002828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282a:	4a28      	ldr	r2, [pc, #160]	@ (80028cc <USART_Clock_Enable+0x130>)
 800282c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002830:	6413      	str	r3, [r2, #64]	@ 0x40
 8002832:	e042      	b.n	80028ba <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a27      	ldr	r2, [pc, #156]	@ (80028d8 <USART_Clock_Enable+0x13c>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d10e      	bne.n	800285c <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	4293      	cmp	r3, r2
 8002846:	d102      	bne.n	800284e <USART_Clock_Enable+0xb2>
 8002848:	f04f 33ff 	mov.w	r3, #4294967295
 800284c:	e036      	b.n	80028bc <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 800284e:	4b1f      	ldr	r3, [pc, #124]	@ (80028cc <USART_Clock_Enable+0x130>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002852:	4a1e      	ldr	r2, [pc, #120]	@ (80028cc <USART_Clock_Enable+0x130>)
 8002854:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002858:	6413      	str	r3, [r2, #64]	@ 0x40
 800285a:	e02e      	b.n	80028ba <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a1e      	ldr	r2, [pc, #120]	@ (80028dc <USART_Clock_Enable+0x140>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d10e      	bne.n	8002884 <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	791b      	ldrb	r3, [r3, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	4293      	cmp	r3, r2
 800286e:	d102      	bne.n	8002876 <USART_Clock_Enable+0xda>
 8002870:	f04f 33ff 	mov.w	r3, #4294967295
 8002874:	e022      	b.n	80028bc <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <USART_Clock_Enable+0x130>)
 8002878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287a:	4a14      	ldr	r2, [pc, #80]	@ (80028cc <USART_Clock_Enable+0x130>)
 800287c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002880:	6413      	str	r3, [r2, #64]	@ 0x40
 8002882:	e01a      	b.n	80028ba <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a15      	ldr	r2, [pc, #84]	@ (80028e0 <USART_Clock_Enable+0x144>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d112      	bne.n	80028b4 <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	791b      	ldrb	r3, [r3, #4]
 8002892:	2201      	movs	r2, #1
 8002894:	4293      	cmp	r3, r2
 8002896:	d106      	bne.n	80028a6 <USART_Clock_Enable+0x10a>
 8002898:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <USART_Clock_Enable+0x130>)
 800289a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800289c:	4a0b      	ldr	r2, [pc, #44]	@ (80028cc <USART_Clock_Enable+0x130>)
 800289e:	f043 0320 	orr.w	r3, r3, #32
 80028a2:	6653      	str	r3, [r2, #100]	@ 0x64
 80028a4:	e009      	b.n	80028ba <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 80028a6:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <USART_Clock_Enable+0x130>)
 80028a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028aa:	4a08      	ldr	r2, [pc, #32]	@ (80028cc <USART_Clock_Enable+0x130>)
 80028ac:	f043 0320 	orr.w	r3, r3, #32
 80028b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80028b2:	e002      	b.n	80028ba <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 80028b4:	f04f 33ff 	mov.w	r3, #4294967295
 80028b8:	e000      	b.n	80028bc <USART_Clock_Enable+0x120>
	}
	return 1;
 80028ba:	2301      	movs	r3, #1
}
 80028bc:	4618      	mov	r0, r3
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c6:	4770      	bx	lr
 80028c8:	40011000 	.word	0x40011000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40004400 	.word	0x40004400
 80028d4:	40004800 	.word	0x40004800
 80028d8:	40004c00 	.word	0x40004c00
 80028dc:	40005000 	.word	0x40005000
 80028e0:	40011400 	.word	0x40011400

080028e4 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 80028e4:	b5b0      	push	{r4, r5, r7, lr}
 80028e6:	b086      	sub	sp, #24
 80028e8:	af04      	add	r7, sp, #16
 80028ea:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4aa0      	ldr	r2, [pc, #640]	@ (8002b74 <PIN_Setup+0x290>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	f040 810d 	bne.w	8002b12 <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7b1b      	ldrb	r3, [r3, #12]
 80028fc:	2201      	movs	r2, #1
 80028fe:	4293      	cmp	r3, r2
 8002900:	d00f      	beq.n	8002922 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	7b1b      	ldrb	r3, [r3, #12]
 8002906:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002908:	4293      	cmp	r3, r2
 800290a:	d00a      	beq.n	8002922 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	7b1b      	ldrb	r3, [r3, #12]
 8002910:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002912:	4293      	cmp	r3, r2
 8002914:	d005      	beq.n	8002922 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	7b1b      	ldrb	r3, [r3, #12]
 800291a:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 800291c:	4293      	cmp	r3, r2
 800291e:	f040 80be 	bne.w	8002a9e <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	7b5b      	ldrb	r3, [r3, #13]
 8002926:	2209      	movs	r2, #9
 8002928:	4293      	cmp	r3, r2
 800292a:	d10f      	bne.n	800294c <PIN_Setup+0x68>
 800292c:	2009      	movs	r0, #9
 800292e:	2402      	movs	r4, #2
 8002930:	2500      	movs	r5, #0
 8002932:	2302      	movs	r3, #2
 8002934:	2200      	movs	r2, #0
 8002936:	2107      	movs	r1, #7
 8002938:	9102      	str	r1, [sp, #8]
 800293a:	9201      	str	r2, [sp, #4]
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	462b      	mov	r3, r5
 8002940:	4622      	mov	r2, r4
 8002942:	4601      	mov	r1, r0
 8002944:	488c      	ldr	r0, [pc, #560]	@ (8002b78 <PIN_Setup+0x294>)
 8002946:	f7fe fe39 	bl	80015bc <GPIO_Pin_Init>
 800294a:	e013      	b.n	8002974 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	7b5b      	ldrb	r3, [r3, #13]
 8002950:	2206      	movs	r2, #6
 8002952:	4293      	cmp	r3, r2
 8002954:	d10e      	bne.n	8002974 <PIN_Setup+0x90>
 8002956:	2006      	movs	r0, #6
 8002958:	2402      	movs	r4, #2
 800295a:	2500      	movs	r5, #0
 800295c:	2302      	movs	r3, #2
 800295e:	2200      	movs	r2, #0
 8002960:	2107      	movs	r1, #7
 8002962:	9102      	str	r1, [sp, #8]
 8002964:	9201      	str	r2, [sp, #4]
 8002966:	9300      	str	r3, [sp, #0]
 8002968:	462b      	mov	r3, r5
 800296a:	4622      	mov	r2, r4
 800296c:	4601      	mov	r1, r0
 800296e:	4883      	ldr	r0, [pc, #524]	@ (8002b7c <PIN_Setup+0x298>)
 8002970:	f7fe fe24 	bl	80015bc <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	7b9b      	ldrb	r3, [r3, #14]
 8002978:	220a      	movs	r2, #10
 800297a:	4293      	cmp	r3, r2
 800297c:	d10f      	bne.n	800299e <PIN_Setup+0xba>
 800297e:	200a      	movs	r0, #10
 8002980:	2402      	movs	r4, #2
 8002982:	2500      	movs	r5, #0
 8002984:	2302      	movs	r3, #2
 8002986:	2200      	movs	r2, #0
 8002988:	2107      	movs	r1, #7
 800298a:	9102      	str	r1, [sp, #8]
 800298c:	9201      	str	r2, [sp, #4]
 800298e:	9300      	str	r3, [sp, #0]
 8002990:	462b      	mov	r3, r5
 8002992:	4622      	mov	r2, r4
 8002994:	4601      	mov	r1, r0
 8002996:	4878      	ldr	r0, [pc, #480]	@ (8002b78 <PIN_Setup+0x294>)
 8002998:	f7fe fe10 	bl	80015bc <GPIO_Pin_Init>
 800299c:	e013      	b.n	80029c6 <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	7b9b      	ldrb	r3, [r3, #14]
 80029a2:	2207      	movs	r2, #7
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d10e      	bne.n	80029c6 <PIN_Setup+0xe2>
 80029a8:	2007      	movs	r0, #7
 80029aa:	2402      	movs	r4, #2
 80029ac:	2500      	movs	r5, #0
 80029ae:	2302      	movs	r3, #2
 80029b0:	2200      	movs	r2, #0
 80029b2:	2107      	movs	r1, #7
 80029b4:	9102      	str	r1, [sp, #8]
 80029b6:	9201      	str	r2, [sp, #4]
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	462b      	mov	r3, r5
 80029bc:	4622      	mov	r2, r4
 80029be:	4601      	mov	r1, r0
 80029c0:	486e      	ldr	r0, [pc, #440]	@ (8002b7c <PIN_Setup+0x298>)
 80029c2:	f7fe fdfb 	bl	80015bc <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	7b1b      	ldrb	r3, [r3, #12]
 80029ca:	2202      	movs	r2, #2
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d113      	bne.n	80029f8 <PIN_Setup+0x114>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	7bdb      	ldrb	r3, [r3, #15]
 80029d4:	2208      	movs	r2, #8
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d10e      	bne.n	80029f8 <PIN_Setup+0x114>
 80029da:	2008      	movs	r0, #8
 80029dc:	2402      	movs	r4, #2
 80029de:	2500      	movs	r5, #0
 80029e0:	2302      	movs	r3, #2
 80029e2:	2200      	movs	r2, #0
 80029e4:	2107      	movs	r1, #7
 80029e6:	9102      	str	r1, [sp, #8]
 80029e8:	9201      	str	r2, [sp, #4]
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	462b      	mov	r3, r5
 80029ee:	4622      	mov	r2, r4
 80029f0:	4601      	mov	r1, r0
 80029f2:	4861      	ldr	r0, [pc, #388]	@ (8002b78 <PIN_Setup+0x294>)
 80029f4:	f7fe fde2 	bl	80015bc <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7cdb      	ldrb	r3, [r3, #19]
 80029fc:	2200      	movs	r2, #0
 80029fe:	4293      	cmp	r3, r2
 8002a00:	f000 83bb 	beq.w	800317a <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	7cdb      	ldrb	r3, [r3, #19]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10e      	bne.n	8002a2c <PIN_Setup+0x148>
 8002a0e:	200b      	movs	r0, #11
 8002a10:	2402      	movs	r4, #2
 8002a12:	2500      	movs	r5, #0
 8002a14:	2302      	movs	r3, #2
 8002a16:	2200      	movs	r2, #0
 8002a18:	2107      	movs	r1, #7
 8002a1a:	9102      	str	r1, [sp, #8]
 8002a1c:	9201      	str	r2, [sp, #4]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	462b      	mov	r3, r5
 8002a22:	4622      	mov	r2, r4
 8002a24:	4601      	mov	r1, r0
 8002a26:	4854      	ldr	r0, [pc, #336]	@ (8002b78 <PIN_Setup+0x294>)
 8002a28:	f7fe fdc8 	bl	80015bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	7cdb      	ldrb	r3, [r3, #19]
 8002a30:	2202      	movs	r2, #2
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d10e      	bne.n	8002a54 <PIN_Setup+0x170>
 8002a36:	200c      	movs	r0, #12
 8002a38:	2402      	movs	r4, #2
 8002a3a:	2500      	movs	r5, #0
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	2200      	movs	r2, #0
 8002a40:	2107      	movs	r1, #7
 8002a42:	9102      	str	r1, [sp, #8]
 8002a44:	9201      	str	r2, [sp, #4]
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	462b      	mov	r3, r5
 8002a4a:	4622      	mov	r2, r4
 8002a4c:	4601      	mov	r1, r0
 8002a4e:	484a      	ldr	r0, [pc, #296]	@ (8002b78 <PIN_Setup+0x294>)
 8002a50:	f7fe fdb4 	bl	80015bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	7cdb      	ldrb	r3, [r3, #19]
 8002a58:	2203      	movs	r2, #3
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	f040 838d 	bne.w	800317a <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002a60:	200b      	movs	r0, #11
 8002a62:	2402      	movs	r4, #2
 8002a64:	2500      	movs	r5, #0
 8002a66:	2302      	movs	r3, #2
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2107      	movs	r1, #7
 8002a6c:	9102      	str	r1, [sp, #8]
 8002a6e:	9201      	str	r2, [sp, #4]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	462b      	mov	r3, r5
 8002a74:	4622      	mov	r2, r4
 8002a76:	4601      	mov	r1, r0
 8002a78:	483f      	ldr	r0, [pc, #252]	@ (8002b78 <PIN_Setup+0x294>)
 8002a7a:	f7fe fd9f 	bl	80015bc <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002a7e:	200c      	movs	r0, #12
 8002a80:	2402      	movs	r4, #2
 8002a82:	2500      	movs	r5, #0
 8002a84:	2302      	movs	r3, #2
 8002a86:	2200      	movs	r2, #0
 8002a88:	2107      	movs	r1, #7
 8002a8a:	9102      	str	r1, [sp, #8]
 8002a8c:	9201      	str	r2, [sp, #4]
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	462b      	mov	r3, r5
 8002a92:	4622      	mov	r2, r4
 8002a94:	4601      	mov	r1, r0
 8002a96:	4838      	ldr	r0, [pc, #224]	@ (8002b78 <PIN_Setup+0x294>)
 8002a98:	f7fe fd90 	bl	80015bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002a9c:	e36d      	b.n	800317a <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	7b1b      	ldrb	r3, [r3, #12]
 8002aa2:	2206      	movs	r2, #6
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d00a      	beq.n	8002abe <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	7b1b      	ldrb	r3, [r3, #12]
 8002aac:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d005      	beq.n	8002abe <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	7b1b      	ldrb	r3, [r3, #12]
 8002ab6:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	f040 8363 	bne.w	8003184 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	7b5b      	ldrb	r3, [r3, #13]
 8002ac2:	2209      	movs	r2, #9
 8002ac4:	4293      	cmp	r3, r2
 8002ac6:	d10e      	bne.n	8002ae6 <PIN_Setup+0x202>
 8002ac8:	2009      	movs	r0, #9
 8002aca:	2402      	movs	r4, #2
 8002acc:	2500      	movs	r5, #0
 8002ace:	2302      	movs	r3, #2
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	2107      	movs	r1, #7
 8002ad4:	9102      	str	r1, [sp, #8]
 8002ad6:	9201      	str	r2, [sp, #4]
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	462b      	mov	r3, r5
 8002adc:	4622      	mov	r2, r4
 8002ade:	4601      	mov	r1, r0
 8002ae0:	4825      	ldr	r0, [pc, #148]	@ (8002b78 <PIN_Setup+0x294>)
 8002ae2:	f7fe fd6b 	bl	80015bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	7b1b      	ldrb	r3, [r3, #12]
 8002aea:	2207      	movs	r2, #7
 8002aec:	4293      	cmp	r3, r2
 8002aee:	f040 8349 	bne.w	8003184 <PIN_Setup+0x8a0>
 8002af2:	2008      	movs	r0, #8
 8002af4:	2402      	movs	r4, #2
 8002af6:	2500      	movs	r5, #0
 8002af8:	2302      	movs	r3, #2
 8002afa:	2200      	movs	r2, #0
 8002afc:	2107      	movs	r1, #7
 8002afe:	9102      	str	r1, [sp, #8]
 8002b00:	9201      	str	r2, [sp, #4]
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	462b      	mov	r3, r5
 8002b06:	4622      	mov	r2, r4
 8002b08:	4601      	mov	r1, r0
 8002b0a:	481b      	ldr	r0, [pc, #108]	@ (8002b78 <PIN_Setup+0x294>)
 8002b0c:	f7fe fd56 	bl	80015bc <GPIO_Pin_Init>
//
//		}
//	}


}
 8002b10:	e338      	b.n	8003184 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a1a      	ldr	r2, [pc, #104]	@ (8002b80 <PIN_Setup+0x29c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f040 817b 	bne.w	8002e14 <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	7b1b      	ldrb	r3, [r3, #12]
 8002b22:	2201      	movs	r2, #1
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d00f      	beq.n	8002b48 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	7b1b      	ldrb	r3, [r3, #12]
 8002b2c:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d00a      	beq.n	8002b48 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	7b1b      	ldrb	r3, [r3, #12]
 8002b36:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d005      	beq.n	8002b48 <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	7b1b      	ldrb	r3, [r3, #12]
 8002b40:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002b42:	4293      	cmp	r3, r2
 8002b44:	f040 80f8 	bne.w	8002d38 <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	7b5b      	ldrb	r3, [r3, #13]
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d118      	bne.n	8002b84 <PIN_Setup+0x2a0>
 8002b52:	2002      	movs	r0, #2
 8002b54:	2402      	movs	r4, #2
 8002b56:	2500      	movs	r5, #0
 8002b58:	2302      	movs	r3, #2
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	2107      	movs	r1, #7
 8002b5e:	9102      	str	r1, [sp, #8]
 8002b60:	9201      	str	r2, [sp, #4]
 8002b62:	9300      	str	r3, [sp, #0]
 8002b64:	462b      	mov	r3, r5
 8002b66:	4622      	mov	r2, r4
 8002b68:	4601      	mov	r1, r0
 8002b6a:	4803      	ldr	r0, [pc, #12]	@ (8002b78 <PIN_Setup+0x294>)
 8002b6c:	f7fe fd26 	bl	80015bc <GPIO_Pin_Init>
 8002b70:	e01c      	b.n	8002bac <PIN_Setup+0x2c8>
 8002b72:	bf00      	nop
 8002b74:	40011000 	.word	0x40011000
 8002b78:	40020000 	.word	0x40020000
 8002b7c:	40020400 	.word	0x40020400
 8002b80:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	7b5b      	ldrb	r3, [r3, #13]
 8002b88:	2205      	movs	r2, #5
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d10e      	bne.n	8002bac <PIN_Setup+0x2c8>
 8002b8e:	2005      	movs	r0, #5
 8002b90:	2402      	movs	r4, #2
 8002b92:	2500      	movs	r5, #0
 8002b94:	2302      	movs	r3, #2
 8002b96:	2200      	movs	r2, #0
 8002b98:	2107      	movs	r1, #7
 8002b9a:	9102      	str	r1, [sp, #8]
 8002b9c:	9201      	str	r2, [sp, #4]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	462b      	mov	r3, r5
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	4601      	mov	r1, r0
 8002ba6:	4899      	ldr	r0, [pc, #612]	@ (8002e0c <PIN_Setup+0x528>)
 8002ba8:	f7fe fd08 	bl	80015bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	7b9b      	ldrb	r3, [r3, #14]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d10f      	bne.n	8002bd6 <PIN_Setup+0x2f2>
 8002bb6:	2003      	movs	r0, #3
 8002bb8:	2402      	movs	r4, #2
 8002bba:	2500      	movs	r5, #0
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2107      	movs	r1, #7
 8002bc2:	9102      	str	r1, [sp, #8]
 8002bc4:	9201      	str	r2, [sp, #4]
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	462b      	mov	r3, r5
 8002bca:	4622      	mov	r2, r4
 8002bcc:	4601      	mov	r1, r0
 8002bce:	4890      	ldr	r0, [pc, #576]	@ (8002e10 <PIN_Setup+0x52c>)
 8002bd0:	f7fe fcf4 	bl	80015bc <GPIO_Pin_Init>
 8002bd4:	e013      	b.n	8002bfe <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	7b9b      	ldrb	r3, [r3, #14]
 8002bda:	2206      	movs	r2, #6
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d10e      	bne.n	8002bfe <PIN_Setup+0x31a>
 8002be0:	2006      	movs	r0, #6
 8002be2:	2402      	movs	r4, #2
 8002be4:	2500      	movs	r5, #0
 8002be6:	2302      	movs	r3, #2
 8002be8:	2200      	movs	r2, #0
 8002bea:	2107      	movs	r1, #7
 8002bec:	9102      	str	r1, [sp, #8]
 8002bee:	9201      	str	r2, [sp, #4]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	462b      	mov	r3, r5
 8002bf4:	4622      	mov	r2, r4
 8002bf6:	4601      	mov	r1, r0
 8002bf8:	4884      	ldr	r0, [pc, #528]	@ (8002e0c <PIN_Setup+0x528>)
 8002bfa:	f7fe fcdf 	bl	80015bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	7b1b      	ldrb	r3, [r3, #12]
 8002c02:	2202      	movs	r2, #2
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d128      	bne.n	8002c5a <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	7bdb      	ldrb	r3, [r3, #15]
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10f      	bne.n	8002c32 <PIN_Setup+0x34e>
 8002c12:	2004      	movs	r0, #4
 8002c14:	2402      	movs	r4, #2
 8002c16:	2500      	movs	r5, #0
 8002c18:	2302      	movs	r3, #2
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2107      	movs	r1, #7
 8002c1e:	9102      	str	r1, [sp, #8]
 8002c20:	9201      	str	r2, [sp, #4]
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	462b      	mov	r3, r5
 8002c26:	4622      	mov	r2, r4
 8002c28:	4601      	mov	r1, r0
 8002c2a:	4879      	ldr	r0, [pc, #484]	@ (8002e10 <PIN_Setup+0x52c>)
 8002c2c:	f7fe fcc6 	bl	80015bc <GPIO_Pin_Init>
 8002c30:	e013      	b.n	8002c5a <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	7bdb      	ldrb	r3, [r3, #15]
 8002c36:	2207      	movs	r2, #7
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d10e      	bne.n	8002c5a <PIN_Setup+0x376>
 8002c3c:	2007      	movs	r0, #7
 8002c3e:	2402      	movs	r4, #2
 8002c40:	2500      	movs	r5, #0
 8002c42:	2302      	movs	r3, #2
 8002c44:	2200      	movs	r2, #0
 8002c46:	2107      	movs	r1, #7
 8002c48:	9102      	str	r1, [sp, #8]
 8002c4a:	9201      	str	r2, [sp, #4]
 8002c4c:	9300      	str	r3, [sp, #0]
 8002c4e:	462b      	mov	r3, r5
 8002c50:	4622      	mov	r2, r4
 8002c52:	4601      	mov	r1, r0
 8002c54:	486e      	ldr	r0, [pc, #440]	@ (8002e10 <PIN_Setup+0x52c>)
 8002c56:	f7fe fcb1 	bl	80015bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	7cdb      	ldrb	r3, [r3, #19]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d105      	bne.n	8002c70 <PIN_Setup+0x38c>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	7cdb      	ldrb	r3, [r3, #19]
 8002c68:	2203      	movs	r2, #3
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	f040 8287 	bne.w	800317e <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	7cdb      	ldrb	r3, [r3, #19]
 8002c74:	2201      	movs	r2, #1
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d128      	bne.n	8002ccc <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	7bdb      	ldrb	r3, [r3, #15]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d10f      	bne.n	8002ca4 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002c84:	2000      	movs	r0, #0
 8002c86:	2402      	movs	r4, #2
 8002c88:	2500      	movs	r5, #0
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	2107      	movs	r1, #7
 8002c90:	9102      	str	r1, [sp, #8]
 8002c92:	9201      	str	r2, [sp, #4]
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	462b      	mov	r3, r5
 8002c98:	4622      	mov	r2, r4
 8002c9a:	4601      	mov	r1, r0
 8002c9c:	485c      	ldr	r0, [pc, #368]	@ (8002e10 <PIN_Setup+0x52c>)
 8002c9e:	f7fe fc8d 	bl	80015bc <GPIO_Pin_Init>
 8002ca2:	e013      	b.n	8002ccc <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	7bdb      	ldrb	r3, [r3, #15]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d10e      	bne.n	8002ccc <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002cae:	2003      	movs	r0, #3
 8002cb0:	2402      	movs	r4, #2
 8002cb2:	2500      	movs	r5, #0
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2107      	movs	r1, #7
 8002cba:	9102      	str	r1, [sp, #8]
 8002cbc:	9201      	str	r2, [sp, #4]
 8002cbe:	9300      	str	r3, [sp, #0]
 8002cc0:	462b      	mov	r3, r5
 8002cc2:	4622      	mov	r2, r4
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	4851      	ldr	r0, [pc, #324]	@ (8002e0c <PIN_Setup+0x528>)
 8002cc8:	f7fe fc78 	bl	80015bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7cdb      	ldrb	r3, [r3, #19]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d005      	beq.n	8002ce2 <PIN_Setup+0x3fe>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7cdb      	ldrb	r3, [r3, #19]
 8002cda:	2203      	movs	r2, #3
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	f040 824e 	bne.w	800317e <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	7bdb      	ldrb	r3, [r3, #15]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d10f      	bne.n	8002d0c <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002cec:	2001      	movs	r0, #1
 8002cee:	2402      	movs	r4, #2
 8002cf0:	2500      	movs	r5, #0
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	2107      	movs	r1, #7
 8002cf8:	9102      	str	r1, [sp, #8]
 8002cfa:	9201      	str	r2, [sp, #4]
 8002cfc:	9300      	str	r3, [sp, #0]
 8002cfe:	462b      	mov	r3, r5
 8002d00:	4622      	mov	r2, r4
 8002d02:	4601      	mov	r1, r0
 8002d04:	4842      	ldr	r0, [pc, #264]	@ (8002e10 <PIN_Setup+0x52c>)
 8002d06:	f7fe fc59 	bl	80015bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002d0a:	e238      	b.n	800317e <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	7bdb      	ldrb	r3, [r3, #15]
 8002d10:	2204      	movs	r2, #4
 8002d12:	4293      	cmp	r3, r2
 8002d14:	f040 8233 	bne.w	800317e <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002d18:	2004      	movs	r0, #4
 8002d1a:	2402      	movs	r4, #2
 8002d1c:	2500      	movs	r5, #0
 8002d1e:	2302      	movs	r3, #2
 8002d20:	2200      	movs	r2, #0
 8002d22:	2107      	movs	r1, #7
 8002d24:	9102      	str	r1, [sp, #8]
 8002d26:	9201      	str	r2, [sp, #4]
 8002d28:	9300      	str	r3, [sp, #0]
 8002d2a:	462b      	mov	r3, r5
 8002d2c:	4622      	mov	r2, r4
 8002d2e:	4601      	mov	r1, r0
 8002d30:	4836      	ldr	r0, [pc, #216]	@ (8002e0c <PIN_Setup+0x528>)
 8002d32:	f7fe fc43 	bl	80015bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002d36:	e222      	b.n	800317e <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	7b1b      	ldrb	r3, [r3, #12]
 8002d3c:	2206      	movs	r2, #6
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00a      	beq.n	8002d58 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	7b1b      	ldrb	r3, [r3, #12]
 8002d46:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d005      	beq.n	8002d58 <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7b1b      	ldrb	r3, [r3, #12]
 8002d50:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002d52:	4293      	cmp	r3, r2
 8002d54:	f040 8216 	bne.w	8003184 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7b5b      	ldrb	r3, [r3, #13]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d10f      	bne.n	8002d82 <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002d62:	2002      	movs	r0, #2
 8002d64:	2402      	movs	r4, #2
 8002d66:	2500      	movs	r5, #0
 8002d68:	2302      	movs	r3, #2
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	2107      	movs	r1, #7
 8002d6e:	9102      	str	r1, [sp, #8]
 8002d70:	9201      	str	r2, [sp, #4]
 8002d72:	9300      	str	r3, [sp, #0]
 8002d74:	462b      	mov	r3, r5
 8002d76:	4622      	mov	r2, r4
 8002d78:	4601      	mov	r1, r0
 8002d7a:	4825      	ldr	r0, [pc, #148]	@ (8002e10 <PIN_Setup+0x52c>)
 8002d7c:	f7fe fc1e 	bl	80015bc <GPIO_Pin_Init>
 8002d80:	e013      	b.n	8002daa <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	7b5b      	ldrb	r3, [r3, #13]
 8002d86:	2205      	movs	r2, #5
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d10e      	bne.n	8002daa <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002d8c:	2005      	movs	r0, #5
 8002d8e:	2402      	movs	r4, #2
 8002d90:	2500      	movs	r5, #0
 8002d92:	2302      	movs	r3, #2
 8002d94:	2200      	movs	r2, #0
 8002d96:	2107      	movs	r1, #7
 8002d98:	9102      	str	r1, [sp, #8]
 8002d9a:	9201      	str	r2, [sp, #4]
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	462b      	mov	r3, r5
 8002da0:	4622      	mov	r2, r4
 8002da2:	4601      	mov	r1, r0
 8002da4:	4819      	ldr	r0, [pc, #100]	@ (8002e0c <PIN_Setup+0x528>)
 8002da6:	f7fe fc09 	bl	80015bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	7b1b      	ldrb	r3, [r3, #12]
 8002dae:	2207      	movs	r2, #7
 8002db0:	4293      	cmp	r3, r2
 8002db2:	f040 81e7 	bne.w	8003184 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	7bdb      	ldrb	r3, [r3, #15]
 8002dba:	2204      	movs	r2, #4
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d10f      	bne.n	8002de0 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002dc0:	2004      	movs	r0, #4
 8002dc2:	2402      	movs	r4, #2
 8002dc4:	2500      	movs	r5, #0
 8002dc6:	2302      	movs	r3, #2
 8002dc8:	2200      	movs	r2, #0
 8002dca:	2107      	movs	r1, #7
 8002dcc:	9102      	str	r1, [sp, #8]
 8002dce:	9201      	str	r2, [sp, #4]
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	462b      	mov	r3, r5
 8002dd4:	4622      	mov	r2, r4
 8002dd6:	4601      	mov	r1, r0
 8002dd8:	480d      	ldr	r0, [pc, #52]	@ (8002e10 <PIN_Setup+0x52c>)
 8002dda:	f7fe fbef 	bl	80015bc <GPIO_Pin_Init>
}
 8002dde:	e1d1      	b.n	8003184 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	7bdb      	ldrb	r3, [r3, #15]
 8002de4:	2207      	movs	r2, #7
 8002de6:	4293      	cmp	r3, r2
 8002de8:	f040 81cc 	bne.w	8003184 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002dec:	2007      	movs	r0, #7
 8002dee:	2402      	movs	r4, #2
 8002df0:	2500      	movs	r5, #0
 8002df2:	2302      	movs	r3, #2
 8002df4:	2200      	movs	r2, #0
 8002df6:	2107      	movs	r1, #7
 8002df8:	9102      	str	r1, [sp, #8]
 8002dfa:	9201      	str	r2, [sp, #4]
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	462b      	mov	r3, r5
 8002e00:	4622      	mov	r2, r4
 8002e02:	4601      	mov	r1, r0
 8002e04:	4802      	ldr	r0, [pc, #8]	@ (8002e10 <PIN_Setup+0x52c>)
 8002e06:	f7fe fbd9 	bl	80015bc <GPIO_Pin_Init>
}
 8002e0a:	e1bb      	b.n	8003184 <PIN_Setup+0x8a0>
 8002e0c:	40020c00 	.word	0x40020c00
 8002e10:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4aaa      	ldr	r2, [pc, #680]	@ (80030c4 <PIN_Setup+0x7e0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	f040 81b2 	bne.w	8003184 <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	7b1b      	ldrb	r3, [r3, #12]
 8002e24:	2201      	movs	r2, #1
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00f      	beq.n	8002e4a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	7b1b      	ldrb	r3, [r3, #12]
 8002e2e:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d00a      	beq.n	8002e4a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7b1b      	ldrb	r3, [r3, #12]
 8002e38:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d005      	beq.n	8002e4a <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	7b1b      	ldrb	r3, [r3, #12]
 8002e42:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002e44:	4293      	cmp	r3, r2
 8002e46:	f040 8119 	bne.w	800307c <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	7b5b      	ldrb	r3, [r3, #13]
 8002e4e:	220b      	movs	r2, #11
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d10f      	bne.n	8002e74 <PIN_Setup+0x590>
 8002e54:	200b      	movs	r0, #11
 8002e56:	2402      	movs	r4, #2
 8002e58:	2500      	movs	r5, #0
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	2107      	movs	r1, #7
 8002e60:	9102      	str	r1, [sp, #8]
 8002e62:	9201      	str	r2, [sp, #4]
 8002e64:	9300      	str	r3, [sp, #0]
 8002e66:	462b      	mov	r3, r5
 8002e68:	4622      	mov	r2, r4
 8002e6a:	4601      	mov	r1, r0
 8002e6c:	4896      	ldr	r0, [pc, #600]	@ (80030c8 <PIN_Setup+0x7e4>)
 8002e6e:	f7fe fba5 	bl	80015bc <GPIO_Pin_Init>
 8002e72:	e028      	b.n	8002ec6 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	7b5b      	ldrb	r3, [r3, #13]
 8002e78:	220a      	movs	r2, #10
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d10f      	bne.n	8002e9e <PIN_Setup+0x5ba>
 8002e7e:	200a      	movs	r0, #10
 8002e80:	2402      	movs	r4, #2
 8002e82:	2500      	movs	r5, #0
 8002e84:	2302      	movs	r3, #2
 8002e86:	2200      	movs	r2, #0
 8002e88:	2107      	movs	r1, #7
 8002e8a:	9102      	str	r1, [sp, #8]
 8002e8c:	9201      	str	r2, [sp, #4]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	462b      	mov	r3, r5
 8002e92:	4622      	mov	r2, r4
 8002e94:	4601      	mov	r1, r0
 8002e96:	488d      	ldr	r0, [pc, #564]	@ (80030cc <PIN_Setup+0x7e8>)
 8002e98:	f7fe fb90 	bl	80015bc <GPIO_Pin_Init>
 8002e9c:	e013      	b.n	8002ec6 <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	7b5b      	ldrb	r3, [r3, #13]
 8002ea2:	2208      	movs	r2, #8
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d10e      	bne.n	8002ec6 <PIN_Setup+0x5e2>
 8002ea8:	2008      	movs	r0, #8
 8002eaa:	2402      	movs	r4, #2
 8002eac:	2500      	movs	r5, #0
 8002eae:	2302      	movs	r3, #2
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	2107      	movs	r1, #7
 8002eb4:	9102      	str	r1, [sp, #8]
 8002eb6:	9201      	str	r2, [sp, #4]
 8002eb8:	9300      	str	r3, [sp, #0]
 8002eba:	462b      	mov	r3, r5
 8002ebc:	4622      	mov	r2, r4
 8002ebe:	4601      	mov	r1, r0
 8002ec0:	4882      	ldr	r0, [pc, #520]	@ (80030cc <PIN_Setup+0x7e8>)
 8002ec2:	f7fe fb7b 	bl	80015bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	7b9b      	ldrb	r3, [r3, #14]
 8002eca:	220a      	movs	r2, #10
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d10f      	bne.n	8002ef0 <PIN_Setup+0x60c>
 8002ed0:	200a      	movs	r0, #10
 8002ed2:	2402      	movs	r4, #2
 8002ed4:	2500      	movs	r5, #0
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2107      	movs	r1, #7
 8002edc:	9102      	str	r1, [sp, #8]
 8002ede:	9201      	str	r2, [sp, #4]
 8002ee0:	9300      	str	r3, [sp, #0]
 8002ee2:	462b      	mov	r3, r5
 8002ee4:	4622      	mov	r2, r4
 8002ee6:	4601      	mov	r1, r0
 8002ee8:	4877      	ldr	r0, [pc, #476]	@ (80030c8 <PIN_Setup+0x7e4>)
 8002eea:	f7fe fb67 	bl	80015bc <GPIO_Pin_Init>
 8002eee:	e028      	b.n	8002f42 <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7b9b      	ldrb	r3, [r3, #14]
 8002ef4:	220b      	movs	r2, #11
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d10f      	bne.n	8002f1a <PIN_Setup+0x636>
 8002efa:	200b      	movs	r0, #11
 8002efc:	2402      	movs	r4, #2
 8002efe:	2500      	movs	r5, #0
 8002f00:	2302      	movs	r3, #2
 8002f02:	2200      	movs	r2, #0
 8002f04:	2107      	movs	r1, #7
 8002f06:	9102      	str	r1, [sp, #8]
 8002f08:	9201      	str	r2, [sp, #4]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	462b      	mov	r3, r5
 8002f0e:	4622      	mov	r2, r4
 8002f10:	4601      	mov	r1, r0
 8002f12:	486e      	ldr	r0, [pc, #440]	@ (80030cc <PIN_Setup+0x7e8>)
 8002f14:	f7fe fb52 	bl	80015bc <GPIO_Pin_Init>
 8002f18:	e013      	b.n	8002f42 <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	7b5b      	ldrb	r3, [r3, #13]
 8002f1e:	2208      	movs	r2, #8
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d10e      	bne.n	8002f42 <PIN_Setup+0x65e>
 8002f24:	2008      	movs	r0, #8
 8002f26:	2402      	movs	r4, #2
 8002f28:	2500      	movs	r5, #0
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2107      	movs	r1, #7
 8002f30:	9102      	str	r1, [sp, #8]
 8002f32:	9201      	str	r2, [sp, #4]
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	462b      	mov	r3, r5
 8002f38:	4622      	mov	r2, r4
 8002f3a:	4601      	mov	r1, r0
 8002f3c:	4863      	ldr	r0, [pc, #396]	@ (80030cc <PIN_Setup+0x7e8>)
 8002f3e:	f7fe fb3d 	bl	80015bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	7b1b      	ldrb	r3, [r3, #12]
 8002f46:	2202      	movs	r2, #2
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d128      	bne.n	8002f9e <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	7bdb      	ldrb	r3, [r3, #15]
 8002f50:	220c      	movs	r2, #12
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d10f      	bne.n	8002f76 <PIN_Setup+0x692>
 8002f56:	200c      	movs	r0, #12
 8002f58:	2402      	movs	r4, #2
 8002f5a:	2500      	movs	r5, #0
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2107      	movs	r1, #7
 8002f62:	9102      	str	r1, [sp, #8]
 8002f64:	9201      	str	r2, [sp, #4]
 8002f66:	9300      	str	r3, [sp, #0]
 8002f68:	462b      	mov	r3, r5
 8002f6a:	4622      	mov	r2, r4
 8002f6c:	4601      	mov	r1, r0
 8002f6e:	4857      	ldr	r0, [pc, #348]	@ (80030cc <PIN_Setup+0x7e8>)
 8002f70:	f7fe fb24 	bl	80015bc <GPIO_Pin_Init>
 8002f74:	e013      	b.n	8002f9e <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	7bdb      	ldrb	r3, [r3, #15]
 8002f7a:	220a      	movs	r2, #10
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d10e      	bne.n	8002f9e <PIN_Setup+0x6ba>
 8002f80:	200a      	movs	r0, #10
 8002f82:	2402      	movs	r4, #2
 8002f84:	2500      	movs	r5, #0
 8002f86:	2302      	movs	r3, #2
 8002f88:	2200      	movs	r2, #0
 8002f8a:	2107      	movs	r1, #7
 8002f8c:	9102      	str	r1, [sp, #8]
 8002f8e:	9201      	str	r2, [sp, #4]
 8002f90:	9300      	str	r3, [sp, #0]
 8002f92:	462b      	mov	r3, r5
 8002f94:	4622      	mov	r2, r4
 8002f96:	4601      	mov	r1, r0
 8002f98:	484d      	ldr	r0, [pc, #308]	@ (80030d0 <PIN_Setup+0x7ec>)
 8002f9a:	f7fe fb0f 	bl	80015bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	7cdb      	ldrb	r3, [r3, #19]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	f000 80ec 	beq.w	8003182 <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7cdb      	ldrb	r3, [r3, #19]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <PIN_Setup+0x6da>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	7cdb      	ldrb	r3, [r3, #19]
 8002fb8:	2203      	movs	r2, #3
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d128      	bne.n	8003010 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	7bdb      	ldrb	r3, [r3, #15]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d10f      	bne.n	8002fe8 <PIN_Setup+0x704>
 8002fc8:	2000      	movs	r0, #0
 8002fca:	2402      	movs	r4, #2
 8002fcc:	2500      	movs	r5, #0
 8002fce:	2302      	movs	r3, #2
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	2107      	movs	r1, #7
 8002fd4:	9102      	str	r1, [sp, #8]
 8002fd6:	9201      	str	r2, [sp, #4]
 8002fd8:	9300      	str	r3, [sp, #0]
 8002fda:	462b      	mov	r3, r5
 8002fdc:	4622      	mov	r2, r4
 8002fde:	4601      	mov	r1, r0
 8002fe0:	483a      	ldr	r0, [pc, #232]	@ (80030cc <PIN_Setup+0x7e8>)
 8002fe2:	f7fe faeb 	bl	80015bc <GPIO_Pin_Init>
 8002fe6:	e013      	b.n	8003010 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	7bdb      	ldrb	r3, [r3, #15]
 8002fec:	2203      	movs	r2, #3
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d10e      	bne.n	8003010 <PIN_Setup+0x72c>
 8002ff2:	2003      	movs	r0, #3
 8002ff4:	2402      	movs	r4, #2
 8002ff6:	2500      	movs	r5, #0
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2107      	movs	r1, #7
 8002ffe:	9102      	str	r1, [sp, #8]
 8003000:	9201      	str	r2, [sp, #4]
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	462b      	mov	r3, r5
 8003006:	4622      	mov	r2, r4
 8003008:	4601      	mov	r1, r0
 800300a:	4831      	ldr	r0, [pc, #196]	@ (80030d0 <PIN_Setup+0x7ec>)
 800300c:	f7fe fad6 	bl	80015bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	7cdb      	ldrb	r3, [r3, #19]
 8003014:	2202      	movs	r2, #2
 8003016:	4293      	cmp	r3, r2
 8003018:	d005      	beq.n	8003026 <PIN_Setup+0x742>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	7cdb      	ldrb	r3, [r3, #19]
 800301e:	2203      	movs	r2, #3
 8003020:	4293      	cmp	r3, r2
 8003022:	f040 80ae 	bne.w	8003182 <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	7bdb      	ldrb	r3, [r3, #15]
 800302a:	2201      	movs	r2, #1
 800302c:	4293      	cmp	r3, r2
 800302e:	d10f      	bne.n	8003050 <PIN_Setup+0x76c>
 8003030:	2001      	movs	r0, #1
 8003032:	2402      	movs	r4, #2
 8003034:	2500      	movs	r5, #0
 8003036:	2302      	movs	r3, #2
 8003038:	2200      	movs	r2, #0
 800303a:	2107      	movs	r1, #7
 800303c:	9102      	str	r1, [sp, #8]
 800303e:	9201      	str	r2, [sp, #4]
 8003040:	9300      	str	r3, [sp, #0]
 8003042:	462b      	mov	r3, r5
 8003044:	4622      	mov	r2, r4
 8003046:	4601      	mov	r1, r0
 8003048:	4820      	ldr	r0, [pc, #128]	@ (80030cc <PIN_Setup+0x7e8>)
 800304a:	f7fe fab7 	bl	80015bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800304e:	e098      	b.n	8003182 <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	7bdb      	ldrb	r3, [r3, #15]
 8003054:	2204      	movs	r2, #4
 8003056:	4293      	cmp	r3, r2
 8003058:	f040 8093 	bne.w	8003182 <PIN_Setup+0x89e>
 800305c:	2004      	movs	r0, #4
 800305e:	2402      	movs	r4, #2
 8003060:	2500      	movs	r5, #0
 8003062:	2302      	movs	r3, #2
 8003064:	2200      	movs	r2, #0
 8003066:	2107      	movs	r1, #7
 8003068:	9102      	str	r1, [sp, #8]
 800306a:	9201      	str	r2, [sp, #4]
 800306c:	9300      	str	r3, [sp, #0]
 800306e:	462b      	mov	r3, r5
 8003070:	4622      	mov	r2, r4
 8003072:	4601      	mov	r1, r0
 8003074:	4816      	ldr	r0, [pc, #88]	@ (80030d0 <PIN_Setup+0x7ec>)
 8003076:	f7fe faa1 	bl	80015bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800307a:	e082      	b.n	8003182 <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	7b1b      	ldrb	r3, [r3, #12]
 8003080:	2206      	movs	r2, #6
 8003082:	4293      	cmp	r3, r2
 8003084:	d009      	beq.n	800309a <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	7b1b      	ldrb	r3, [r3, #12]
 800308a:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d004      	beq.n	800309a <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	7b1b      	ldrb	r3, [r3, #12]
 8003094:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8003096:	4293      	cmp	r3, r2
 8003098:	d174      	bne.n	8003184 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	7b5b      	ldrb	r3, [r3, #13]
 800309e:	220b      	movs	r2, #11
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d117      	bne.n	80030d4 <PIN_Setup+0x7f0>
 80030a4:	200b      	movs	r0, #11
 80030a6:	2402      	movs	r4, #2
 80030a8:	2500      	movs	r5, #0
 80030aa:	2302      	movs	r3, #2
 80030ac:	2200      	movs	r2, #0
 80030ae:	2107      	movs	r1, #7
 80030b0:	9102      	str	r1, [sp, #8]
 80030b2:	9201      	str	r2, [sp, #4]
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	462b      	mov	r3, r5
 80030b8:	4622      	mov	r2, r4
 80030ba:	4601      	mov	r1, r0
 80030bc:	4802      	ldr	r0, [pc, #8]	@ (80030c8 <PIN_Setup+0x7e4>)
 80030be:	f7fe fa7d 	bl	80015bc <GPIO_Pin_Init>
 80030c2:	e030      	b.n	8003126 <PIN_Setup+0x842>
 80030c4:	40004800 	.word	0x40004800
 80030c8:	40020000 	.word	0x40020000
 80030cc:	40020400 	.word	0x40020400
 80030d0:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	7b5b      	ldrb	r3, [r3, #13]
 80030d8:	220a      	movs	r2, #10
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10f      	bne.n	80030fe <PIN_Setup+0x81a>
 80030de:	200a      	movs	r0, #10
 80030e0:	2402      	movs	r4, #2
 80030e2:	2500      	movs	r5, #0
 80030e4:	2302      	movs	r3, #2
 80030e6:	2200      	movs	r2, #0
 80030e8:	2107      	movs	r1, #7
 80030ea:	9102      	str	r1, [sp, #8]
 80030ec:	9201      	str	r2, [sp, #4]
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	462b      	mov	r3, r5
 80030f2:	4622      	mov	r2, r4
 80030f4:	4601      	mov	r1, r0
 80030f6:	4825      	ldr	r0, [pc, #148]	@ (800318c <PIN_Setup+0x8a8>)
 80030f8:	f7fe fa60 	bl	80015bc <GPIO_Pin_Init>
 80030fc:	e013      	b.n	8003126 <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	7b5b      	ldrb	r3, [r3, #13]
 8003102:	2208      	movs	r2, #8
 8003104:	4293      	cmp	r3, r2
 8003106:	d10e      	bne.n	8003126 <PIN_Setup+0x842>
 8003108:	2008      	movs	r0, #8
 800310a:	2402      	movs	r4, #2
 800310c:	2500      	movs	r5, #0
 800310e:	2302      	movs	r3, #2
 8003110:	2200      	movs	r2, #0
 8003112:	2107      	movs	r1, #7
 8003114:	9102      	str	r1, [sp, #8]
 8003116:	9201      	str	r2, [sp, #4]
 8003118:	9300      	str	r3, [sp, #0]
 800311a:	462b      	mov	r3, r5
 800311c:	4622      	mov	r2, r4
 800311e:	4601      	mov	r1, r0
 8003120:	481a      	ldr	r0, [pc, #104]	@ (800318c <PIN_Setup+0x8a8>)
 8003122:	f7fe fa4b 	bl	80015bc <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	7bdb      	ldrb	r3, [r3, #15]
 800312a:	220c      	movs	r2, #12
 800312c:	4293      	cmp	r3, r2
 800312e:	d10f      	bne.n	8003150 <PIN_Setup+0x86c>
 8003130:	200c      	movs	r0, #12
 8003132:	2402      	movs	r4, #2
 8003134:	2500      	movs	r5, #0
 8003136:	2302      	movs	r3, #2
 8003138:	2200      	movs	r2, #0
 800313a:	2107      	movs	r1, #7
 800313c:	9102      	str	r1, [sp, #8]
 800313e:	9201      	str	r2, [sp, #4]
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	462b      	mov	r3, r5
 8003144:	4622      	mov	r2, r4
 8003146:	4601      	mov	r1, r0
 8003148:	4810      	ldr	r0, [pc, #64]	@ (800318c <PIN_Setup+0x8a8>)
 800314a:	f7fe fa37 	bl	80015bc <GPIO_Pin_Init>
}
 800314e:	e019      	b.n	8003184 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	7bdb      	ldrb	r3, [r3, #15]
 8003154:	220a      	movs	r2, #10
 8003156:	4293      	cmp	r3, r2
 8003158:	d114      	bne.n	8003184 <PIN_Setup+0x8a0>
 800315a:	200a      	movs	r0, #10
 800315c:	2402      	movs	r4, #2
 800315e:	2500      	movs	r5, #0
 8003160:	2302      	movs	r3, #2
 8003162:	2200      	movs	r2, #0
 8003164:	2107      	movs	r1, #7
 8003166:	9102      	str	r1, [sp, #8]
 8003168:	9201      	str	r2, [sp, #4]
 800316a:	9300      	str	r3, [sp, #0]
 800316c:	462b      	mov	r3, r5
 800316e:	4622      	mov	r2, r4
 8003170:	4601      	mov	r1, r0
 8003172:	4807      	ldr	r0, [pc, #28]	@ (8003190 <PIN_Setup+0x8ac>)
 8003174:	f7fe fa22 	bl	80015bc <GPIO_Pin_Init>
}
 8003178:	e004      	b.n	8003184 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800317a:	bf00      	nop
 800317c:	e002      	b.n	8003184 <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800317e:	bf00      	nop
 8003180:	e000      	b.n	8003184 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8003182:	bf00      	nop
}
 8003184:	bf00      	nop
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bdb0      	pop	{r4, r5, r7, pc}
 800318c:	40020400 	.word	0x40020400
 8003190:	40020c00 	.word	0x40020c00
 8003194:	00000000 	.word	0x00000000

08003198 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08a      	sub	sp, #40	@ 0x28
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7ff fafb 	bl	800279c <USART_Clock_Enable>
	PIN_Setup(config);
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	f7ff fb9c 	bl	80028e4 <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	4618      	mov	r0, r3
 80031b2:	f7fd f94b 	bl	800044c <__aeabi_ui2d>
 80031b6:	f04f 0200 	mov.w	r2, #0
 80031ba:	4b4d      	ldr	r3, [pc, #308]	@ (80032f0 <USART_Init+0x158>)
 80031bc:	f7fd f9c0 	bl	8000540 <__aeabi_dmul>
 80031c0:	4602      	mov	r2, r0
 80031c2:	460b      	mov	r3, r1
 80031c4:	a148      	add	r1, pc, #288	@ (adr r1, 80032e8 <USART_Init+0x150>)
 80031c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80031ca:	f7fd fae3 	bl	8000794 <__aeabi_ddiv>
 80031ce:	4602      	mov	r2, r0
 80031d0:	460b      	mov	r3, r1
 80031d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80031d6:	f107 0208 	add.w	r2, r7, #8
 80031da:	f107 0310 	add.w	r3, r7, #16
 80031de:	4611      	mov	r1, r2
 80031e0:	4618      	mov	r0, r3
 80031e2:	ed97 0b08 	vldr	d0, [r7, #32]
 80031e6:	f7ff fa92 	bl	800270e <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 80031ea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80031ee:	f04f 0200 	mov.w	r2, #0
 80031f2:	4b40      	ldr	r3, [pc, #256]	@ (80032f4 <USART_Init+0x15c>)
 80031f4:	f7fd f9a4 	bl	8000540 <__aeabi_dmul>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	ec43 2b17 	vmov	d7, r2, r3
 8003200:	eeb0 0a47 	vmov.f32	s0, s14
 8003204:	eef0 0a67 	vmov.f32	s1, s15
 8003208:	f000 f89a 	bl	8003340 <ceil>
 800320c:	ec53 2b10 	vmov	r2, r3, d0
 8003210:	4610      	mov	r0, r2
 8003212:	4619      	mov	r1, r3
 8003214:	f7fd fc2e 	bl	8000a74 <__aeabi_d2iz>
 8003218:	4603      	mov	r3, r0
 800321a:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 800321c:	ed97 7b02 	vldr	d7, [r7, #8]
 8003220:	eeb0 0a47 	vmov.f32	s0, s14
 8003224:	eef0 0a67 	vmov.f32	s1, s15
 8003228:	f000 f88a 	bl	8003340 <ceil>
 800322c:	ec53 2b10 	vmov	r2, r3, d0
 8003230:	4610      	mov	r0, r2
 8003232:	4619      	mov	r1, r3
 8003234:	f7fd fc1e 	bl	8000a74 <__aeabi_d2iz>
 8003238:	4603      	mov	r3, r0
 800323a:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68da      	ldr	r2, [r3, #12]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800324a:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	011a      	lsls	r2, r3, #4
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7d9b      	ldrb	r3, [r3, #22]
 8003264:	4619      	mov	r1, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	430a      	orrs	r2, r1
 800326c:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	68da      	ldr	r2, [r3, #12]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	7c9b      	ldrb	r3, [r3, #18]
 8003278:	4619      	mov	r1, r3
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	691a      	ldr	r2, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7d1b      	ldrb	r3, [r3, #20]
 800328c:	4619      	mov	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	430a      	orrs	r2, r1
 8003294:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	7b1b      	ldrb	r3, [r3, #12]
 800329a:	2203      	movs	r2, #3
 800329c:	4293      	cmp	r3, r2
 800329e:	d107      	bne.n	80032b0 <USART_Init+0x118>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695a      	ldr	r2, [r3, #20]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0208 	orr.w	r2, r2, #8
 80032ae:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	7b1b      	ldrb	r3, [r3, #12]
 80032b4:	2205      	movs	r2, #5
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d107      	bne.n	80032ca <USART_Init+0x132>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032c8:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	68da      	ldr	r2, [r3, #12]
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 020c 	orr.w	r2, r2, #12
 80032d8:	60da      	str	r2, [r3, #12]

	return 1;
 80032da:	2301      	movs	r3, #1
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3728      	adds	r7, #40	@ 0x28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	f3af 8000 	nop.w
 80032e8:	00000000 	.word	0x00000000
 80032ec:	41a406f4 	.word	0x41a406f4
 80032f0:	40400000 	.word	0x40400000
 80032f4:	40300000 	.word	0x40300000

080032f8 <__libc_init_array>:
 80032f8:	b570      	push	{r4, r5, r6, lr}
 80032fa:	4d0d      	ldr	r5, [pc, #52]	@ (8003330 <__libc_init_array+0x38>)
 80032fc:	4c0d      	ldr	r4, [pc, #52]	@ (8003334 <__libc_init_array+0x3c>)
 80032fe:	1b64      	subs	r4, r4, r5
 8003300:	10a4      	asrs	r4, r4, #2
 8003302:	2600      	movs	r6, #0
 8003304:	42a6      	cmp	r6, r4
 8003306:	d109      	bne.n	800331c <__libc_init_array+0x24>
 8003308:	4d0b      	ldr	r5, [pc, #44]	@ (8003338 <__libc_init_array+0x40>)
 800330a:	4c0c      	ldr	r4, [pc, #48]	@ (800333c <__libc_init_array+0x44>)
 800330c:	f000 f894 	bl	8003438 <_init>
 8003310:	1b64      	subs	r4, r4, r5
 8003312:	10a4      	asrs	r4, r4, #2
 8003314:	2600      	movs	r6, #0
 8003316:	42a6      	cmp	r6, r4
 8003318:	d105      	bne.n	8003326 <__libc_init_array+0x2e>
 800331a:	bd70      	pop	{r4, r5, r6, pc}
 800331c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003320:	4798      	blx	r3
 8003322:	3601      	adds	r6, #1
 8003324:	e7ee      	b.n	8003304 <__libc_init_array+0xc>
 8003326:	f855 3b04 	ldr.w	r3, [r5], #4
 800332a:	4798      	blx	r3
 800332c:	3601      	adds	r6, #1
 800332e:	e7f2      	b.n	8003316 <__libc_init_array+0x1e>
 8003330:	08003460 	.word	0x08003460
 8003334:	08003460 	.word	0x08003460
 8003338:	08003460 	.word	0x08003460
 800333c:	08003464 	.word	0x08003464

08003340 <ceil>:
 8003340:	ec51 0b10 	vmov	r0, r1, d0
 8003344:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003348:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800334c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8003350:	2e13      	cmp	r6, #19
 8003352:	460c      	mov	r4, r1
 8003354:	4605      	mov	r5, r0
 8003356:	4680      	mov	r8, r0
 8003358:	dc2e      	bgt.n	80033b8 <ceil+0x78>
 800335a:	2e00      	cmp	r6, #0
 800335c:	da11      	bge.n	8003382 <ceil+0x42>
 800335e:	a332      	add	r3, pc, #200	@ (adr r3, 8003428 <ceil+0xe8>)
 8003360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003364:	f7fc ff36 	bl	80001d4 <__adddf3>
 8003368:	2200      	movs	r2, #0
 800336a:	2300      	movs	r3, #0
 800336c:	f7fd fb78 	bl	8000a60 <__aeabi_dcmpgt>
 8003370:	b120      	cbz	r0, 800337c <ceil+0x3c>
 8003372:	2c00      	cmp	r4, #0
 8003374:	db4f      	blt.n	8003416 <ceil+0xd6>
 8003376:	4325      	orrs	r5, r4
 8003378:	d151      	bne.n	800341e <ceil+0xde>
 800337a:	462c      	mov	r4, r5
 800337c:	4621      	mov	r1, r4
 800337e:	4628      	mov	r0, r5
 8003380:	e023      	b.n	80033ca <ceil+0x8a>
 8003382:	4f2b      	ldr	r7, [pc, #172]	@ (8003430 <ceil+0xf0>)
 8003384:	4137      	asrs	r7, r6
 8003386:	ea01 0307 	and.w	r3, r1, r7
 800338a:	4303      	orrs	r3, r0
 800338c:	d01d      	beq.n	80033ca <ceil+0x8a>
 800338e:	a326      	add	r3, pc, #152	@ (adr r3, 8003428 <ceil+0xe8>)
 8003390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003394:	f7fc ff1e 	bl	80001d4 <__adddf3>
 8003398:	2200      	movs	r2, #0
 800339a:	2300      	movs	r3, #0
 800339c:	f7fd fb60 	bl	8000a60 <__aeabi_dcmpgt>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d0eb      	beq.n	800337c <ceil+0x3c>
 80033a4:	2c00      	cmp	r4, #0
 80033a6:	bfc2      	ittt	gt
 80033a8:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 80033ac:	4133      	asrgt	r3, r6
 80033ae:	18e4      	addgt	r4, r4, r3
 80033b0:	ea24 0407 	bic.w	r4, r4, r7
 80033b4:	2500      	movs	r5, #0
 80033b6:	e7e1      	b.n	800337c <ceil+0x3c>
 80033b8:	2e33      	cmp	r6, #51	@ 0x33
 80033ba:	dd0a      	ble.n	80033d2 <ceil+0x92>
 80033bc:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80033c0:	d103      	bne.n	80033ca <ceil+0x8a>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	f7fc ff05 	bl	80001d4 <__adddf3>
 80033ca:	ec41 0b10 	vmov	d0, r0, r1
 80033ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033d2:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 80033d6:	f04f 37ff 	mov.w	r7, #4294967295
 80033da:	40df      	lsrs	r7, r3
 80033dc:	4238      	tst	r0, r7
 80033de:	d0f4      	beq.n	80033ca <ceil+0x8a>
 80033e0:	a311      	add	r3, pc, #68	@ (adr r3, 8003428 <ceil+0xe8>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fc fef5 	bl	80001d4 <__adddf3>
 80033ea:	2200      	movs	r2, #0
 80033ec:	2300      	movs	r3, #0
 80033ee:	f7fd fb37 	bl	8000a60 <__aeabi_dcmpgt>
 80033f2:	2800      	cmp	r0, #0
 80033f4:	d0c2      	beq.n	800337c <ceil+0x3c>
 80033f6:	2c00      	cmp	r4, #0
 80033f8:	dd0a      	ble.n	8003410 <ceil+0xd0>
 80033fa:	2e14      	cmp	r6, #20
 80033fc:	d101      	bne.n	8003402 <ceil+0xc2>
 80033fe:	3401      	adds	r4, #1
 8003400:	e006      	b.n	8003410 <ceil+0xd0>
 8003402:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8003406:	2301      	movs	r3, #1
 8003408:	40b3      	lsls	r3, r6
 800340a:	441d      	add	r5, r3
 800340c:	45a8      	cmp	r8, r5
 800340e:	d8f6      	bhi.n	80033fe <ceil+0xbe>
 8003410:	ea25 0507 	bic.w	r5, r5, r7
 8003414:	e7b2      	b.n	800337c <ceil+0x3c>
 8003416:	2500      	movs	r5, #0
 8003418:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800341c:	e7ae      	b.n	800337c <ceil+0x3c>
 800341e:	4c05      	ldr	r4, [pc, #20]	@ (8003434 <ceil+0xf4>)
 8003420:	2500      	movs	r5, #0
 8003422:	e7ab      	b.n	800337c <ceil+0x3c>
 8003424:	f3af 8000 	nop.w
 8003428:	8800759c 	.word	0x8800759c
 800342c:	7e37e43c 	.word	0x7e37e43c
 8003430:	000fffff 	.word	0x000fffff
 8003434:	3ff00000 	.word	0x3ff00000

08003438 <_init>:
 8003438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800343a:	bf00      	nop
 800343c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343e:	bc08      	pop	{r3}
 8003440:	469e      	mov	lr, r3
 8003442:	4770      	bx	lr

08003444 <_fini>:
 8003444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003446:	bf00      	nop
 8003448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800344a:	bc08      	pop	{r3}
 800344c:	469e      	mov	lr, r3
 800344e:	4770      	bx	lr
