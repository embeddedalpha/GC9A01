
GC9A01_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046f8  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08004880  08004880  00005880  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a70  08004a70  00006004  2**0
                  CONTENTS
  4 .ARM          00000000  08004a70  08004a70  00006004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a70  08004a70  00006004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a70  08004a70  00005a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004a74  08004a74  00005a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08004a78  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00006004  2**0
                  CONTENTS
 10 .bss          000000d4  20000004  20000004  00006004  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000d8  200000d8  00006004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00006004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000088d0  00000000  00000000  00006034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000fa5  00000000  00000000  0000e904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000002d0  00000000  00000000  0000f8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000202  00000000  00000000  0000fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a65f  00000000  00000000  0000fd82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000061bc  00000000  00000000  0002a3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008ef81  00000000  00000000  0003059d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000bf51e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000e4c  00000000  00000000  000bf564  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004d  00000000  00000000  000c03b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004868 	.word	0x08004868

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08004868 	.word	0x08004868

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <__aeabi_d2lz>:
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	2200      	movs	r2, #0
 8000b08:	2300      	movs	r3, #0
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	460d      	mov	r5, r1
 8000b0e:	f7ff ff89 	bl	8000a24 <__aeabi_dcmplt>
 8000b12:	b928      	cbnz	r0, 8000b20 <__aeabi_d2lz+0x1c>
 8000b14:	4620      	mov	r0, r4
 8000b16:	4629      	mov	r1, r5
 8000b18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b1c:	f000 b80a 	b.w	8000b34 <__aeabi_d2ulz>
 8000b20:	4620      	mov	r0, r4
 8000b22:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b26:	f000 f805 	bl	8000b34 <__aeabi_d2ulz>
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b30:	bd38      	pop	{r3, r4, r5, pc}
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2ulz>:
 8000b34:	b5d0      	push	{r4, r6, r7, lr}
 8000b36:	4b0c      	ldr	r3, [pc, #48]	@ (8000b68 <__aeabi_d2ulz+0x34>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	4606      	mov	r6, r0
 8000b3c:	460f      	mov	r7, r1
 8000b3e:	f7ff fcff 	bl	8000540 <__aeabi_dmul>
 8000b42:	f7ff ffbf 	bl	8000ac4 <__aeabi_d2uiz>
 8000b46:	4604      	mov	r4, r0
 8000b48:	f7ff fc80 	bl	800044c <__aeabi_ui2d>
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <__aeabi_d2ulz+0x38>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	f7ff fcf6 	bl	8000540 <__aeabi_dmul>
 8000b54:	4602      	mov	r2, r0
 8000b56:	460b      	mov	r3, r1
 8000b58:	4630      	mov	r0, r6
 8000b5a:	4639      	mov	r1, r7
 8000b5c:	f7ff fb38 	bl	80001d0 <__aeabi_dsub>
 8000b60:	f7ff ffb0 	bl	8000ac4 <__aeabi_d2uiz>
 8000b64:	4621      	mov	r1, r4
 8000b66:	bdd0      	pop	{r4, r6, r7, pc}
 8000b68:	3df00000 	.word	0x3df00000
 8000b6c:	41f00000 	.word	0x41f00000

08000b70 <Console_Init>:

USART_Config serial;


 void Console_Init(USART_TypeDef *port,int32_t baudrate)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	 USART_Config_Reset(&serial);
 8000b7a:	480e      	ldr	r0, [pc, #56]	@ (8000bb4 <Console_Init+0x44>)
 8000b7c:	f001 ffd7 	bl	8002b2e <USART_Config_Reset>
	 serial.Port = USART1;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <Console_Init+0x44>)
 8000b82:	4a0d      	ldr	r2, [pc, #52]	@ (8000bb8 <Console_Init+0x48>)
 8000b84:	601a      	str	r2, [r3, #0]
	 serial.baudrate = baudrate;
 8000b86:	683b      	ldr	r3, [r7, #0]
 8000b88:	4a0a      	ldr	r2, [pc, #40]	@ (8000bb4 <Console_Init+0x44>)
 8000b8a:	6093      	str	r3, [r2, #8]
	 serial.mode = USART_Mode.Asynchronous;
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4b09      	ldr	r3, [pc, #36]	@ (8000bb4 <Console_Init+0x44>)
 8000b90:	731a      	strb	r2, [r3, #12]
	 serial.stop_bits = Stop_Bits.Bit_1;
 8000b92:	2300      	movs	r3, #0
 8000b94:	b2da      	uxtb	r2, r3
 8000b96:	4b07      	ldr	r3, [pc, #28]	@ (8000bb4 <Console_Init+0x44>)
 8000b98:	751a      	strb	r2, [r3, #20]
	 serial.TX_Pin = USART1_TX_Pin.PB6;
 8000b9a:	2206      	movs	r2, #6
 8000b9c:	4b05      	ldr	r3, [pc, #20]	@ (8000bb4 <Console_Init+0x44>)
 8000b9e:	735a      	strb	r2, [r3, #13]
	 serial.RX_Pin = USART1_RX_Pin.PB7;
 8000ba0:	2207      	movs	r2, #7
 8000ba2:	4b04      	ldr	r3, [pc, #16]	@ (8000bb4 <Console_Init+0x44>)
 8000ba4:	739a      	strb	r2, [r3, #14]
	 USART_Init(&serial);
 8000ba6:	4803      	ldr	r0, [pc, #12]	@ (8000bb4 <Console_Init+0x44>)
 8000ba8:	f002 fcde 	bl	8003568 <USART_Init>


}
 8000bac:	bf00      	nop
 8000bae:	3708      	adds	r7, #8
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20000020 	.word	0x20000020
 8000bb8:	40011000 	.word	0x40011000

08000bbc <DMA_Clock_Enable>:

#include "DMA.h"


void DMA_Clock_Enable(DMA_Config *config)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
	if(config->controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a0c      	ldr	r2, [pc, #48]	@ (8000bfc <DMA_Clock_Enable+0x40>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d105      	bne.n	8000bda <DMA_Clock_Enable+0x1e>
 8000bce:	4b0c      	ldr	r3, [pc, #48]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bd4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bd8:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config->controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a09      	ldr	r2, [pc, #36]	@ (8000c04 <DMA_Clock_Enable+0x48>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d105      	bne.n	8000bf0 <DMA_Clock_Enable+0x34>
 8000be4:	4b06      	ldr	r3, [pc, #24]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be8:	4a05      	ldr	r2, [pc, #20]	@ (8000c00 <DMA_Clock_Enable+0x44>)
 8000bea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bee:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	40026000 	.word	0x40026000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40026400 	.word	0x40026400

08000c08 <DMA_Init>:
	if(config->controller == DMA2) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA2RST;
}
//

void DMA_Init(DMA_Config *config)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f7ff ffd3 	bl	8000bbc <DMA_Clock_Enable>
	config -> stream -> CR |= config -> channel << DMA_SxCR_CHSEL_Pos;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	6819      	ldr	r1, [r3, #0]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	065a      	lsls	r2, r3, #25
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> circular_mode;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	6819      	ldr	r1, [r3, #0]
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a1a      	ldr	r2, [r3, #32]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	430a      	orrs	r2, r1
 8000c3a:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> flow_control;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	6819      	ldr	r1, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	68da      	ldr	r2, [r3, #12]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	430a      	orrs	r2, r1
 8000c4c:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> priority_level;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	6819      	ldr	r1, [r3, #0]
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	695a      	ldr	r2, [r3, #20]
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> memory_data_size;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	6819      	ldr	r1, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	69da      	ldr	r2, [r3, #28]
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	685b      	ldr	r3, [r3, #4]
 8000c6e:	430a      	orrs	r2, r1
 8000c70:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> peripheral_data_size;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	6819      	ldr	r1, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	699a      	ldr	r2, [r3, #24]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	430a      	orrs	r2, r1
 8000c82:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> transfer_direction;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	6819      	ldr	r1, [r3, #0]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	691a      	ldr	r2, [r3, #16]
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	430a      	orrs	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= config -> interrupts;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	6819      	ldr	r1, [r3, #0]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]
	config -> stream -> CR |= DMA_SxCR_MINC;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000cb6:	601a      	str	r2, [r3, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b085      	sub	sp, #20
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8000cca:	edd7 7a01 	vldr	s15, [r7, #4]
 8000cce:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8000d14 <Delay_ms+0x54>
 8000cd2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000cda:	ee17 3a90 	vmov	r3, s15
 8000cde:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d18 <Delay_ms+0x58>)
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <Delay_ms+0x58>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8000cec:	4b0a      	ldr	r3, [pc, #40]	@ (8000d18 <Delay_ms+0x58>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a09      	ldr	r2, [pc, #36]	@ (8000d18 <Delay_ms+0x58>)
 8000cf2:	f043 0301 	orr.w	r3, r3, #1
 8000cf6:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8000cf8:	bf00      	nop
 8000cfa:	4b07      	ldr	r3, [pc, #28]	@ (8000d18 <Delay_ms+0x58>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f9      	beq.n	8000cfa <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 8000d06:	2300      	movs	r3, #0
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3714      	adds	r7, #20
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	48241000 	.word	0x48241000
 8000d18:	e000e010 	.word	0xe000e010

08000d1c <command_line_high>:
#include "GC9A01.h"



static void command_line_high(GC9A01_Typedef *config)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->DC_Port, config->DC_Pin);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8000d2e:	4619      	mov	r1, r3
 8000d30:	4610      	mov	r0, r2
 8000d32:	f000 fc3e 	bl	80015b2 <GPIO_Pin_High>
}
 8000d36:	bf00      	nop
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <command_line_low>:

static void command_line_low(GC9A01_Typedef *config)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b082      	sub	sp, #8
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->DC_Port, config->DC_Pin);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8000d50:	4619      	mov	r1, r3
 8000d52:	4610      	mov	r0, r2
 8000d54:	f000 fc3f 	bl	80015d6 <GPIO_Pin_Low>
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <reset_line_high>:

static void reset_line_high(GC9A01_Typedef *config)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->Reset_Port, config->Reset_Pin);
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f993 3034 	ldrsb.w	r3, [r3, #52]	@ 0x34
 8000d72:	4619      	mov	r1, r3
 8000d74:	4610      	mov	r0, r2
 8000d76:	f000 fc1c 	bl	80015b2 <GPIO_Pin_High>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <reset_line_low>:

static void reset_line_low(GC9A01_Typedef *config)
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b082      	sub	sp, #8
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->Reset_Port, config->Reset_Pin);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f993 3034 	ldrsb.w	r3, [r3, #52]	@ 0x34
 8000d94:	4619      	mov	r1, r3
 8000d96:	4610      	mov	r0, r2
 8000d98:	f000 fc1d 	bl	80015d6 <GPIO_Pin_Low>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <Command>:

static void Command(GC9A01_Typedef *config,uint8_t command)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
	command_line_low(config);
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f7ff ffc4 	bl	8000d3e <command_line_low>
	SPI_NSS_Low(&(config->SPI_Driver));
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f001 fb2c 	bl	8002416 <SPI_NSS_Low>
	SPI_TRX_Byte(&(config->SPI_Driver), command);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	78fa      	ldrb	r2, [r7, #3]
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fadc 	bl	8002384 <SPI_TRX_Byte>
	SPI_NSS_High(&(config->SPI_Driver));
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f001 fb11 	bl	80023f6 <SPI_NSS_High>
}
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <Data>:

static void Data(GC9A01_Typedef *config,uint8_t data)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
	command_line_high(config);
 8000de8:	6878      	ldr	r0, [r7, #4]
 8000dea:	f7ff ff97 	bl	8000d1c <command_line_high>
	SPI_NSS_Low(&(config->SPI_Driver));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f001 fb10 	bl	8002416 <SPI_NSS_Low>
	SPI_TRX_Byte(&(config->SPI_Driver), data);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	78fa      	ldrb	r2, [r7, #3]
 8000dfa:	b292      	uxth	r2, r2
 8000dfc:	4611      	mov	r1, r2
 8000dfe:	4618      	mov	r0, r3
 8000e00:	f001 fac0 	bl	8002384 <SPI_TRX_Byte>
	SPI_NSS_High(&(config->SPI_Driver));
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4618      	mov	r0, r3
 8000e08:	f001 faf5 	bl	80023f6 <SPI_NSS_High>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <GC9A01_Init>:
	config->Reset_Pin = -1;
	config->Reset_Port = NULL;
}

void GC9A01_Init(GC9A01_Typedef *config)
{
 8000e14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e16:	b087      	sub	sp, #28
 8000e18:	af04      	add	r7, sp, #16
 8000e1a:	6078      	str	r0, [r7, #4]

	SPI_Init(&(config->SPI_Driver));
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f001 f900 	bl	8002024 <SPI_Init>
	SPI_Enable(&(config->SPI_Driver));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fa9a 	bl	8002360 <SPI_Enable>

	GPIO_Pin_Init(config->DC_Port, config->DC_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f993 302c 	ldrsb.w	r3, [r3, #44]	@ 0x2c
 8000e36:	b2d9      	uxtb	r1, r3
 8000e38:	2501      	movs	r5, #1
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	2303      	movs	r3, #3
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2400      	movs	r4, #0
 8000e42:	9402      	str	r4, [sp, #8]
 8000e44:	9201      	str	r2, [sp, #4]
 8000e46:	9300      	str	r3, [sp, #0]
 8000e48:	4633      	mov	r3, r6
 8000e4a:	462a      	mov	r2, r5
 8000e4c:	f000 fc36 	bl	80016bc <GPIO_Pin_Init>

	GPIO_Pin_Init(config->Reset_Port, config->Reset_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.None);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f993 3034 	ldrsb.w	r3, [r3, #52]	@ 0x34
 8000e5a:	b2d9      	uxtb	r1, r3
 8000e5c:	2501      	movs	r5, #1
 8000e5e:	2600      	movs	r6, #0
 8000e60:	2303      	movs	r3, #3
 8000e62:	2200      	movs	r2, #0
 8000e64:	2400      	movs	r4, #0
 8000e66:	9402      	str	r4, [sp, #8]
 8000e68:	9201      	str	r2, [sp, #4]
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	4633      	mov	r3, r6
 8000e6e:	462a      	mov	r2, r5
 8000e70:	f000 fc24 	bl	80016bc <GPIO_Pin_Init>


	SPI_NSS_High(&(config->SPI_Driver));
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fabd 	bl	80023f6 <SPI_NSS_High>
	Delay_ms(5);
 8000e7c:	eeb1 0a04 	vmov.f32	s0, #20	@ 0x40a00000  5.0
 8000e80:	f7ff ff1e 	bl	8000cc0 <Delay_ms>
	reset_line_low(config);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff7c 	bl	8000d82 <reset_line_low>
	Delay_ms(10);
 8000e8a:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8000e8e:	f7ff ff17 	bl	8000cc0 <Delay_ms>
	reset_line_high(config);
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	f7ff ff64 	bl	8000d60 <reset_line_high>
	Delay_ms(120);
 8000e98:	ed9f 0acb 	vldr	s0, [pc, #812]	@ 80011c8 <GC9A01_Init+0x3b4>
 8000e9c:	f7ff ff10 	bl	8000cc0 <Delay_ms>

		Command(config,0xEF);
 8000ea0:	21ef      	movs	r1, #239	@ 0xef
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff7e 	bl	8000da4 <Command>
	    Command(config,0xEB);
 8000ea8:	21eb      	movs	r1, #235	@ 0xeb
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ff7a 	bl	8000da4 <Command>
	    Data(config,0x14);
 8000eb0:	2114      	movs	r1, #20
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f7ff ff92 	bl	8000ddc <Data>

	    Command(config,0xFE);
 8000eb8:	21fe      	movs	r1, #254	@ 0xfe
 8000eba:	6878      	ldr	r0, [r7, #4]
 8000ebc:	f7ff ff72 	bl	8000da4 <Command>
	    Command(config,0xEF);
 8000ec0:	21ef      	movs	r1, #239	@ 0xef
 8000ec2:	6878      	ldr	r0, [r7, #4]
 8000ec4:	f7ff ff6e 	bl	8000da4 <Command>

	    Command(config,0xEB);
 8000ec8:	21eb      	movs	r1, #235	@ 0xeb
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f7ff ff6a 	bl	8000da4 <Command>
	    Data(config,0x14);
 8000ed0:	2114      	movs	r1, #20
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff82 	bl	8000ddc <Data>

	    Command(config,0x84);
 8000ed8:	2184      	movs	r1, #132	@ 0x84
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ff62 	bl	8000da4 <Command>
	    Data(config,0x40);
 8000ee0:	2140      	movs	r1, #64	@ 0x40
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff7a 	bl	8000ddc <Data>

	    Command(config,0x85);
 8000ee8:	2185      	movs	r1, #133	@ 0x85
 8000eea:	6878      	ldr	r0, [r7, #4]
 8000eec:	f7ff ff5a 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000ef0:	21ff      	movs	r1, #255	@ 0xff
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f7ff ff72 	bl	8000ddc <Data>

	    Command(config,0x86);
 8000ef8:	2186      	movs	r1, #134	@ 0x86
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff ff52 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000f00:	21ff      	movs	r1, #255	@ 0xff
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ff6a 	bl	8000ddc <Data>

	    Command(config,0x87);
 8000f08:	2187      	movs	r1, #135	@ 0x87
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ff4a 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000f10:	21ff      	movs	r1, #255	@ 0xff
 8000f12:	6878      	ldr	r0, [r7, #4]
 8000f14:	f7ff ff62 	bl	8000ddc <Data>

	    Command(config,0x88);
 8000f18:	2188      	movs	r1, #136	@ 0x88
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f7ff ff42 	bl	8000da4 <Command>
	    Data(config,0x0A);
 8000f20:	210a      	movs	r1, #10
 8000f22:	6878      	ldr	r0, [r7, #4]
 8000f24:	f7ff ff5a 	bl	8000ddc <Data>

	    Command(config,0x89);
 8000f28:	2189      	movs	r1, #137	@ 0x89
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ff3a 	bl	8000da4 <Command>
	    Data(config,0x21);
 8000f30:	2121      	movs	r1, #33	@ 0x21
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f7ff ff52 	bl	8000ddc <Data>

	    Command(config,0x8A);
 8000f38:	218a      	movs	r1, #138	@ 0x8a
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff ff32 	bl	8000da4 <Command>
	    Data(config,0x00);
 8000f40:	2100      	movs	r1, #0
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff4a 	bl	8000ddc <Data>

	    Command(config,0x8B);
 8000f48:	218b      	movs	r1, #139	@ 0x8b
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f7ff ff2a 	bl	8000da4 <Command>
	    Data(config,0x80);
 8000f50:	2180      	movs	r1, #128	@ 0x80
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f7ff ff42 	bl	8000ddc <Data>

	    Command(config,0x8C);
 8000f58:	218c      	movs	r1, #140	@ 0x8c
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ff22 	bl	8000da4 <Command>
	    Data(config,0x01);
 8000f60:	2101      	movs	r1, #1
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff3a 	bl	8000ddc <Data>

	    Command(config,0x8D);
 8000f68:	218d      	movs	r1, #141	@ 0x8d
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f7ff ff1a 	bl	8000da4 <Command>
	    Data(config,0x01);
 8000f70:	2101      	movs	r1, #1
 8000f72:	6878      	ldr	r0, [r7, #4]
 8000f74:	f7ff ff32 	bl	8000ddc <Data>

	    Command(config,0x8E);
 8000f78:	218e      	movs	r1, #142	@ 0x8e
 8000f7a:	6878      	ldr	r0, [r7, #4]
 8000f7c:	f7ff ff12 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000f80:	21ff      	movs	r1, #255	@ 0xff
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f7ff ff2a 	bl	8000ddc <Data>

	    Command(config,0x8F);
 8000f88:	218f      	movs	r1, #143	@ 0x8f
 8000f8a:	6878      	ldr	r0, [r7, #4]
 8000f8c:	f7ff ff0a 	bl	8000da4 <Command>
	    Data(config,0xFF);
 8000f90:	21ff      	movs	r1, #255	@ 0xff
 8000f92:	6878      	ldr	r0, [r7, #4]
 8000f94:	f7ff ff22 	bl	8000ddc <Data>


	    Command(config,0xB6);
 8000f98:	21b6      	movs	r1, #182	@ 0xb6
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ff02 	bl	8000da4 <Command>
	    Data(config,0x00);
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f7ff ff1a 	bl	8000ddc <Data>
	    Data(config,0x00);
 8000fa8:	2100      	movs	r1, #0
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f7ff ff16 	bl	8000ddc <Data>

	    Command(config,0x36);
 8000fb0:	2136      	movs	r1, #54	@ 0x36
 8000fb2:	6878      	ldr	r0, [r7, #4]
 8000fb4:	f7ff fef6 	bl	8000da4 <Command>
	#if ORIENTATION == 0
	    Data(config,0x18);
	#elif ORIENTATION == 1
	    Data(config,0x28);
	#elif ORIENTATION == 2
	    Data(config,0x48);
 8000fb8:	2148      	movs	r1, #72	@ 0x48
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f7ff ff0e 	bl	8000ddc <Data>
	#else
	    Data(config,0x88);
	#endif

	    Command(config,COLOR_MODE);
 8000fc0:	213a      	movs	r1, #58	@ 0x3a
 8000fc2:	6878      	ldr	r0, [r7, #4]
 8000fc4:	f7ff feee 	bl	8000da4 <Command>
	    Data(config,COLOR_MODE__16_BIT);
 8000fc8:	2105      	movs	r1, #5
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff06 	bl	8000ddc <Data>

	    Command(config,0x90);
 8000fd0:	2190      	movs	r1, #144	@ 0x90
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff fee6 	bl	8000da4 <Command>
	    Data(config,0x08);
 8000fd8:	2108      	movs	r1, #8
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff fefe 	bl	8000ddc <Data>
	    Data(config,0x08);
 8000fe0:	2108      	movs	r1, #8
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff fefa 	bl	8000ddc <Data>
	    Data(config,0x08);
 8000fe8:	2108      	movs	r1, #8
 8000fea:	6878      	ldr	r0, [r7, #4]
 8000fec:	f7ff fef6 	bl	8000ddc <Data>
	    Data(config,0x08);
 8000ff0:	2108      	movs	r1, #8
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	f7ff fef2 	bl	8000ddc <Data>

	    Command(config,0xBD);
 8000ff8:	21bd      	movs	r1, #189	@ 0xbd
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff fed2 	bl	8000da4 <Command>
	    Data(config,0x06);
 8001000:	2106      	movs	r1, #6
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff feea 	bl	8000ddc <Data>

	    Command(config,0xBC);
 8001008:	21bc      	movs	r1, #188	@ 0xbc
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f7ff feca 	bl	8000da4 <Command>
	    Data(config,0x00);
 8001010:	2100      	movs	r1, #0
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff fee2 	bl	8000ddc <Data>

	    Command(config,0xFF);
 8001018:	21ff      	movs	r1, #255	@ 0xff
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f7ff fec2 	bl	8000da4 <Command>
	    Data(config,0x60);
 8001020:	2160      	movs	r1, #96	@ 0x60
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff feda 	bl	8000ddc <Data>
	    Data(config,0x01);
 8001028:	2101      	movs	r1, #1
 800102a:	6878      	ldr	r0, [r7, #4]
 800102c:	f7ff fed6 	bl	8000ddc <Data>
	    Data(config,0x04);
 8001030:	2104      	movs	r1, #4
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff fed2 	bl	8000ddc <Data>

	    Command(config,0xC3);
 8001038:	21c3      	movs	r1, #195	@ 0xc3
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff feb2 	bl	8000da4 <Command>
	    Data(config,0x13);
 8001040:	2113      	movs	r1, #19
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff feca 	bl	8000ddc <Data>
	    Command(config,0xC4);
 8001048:	21c4      	movs	r1, #196	@ 0xc4
 800104a:	6878      	ldr	r0, [r7, #4]
 800104c:	f7ff feaa 	bl	8000da4 <Command>
	    Data(config,0x13);
 8001050:	2113      	movs	r1, #19
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff fec2 	bl	8000ddc <Data>

	    Command(config,0xC9);
 8001058:	21c9      	movs	r1, #201	@ 0xc9
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f7ff fea2 	bl	8000da4 <Command>
	    Data(config,0x22);
 8001060:	2122      	movs	r1, #34	@ 0x22
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff feba 	bl	8000ddc <Data>

	    Command(config,0xBE);
 8001068:	21be      	movs	r1, #190	@ 0xbe
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff fe9a 	bl	8000da4 <Command>
	    Data(config,0x11);
 8001070:	2111      	movs	r1, #17
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff feb2 	bl	8000ddc <Data>

	    Command(config,0xE1);
 8001078:	21e1      	movs	r1, #225	@ 0xe1
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f7ff fe92 	bl	8000da4 <Command>
	    Data(config,0x10);
 8001080:	2110      	movs	r1, #16
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f7ff feaa 	bl	8000ddc <Data>
	    Data(config,0x0E);
 8001088:	210e      	movs	r1, #14
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f7ff fea6 	bl	8000ddc <Data>

	    Command(config,0xDF);
 8001090:	21df      	movs	r1, #223	@ 0xdf
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff fe86 	bl	8000da4 <Command>
	    Data(config,0x21);
 8001098:	2121      	movs	r1, #33	@ 0x21
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fe9e 	bl	8000ddc <Data>
	    Data(config,0x0c);
 80010a0:	210c      	movs	r1, #12
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fe9a 	bl	8000ddc <Data>
	    Data(config,0x02);
 80010a8:	2102      	movs	r1, #2
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff fe96 	bl	8000ddc <Data>

	    Command(config,0xF0);
 80010b0:	21f0      	movs	r1, #240	@ 0xf0
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff fe76 	bl	8000da4 <Command>
	    Data(config,0x45);
 80010b8:	2145      	movs	r1, #69	@ 0x45
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff fe8e 	bl	8000ddc <Data>
	    Data(config,0x09);
 80010c0:	2109      	movs	r1, #9
 80010c2:	6878      	ldr	r0, [r7, #4]
 80010c4:	f7ff fe8a 	bl	8000ddc <Data>
	    Data(config,0x08);
 80010c8:	2108      	movs	r1, #8
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fe86 	bl	8000ddc <Data>
	    Data(config,0x08);
 80010d0:	2108      	movs	r1, #8
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff fe82 	bl	8000ddc <Data>
	    Data(config,0x26);
 80010d8:	2126      	movs	r1, #38	@ 0x26
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f7ff fe7e 	bl	8000ddc <Data>
	    Data(config,0x2A);
 80010e0:	212a      	movs	r1, #42	@ 0x2a
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fe7a 	bl	8000ddc <Data>

	    Command(config,0xF1);
 80010e8:	21f1      	movs	r1, #241	@ 0xf1
 80010ea:	6878      	ldr	r0, [r7, #4]
 80010ec:	f7ff fe5a 	bl	8000da4 <Command>
	    Data(config,0x43);
 80010f0:	2143      	movs	r1, #67	@ 0x43
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff fe72 	bl	8000ddc <Data>
	    Data(config,0x70);
 80010f8:	2170      	movs	r1, #112	@ 0x70
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff fe6e 	bl	8000ddc <Data>
	    Data(config,0x72);
 8001100:	2172      	movs	r1, #114	@ 0x72
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff fe6a 	bl	8000ddc <Data>
	    Data(config,0x36);
 8001108:	2136      	movs	r1, #54	@ 0x36
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff fe66 	bl	8000ddc <Data>
	    Data(config,0x37);
 8001110:	2137      	movs	r1, #55	@ 0x37
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fe62 	bl	8000ddc <Data>
	    Data(config,0x6F);
 8001118:	216f      	movs	r1, #111	@ 0x6f
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff fe5e 	bl	8000ddc <Data>

	    Command(config,0xF2);
 8001120:	21f2      	movs	r1, #242	@ 0xf2
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff fe3e 	bl	8000da4 <Command>
	    Data(config,0x45);
 8001128:	2145      	movs	r1, #69	@ 0x45
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff fe56 	bl	8000ddc <Data>
	    Data(config,0x09);
 8001130:	2109      	movs	r1, #9
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	f7ff fe52 	bl	8000ddc <Data>
	    Data(config,0x08);
 8001138:	2108      	movs	r1, #8
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fe4e 	bl	8000ddc <Data>
	    Data(config,0x08);
 8001140:	2108      	movs	r1, #8
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff fe4a 	bl	8000ddc <Data>
	    Data(config,0x26);
 8001148:	2126      	movs	r1, #38	@ 0x26
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff fe46 	bl	8000ddc <Data>
	    Data(config,0x2A);
 8001150:	212a      	movs	r1, #42	@ 0x2a
 8001152:	6878      	ldr	r0, [r7, #4]
 8001154:	f7ff fe42 	bl	8000ddc <Data>

	    Command(config,0xF3);
 8001158:	21f3      	movs	r1, #243	@ 0xf3
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff fe22 	bl	8000da4 <Command>
	    Data(config,0x43);
 8001160:	2143      	movs	r1, #67	@ 0x43
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff fe3a 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001168:	2170      	movs	r1, #112	@ 0x70
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fe36 	bl	8000ddc <Data>
	    Data(config,0x72);
 8001170:	2172      	movs	r1, #114	@ 0x72
 8001172:	6878      	ldr	r0, [r7, #4]
 8001174:	f7ff fe32 	bl	8000ddc <Data>
	    Data(config,0x36);
 8001178:	2136      	movs	r1, #54	@ 0x36
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fe2e 	bl	8000ddc <Data>
	    Data(config,0x37);
 8001180:	2137      	movs	r1, #55	@ 0x37
 8001182:	6878      	ldr	r0, [r7, #4]
 8001184:	f7ff fe2a 	bl	8000ddc <Data>
	    Data(config,0x6F);
 8001188:	216f      	movs	r1, #111	@ 0x6f
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff fe26 	bl	8000ddc <Data>

	    Command(config,0xED);
 8001190:	21ed      	movs	r1, #237	@ 0xed
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fe06 	bl	8000da4 <Command>
	    Data(config,0x1B);
 8001198:	211b      	movs	r1, #27
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f7ff fe1e 	bl	8000ddc <Data>
	    Data(config,0x0B);
 80011a0:	210b      	movs	r1, #11
 80011a2:	6878      	ldr	r0, [r7, #4]
 80011a4:	f7ff fe1a 	bl	8000ddc <Data>

	    Command(config,0xAE);
 80011a8:	21ae      	movs	r1, #174	@ 0xae
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f7ff fdfa 	bl	8000da4 <Command>
	    Data(config,0x77);
 80011b0:	2177      	movs	r1, #119	@ 0x77
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f7ff fe12 	bl	8000ddc <Data>

	    Command(config,0xCD);
 80011b8:	21cd      	movs	r1, #205	@ 0xcd
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f7ff fdf2 	bl	8000da4 <Command>
	    Data(config,0x63);
 80011c0:	2163      	movs	r1, #99	@ 0x63
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	e004      	b.n	80011d0 <GC9A01_Init+0x3bc>
 80011c6:	bf00      	nop
 80011c8:	42f00000 	.word	0x42f00000
 80011cc:	42f00000 	.word	0x42f00000
 80011d0:	f7ff fe04 	bl	8000ddc <Data>

	    Command(config,0x70);
 80011d4:	2170      	movs	r1, #112	@ 0x70
 80011d6:	6878      	ldr	r0, [r7, #4]
 80011d8:	f7ff fde4 	bl	8000da4 <Command>
	    Data(config,0x07);
 80011dc:	2107      	movs	r1, #7
 80011de:	6878      	ldr	r0, [r7, #4]
 80011e0:	f7ff fdfc 	bl	8000ddc <Data>
	    Data(config,0x07);
 80011e4:	2107      	movs	r1, #7
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fdf8 	bl	8000ddc <Data>
	    Data(config,0x04);
 80011ec:	2104      	movs	r1, #4
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f7ff fdf4 	bl	8000ddc <Data>
	    Data(config,0x0E);
 80011f4:	210e      	movs	r1, #14
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff fdf0 	bl	8000ddc <Data>
	    Data(config,0x0F);
 80011fc:	210f      	movs	r1, #15
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff fdec 	bl	8000ddc <Data>
	    Data(config,0x09);
 8001204:	2109      	movs	r1, #9
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fde8 	bl	8000ddc <Data>
	    Data(config,0x07);
 800120c:	2107      	movs	r1, #7
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f7ff fde4 	bl	8000ddc <Data>
	    Data(config,0x08);
 8001214:	2108      	movs	r1, #8
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff fde0 	bl	8000ddc <Data>
	    Data(config,0x03);
 800121c:	2103      	movs	r1, #3
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff fddc 	bl	8000ddc <Data>

	    Command(config,0xE8);
 8001224:	21e8      	movs	r1, #232	@ 0xe8
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff fdbc 	bl	8000da4 <Command>
	    Data(config,0x34);
 800122c:	2134      	movs	r1, #52	@ 0x34
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f7ff fdd4 	bl	8000ddc <Data>

	    Command(config,0x62);
 8001234:	2162      	movs	r1, #98	@ 0x62
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fdb4 	bl	8000da4 <Command>
	    Data(config,0x18);
 800123c:	2118      	movs	r1, #24
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff fdcc 	bl	8000ddc <Data>
	    Data(config,0x0D);
 8001244:	210d      	movs	r1, #13
 8001246:	6878      	ldr	r0, [r7, #4]
 8001248:	f7ff fdc8 	bl	8000ddc <Data>
	    Data(config,0x71);
 800124c:	2171      	movs	r1, #113	@ 0x71
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff fdc4 	bl	8000ddc <Data>
	    Data(config,0xED);
 8001254:	21ed      	movs	r1, #237	@ 0xed
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f7ff fdc0 	bl	8000ddc <Data>
	    Data(config,0x70);
 800125c:	2170      	movs	r1, #112	@ 0x70
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff fdbc 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001264:	2170      	movs	r1, #112	@ 0x70
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fdb8 	bl	8000ddc <Data>
	    Data(config,0x18);
 800126c:	2118      	movs	r1, #24
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff fdb4 	bl	8000ddc <Data>
	    Data(config,0x0F);
 8001274:	210f      	movs	r1, #15
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fdb0 	bl	8000ddc <Data>
	    Data(config,0x71);
 800127c:	2171      	movs	r1, #113	@ 0x71
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f7ff fdac 	bl	8000ddc <Data>
	    Data(config,0xEF);
 8001284:	21ef      	movs	r1, #239	@ 0xef
 8001286:	6878      	ldr	r0, [r7, #4]
 8001288:	f7ff fda8 	bl	8000ddc <Data>
	    Data(config,0x70);
 800128c:	2170      	movs	r1, #112	@ 0x70
 800128e:	6878      	ldr	r0, [r7, #4]
 8001290:	f7ff fda4 	bl	8000ddc <Data>
	    Data(config,0x70);
 8001294:	2170      	movs	r1, #112	@ 0x70
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f7ff fda0 	bl	8000ddc <Data>

	    Command(config,0x63);
 800129c:	2163      	movs	r1, #99	@ 0x63
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff fd80 	bl	8000da4 <Command>
	    Data(config,0x18);
 80012a4:	2118      	movs	r1, #24
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f7ff fd98 	bl	8000ddc <Data>
	    Data(config,0x11);
 80012ac:	2111      	movs	r1, #17
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff fd94 	bl	8000ddc <Data>
	    Data(config,0x71);
 80012b4:	2171      	movs	r1, #113	@ 0x71
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff fd90 	bl	8000ddc <Data>
	    Data(config,0xF1);
 80012bc:	21f1      	movs	r1, #241	@ 0xf1
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fd8c 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012c4:	2170      	movs	r1, #112	@ 0x70
 80012c6:	6878      	ldr	r0, [r7, #4]
 80012c8:	f7ff fd88 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012cc:	2170      	movs	r1, #112	@ 0x70
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff fd84 	bl	8000ddc <Data>
	    Data(config,0x18);
 80012d4:	2118      	movs	r1, #24
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	f7ff fd80 	bl	8000ddc <Data>
	    Data(config,0x13);
 80012dc:	2113      	movs	r1, #19
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff fd7c 	bl	8000ddc <Data>
	    Data(config,0x71);
 80012e4:	2171      	movs	r1, #113	@ 0x71
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f7ff fd78 	bl	8000ddc <Data>
	    Data(config,0xF3);
 80012ec:	21f3      	movs	r1, #243	@ 0xf3
 80012ee:	6878      	ldr	r0, [r7, #4]
 80012f0:	f7ff fd74 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012f4:	2170      	movs	r1, #112	@ 0x70
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff fd70 	bl	8000ddc <Data>
	    Data(config,0x70);
 80012fc:	2170      	movs	r1, #112	@ 0x70
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff fd6c 	bl	8000ddc <Data>

	    Command(config,0x64);
 8001304:	2164      	movs	r1, #100	@ 0x64
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fd4c 	bl	8000da4 <Command>
	    Data(config,0x28);
 800130c:	2128      	movs	r1, #40	@ 0x28
 800130e:	6878      	ldr	r0, [r7, #4]
 8001310:	f7ff fd64 	bl	8000ddc <Data>
	    Data(config,0x29);
 8001314:	2129      	movs	r1, #41	@ 0x29
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fd60 	bl	8000ddc <Data>
	    Data(config,0xF1);
 800131c:	21f1      	movs	r1, #241	@ 0xf1
 800131e:	6878      	ldr	r0, [r7, #4]
 8001320:	f7ff fd5c 	bl	8000ddc <Data>
	    Data(config,0x01);
 8001324:	2101      	movs	r1, #1
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f7ff fd58 	bl	8000ddc <Data>
	    Data(config,0xF1);
 800132c:	21f1      	movs	r1, #241	@ 0xf1
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff fd54 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001334:	2100      	movs	r1, #0
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff fd50 	bl	8000ddc <Data>
	    Data(config,0x07);
 800133c:	2107      	movs	r1, #7
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff fd4c 	bl	8000ddc <Data>

	    Command(config,0x66);
 8001344:	2166      	movs	r1, #102	@ 0x66
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f7ff fd2c 	bl	8000da4 <Command>
	    Data(config,0x3C);
 800134c:	213c      	movs	r1, #60	@ 0x3c
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff fd44 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001354:	2100      	movs	r1, #0
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff fd40 	bl	8000ddc <Data>
	    Data(config,0xCD);
 800135c:	21cd      	movs	r1, #205	@ 0xcd
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f7ff fd3c 	bl	8000ddc <Data>
	    Data(config,0x67);
 8001364:	2167      	movs	r1, #103	@ 0x67
 8001366:	6878      	ldr	r0, [r7, #4]
 8001368:	f7ff fd38 	bl	8000ddc <Data>
	    Data(config,0x45);
 800136c:	2145      	movs	r1, #69	@ 0x45
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f7ff fd34 	bl	8000ddc <Data>
	    Data(config,0x45);
 8001374:	2145      	movs	r1, #69	@ 0x45
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f7ff fd30 	bl	8000ddc <Data>
	    Data(config,0x10);
 800137c:	2110      	movs	r1, #16
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff fd2c 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001384:	2100      	movs	r1, #0
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff fd28 	bl	8000ddc <Data>
	    Data(config,0x00);
 800138c:	2100      	movs	r1, #0
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff fd24 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001394:	2100      	movs	r1, #0
 8001396:	6878      	ldr	r0, [r7, #4]
 8001398:	f7ff fd20 	bl	8000ddc <Data>

	    Command(config,0x67);
 800139c:	2167      	movs	r1, #103	@ 0x67
 800139e:	6878      	ldr	r0, [r7, #4]
 80013a0:	f7ff fd00 	bl	8000da4 <Command>
	    Data(config,0x00);
 80013a4:	2100      	movs	r1, #0
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff fd18 	bl	8000ddc <Data>
	    Data(config,0x3C);
 80013ac:	213c      	movs	r1, #60	@ 0x3c
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff fd14 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013b4:	2100      	movs	r1, #0
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff fd10 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013bc:	2100      	movs	r1, #0
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff fd0c 	bl	8000ddc <Data>
	    Data(config,0x00);
 80013c4:	2100      	movs	r1, #0
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f7ff fd08 	bl	8000ddc <Data>
	    Data(config,0x01);
 80013cc:	2101      	movs	r1, #1
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f7ff fd04 	bl	8000ddc <Data>
	    Data(config,0x54);
 80013d4:	2154      	movs	r1, #84	@ 0x54
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f7ff fd00 	bl	8000ddc <Data>
	    Data(config,0x10);
 80013dc:	2110      	movs	r1, #16
 80013de:	6878      	ldr	r0, [r7, #4]
 80013e0:	f7ff fcfc 	bl	8000ddc <Data>
	    Data(config,0x32);
 80013e4:	2132      	movs	r1, #50	@ 0x32
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fcf8 	bl	8000ddc <Data>
	    Data(config,0x98);
 80013ec:	2198      	movs	r1, #152	@ 0x98
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f7ff fcf4 	bl	8000ddc <Data>

	    Command(config,0x74);
 80013f4:	2174      	movs	r1, #116	@ 0x74
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fcd4 	bl	8000da4 <Command>
	    Data(config,0x10);
 80013fc:	2110      	movs	r1, #16
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff fcec 	bl	8000ddc <Data>
	    Data(config,0x85);
 8001404:	2185      	movs	r1, #133	@ 0x85
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f7ff fce8 	bl	8000ddc <Data>
	    Data(config,0x80);
 800140c:	2180      	movs	r1, #128	@ 0x80
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff fce4 	bl	8000ddc <Data>
	    Data(config,0x00);
 8001414:	2100      	movs	r1, #0
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f7ff fce0 	bl	8000ddc <Data>
	    Data(config,0x00);
 800141c:	2100      	movs	r1, #0
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f7ff fcdc 	bl	8000ddc <Data>
	    Data(config,0x4E);
 8001424:	214e      	movs	r1, #78	@ 0x4e
 8001426:	6878      	ldr	r0, [r7, #4]
 8001428:	f7ff fcd8 	bl	8000ddc <Data>
	    Data(config,0x00);
 800142c:	2100      	movs	r1, #0
 800142e:	6878      	ldr	r0, [r7, #4]
 8001430:	f7ff fcd4 	bl	8000ddc <Data>

	    Command(config,0x98);
 8001434:	2198      	movs	r1, #152	@ 0x98
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fcb4 	bl	8000da4 <Command>
	    Data(config,0x3e);
 800143c:	213e      	movs	r1, #62	@ 0x3e
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f7ff fccc 	bl	8000ddc <Data>
	    Data(config,0x07);
 8001444:	2107      	movs	r1, #7
 8001446:	6878      	ldr	r0, [r7, #4]
 8001448:	f7ff fcc8 	bl	8000ddc <Data>

	    Command(config,0x35);
 800144c:	2135      	movs	r1, #53	@ 0x35
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fca8 	bl	8000da4 <Command>
	    Command(config,0x21);
 8001454:	2121      	movs	r1, #33	@ 0x21
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f7ff fca4 	bl	8000da4 <Command>

	    Command(config,0x11);
 800145c:	2111      	movs	r1, #17
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff fca0 	bl	8000da4 <Command>
	    Delay_ms(120);
 8001464:	ed1f 0aa7 	vldr	s0, [pc, #-668]	@ 80011cc <GC9A01_Init+0x3b8>
 8001468:	f7ff fc2a 	bl	8000cc0 <Delay_ms>
	    Command(config,0x29);
 800146c:	2129      	movs	r1, #41	@ 0x29
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff fc98 	bl	8000da4 <Command>
	    Delay_ms(20);
 8001474:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001478:	f7ff fc22 	bl	8000cc0 <Delay_ms>
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001484 <GC9A01_Write>:

void GC9A01_Write(GC9A01_Typedef *config,uint8_t *data, size_t len) {
 8001484:	b580      	push	{r7, lr}
 8001486:	b086      	sub	sp, #24
 8001488:	af00      	add	r7, sp, #0
 800148a:	60f8      	str	r0, [r7, #12]
 800148c:	60b9      	str	r1, [r7, #8]
 800148e:	607a      	str	r2, [r7, #4]
    Command(config, MEM_WR);
 8001490:	212c      	movs	r1, #44	@ 0x2c
 8001492:	68f8      	ldr	r0, [r7, #12]
 8001494:	f7ff fc86 	bl	8000da4 <Command>
	command_line_high(config);
 8001498:	68f8      	ldr	r0, [r7, #12]
 800149a:	f7ff fc3f 	bl	8000d1c <command_line_high>
	SPI_NSS_Low(&(config->SPI_Driver));
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 ffb8 	bl	8002416 <SPI_NSS_Low>
	for(int i = 0; i < len; i++)
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e00a      	b.n	80014c2 <GC9A01_Write+0x3e>
	SPI_TRX_Byte(&(config->SPI_Driver), data[i]);
 80014ac:	68f8      	ldr	r0, [r7, #12]
 80014ae:	697b      	ldr	r3, [r7, #20]
 80014b0:	68ba      	ldr	r2, [r7, #8]
 80014b2:	4413      	add	r3, r2
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	4619      	mov	r1, r3
 80014b8:	f000 ff64 	bl	8002384 <SPI_TRX_Byte>
	for(int i = 0; i < len; i++)
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	3301      	adds	r3, #1
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	429a      	cmp	r2, r3
 80014c8:	d8f0      	bhi.n	80014ac <GC9A01_Write+0x28>
	SPI_NSS_High(&(config->SPI_Driver));
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 ff92 	bl	80023f6 <SPI_NSS_High>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <GC9A01_Write_Continue>:

void GC9A01_Write_Continue(GC9A01_Typedef *config,uint8_t *data, size_t len)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b086      	sub	sp, #24
 80014de:	af00      	add	r7, sp, #0
 80014e0:	60f8      	str	r0, [r7, #12]
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607a      	str	r2, [r7, #4]
    Command(config, MEM_WR_CONT);
 80014e6:	213c      	movs	r1, #60	@ 0x3c
 80014e8:	68f8      	ldr	r0, [r7, #12]
 80014ea:	f7ff fc5b 	bl	8000da4 <Command>
	command_line_high(config);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff fc14 	bl	8000d1c <command_line_high>
	SPI_NSS_Low(&(config->SPI_Driver));
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	4618      	mov	r0, r3
 80014f8:	f000 ff8d 	bl	8002416 <SPI_NSS_Low>
	for(int i = 0; i < len; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	617b      	str	r3, [r7, #20]
 8001500:	e00a      	b.n	8001518 <GC9A01_Write_Continue+0x3e>
	SPI_TRX_Byte(&(config->SPI_Driver), data[i]);
 8001502:	68f8      	ldr	r0, [r7, #12]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	68ba      	ldr	r2, [r7, #8]
 8001508:	4413      	add	r3, r2
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	4619      	mov	r1, r3
 800150e:	f000 ff39 	bl	8002384 <SPI_TRX_Byte>
	for(int i = 0; i < len; i++)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	3301      	adds	r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	429a      	cmp	r2, r3
 800151e:	d8f0      	bhi.n	8001502 <GC9A01_Write_Continue+0x28>
	SPI_NSS_High(&(config->SPI_Driver));
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	4618      	mov	r0, r3
 8001524:	f000 ff67 	bl	80023f6 <SPI_NSS_High>
}
 8001528:	bf00      	nop
 800152a:	3718      	adds	r7, #24
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <GC9A01_Set_Frame>:

void GC9A01_Set_Frame(GC9A01_Typedef *config,struct GC9A01_frame frame)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0
 8001536:	60f8      	str	r0, [r7, #12]
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t data[4];
	Command(config, COL_ADDR_SET);
 800153e:	212a      	movs	r1, #42	@ 0x2a
 8001540:	68f8      	ldr	r0, [r7, #12]
 8001542:	f7ff fc2f 	bl	8000da4 <Command>
    data[0] = (frame.start.X >> 8) & 0xFF;
 8001546:	88bb      	ldrh	r3, [r7, #4]
 8001548:	0a1b      	lsrs	r3, r3, #8
 800154a:	b29b      	uxth	r3, r3
 800154c:	b2db      	uxtb	r3, r3
 800154e:	753b      	strb	r3, [r7, #20]
    data[1] = frame.start.X & 0xFF;
 8001550:	88bb      	ldrh	r3, [r7, #4]
 8001552:	b2db      	uxtb	r3, r3
 8001554:	757b      	strb	r3, [r7, #21]
    data[2] = (frame.end.X >> 8) & 0xFF;
 8001556:	893b      	ldrh	r3, [r7, #8]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	b29b      	uxth	r3, r3
 800155c:	b2db      	uxtb	r3, r3
 800155e:	75bb      	strb	r3, [r7, #22]
    data[3] = frame.end.X & 0xFF;
 8001560:	893b      	ldrh	r3, [r7, #8]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	75fb      	strb	r3, [r7, #23]
    GC9A01_Write(config, data, 4);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	2204      	movs	r2, #4
 800156c:	4619      	mov	r1, r3
 800156e:	68f8      	ldr	r0, [r7, #12]
 8001570:	f7ff ff88 	bl	8001484 <GC9A01_Write>

	Command(config, ROW_ADDR_SET);
 8001574:	212b      	movs	r1, #43	@ 0x2b
 8001576:	68f8      	ldr	r0, [r7, #12]
 8001578:	f7ff fc14 	bl	8000da4 <Command>
    data[0] = (frame.start.Y >> 8) & 0xFF;
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	0a1b      	lsrs	r3, r3, #8
 8001580:	b29b      	uxth	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	753b      	strb	r3, [r7, #20]
    data[1] = frame.start.Y & 0xFF;
 8001586:	88fb      	ldrh	r3, [r7, #6]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	757b      	strb	r3, [r7, #21]
    data[2] = (frame.end.Y >> 8) & 0xFF;
 800158c:	897b      	ldrh	r3, [r7, #10]
 800158e:	0a1b      	lsrs	r3, r3, #8
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	75bb      	strb	r3, [r7, #22]
    data[3] = frame.end.Y & 0xFF;
 8001596:	897b      	ldrh	r3, [r7, #10]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	75fb      	strb	r3, [r7, #23]
    GC9A01_Write(config, data, 4);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	2204      	movs	r2, #4
 80015a2:	4619      	mov	r1, r3
 80015a4:	68f8      	ldr	r0, [r7, #12]
 80015a6:	f7ff ff6d 	bl	8001484 <GC9A01_Write>

}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <GPIO_Pin_High>:


}

void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80015b2:	b480      	push	{r7}
 80015b4:	b083      	sub	sp, #12
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
	Port -> ODR = 1 << pin;
 80015bc:	2201      	movs	r2, #1
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	461a      	mov	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	615a      	str	r2, [r3, #20]
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr

080015d6 <GPIO_Pin_Low>:


void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80015d6:	b480      	push	{r7}
 80015d8:	b083      	sub	sp, #12
 80015da:	af00      	add	r7, sp, #0
 80015dc:	6078      	str	r0, [r7, #4]
 80015de:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	2101      	movs	r1, #1
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	fa01 f202 	lsl.w	r2, r1, r2
 80015ec:	43d2      	mvns	r2, r2
 80015ee:	401a      	ands	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	615a      	str	r2, [r3, #20]
}
 80015f4:	bf00      	nop
 80015f6:	370c      	adds	r7, #12
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr

08001600 <GPIO_Clock_Enable>:

	return 1;
}

int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	4a25      	ldr	r2, [pc, #148]	@ (80016a0 <GPIO_Clock_Enable+0xa0>)
 800160c:	4293      	cmp	r3, r2
 800160e:	d106      	bne.n	800161e <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8001610:	4b24      	ldr	r3, [pc, #144]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001614:	4a23      	ldr	r2, [pc, #140]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001616:	f043 0301 	orr.w	r3, r3, #1
 800161a:	6313      	str	r3, [r2, #48]	@ 0x30
 800161c:	e039      	b.n	8001692 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a21      	ldr	r2, [pc, #132]	@ (80016a8 <GPIO_Clock_Enable+0xa8>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d106      	bne.n	8001634 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8001626:	4b1f      	ldr	r3, [pc, #124]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162a:	4a1e      	ldr	r2, [pc, #120]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6313      	str	r3, [r2, #48]	@ 0x30
 8001632:	e02e      	b.n	8001692 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a1d      	ldr	r2, [pc, #116]	@ (80016ac <GPIO_Clock_Enable+0xac>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d106      	bne.n	800164a <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 800163c:	4b19      	ldr	r3, [pc, #100]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 800163e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001640:	4a18      	ldr	r2, [pc, #96]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6313      	str	r3, [r2, #48]	@ 0x30
 8001648:	e023      	b.n	8001692 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	4a18      	ldr	r2, [pc, #96]	@ (80016b0 <GPIO_Clock_Enable+0xb0>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d106      	bne.n	8001660 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8001652:	4b14      	ldr	r3, [pc, #80]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001656:	4a13      	ldr	r2, [pc, #76]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001658:	f043 0308 	orr.w	r3, r3, #8
 800165c:	6313      	str	r3, [r2, #48]	@ 0x30
 800165e:	e018      	b.n	8001692 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	4a14      	ldr	r2, [pc, #80]	@ (80016b4 <GPIO_Clock_Enable+0xb4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d106      	bne.n	8001676 <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001668:	4b0e      	ldr	r3, [pc, #56]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 800166a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166c:	4a0d      	ldr	r2, [pc, #52]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	6313      	str	r3, [r2, #48]	@ 0x30
 8001674:	e00d      	b.n	8001692 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a0f      	ldr	r2, [pc, #60]	@ (80016b8 <GPIO_Clock_Enable+0xb8>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d106      	bne.n	800168c <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 800167e:	4b09      	ldr	r3, [pc, #36]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001682:	4a08      	ldr	r2, [pc, #32]	@ (80016a4 <GPIO_Clock_Enable+0xa4>)
 8001684:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001688:	6313      	str	r3, [r2, #48]	@ 0x30
 800168a:	e002      	b.n	8001692 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 800168c:	f04f 33ff 	mov.w	r3, #4294967295
 8001690:	e000      	b.n	8001694 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8001692:	2301      	movs	r3, #1
}
 8001694:	4618      	mov	r0, r3
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	40020000 	.word	0x40020000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40020800 	.word	0x40020800
 80016b0:	40020c00 	.word	0x40020c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40021c00 	.word	0x40021c00

080016bc <GPIO_Pin_Init>:


void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	4608      	mov	r0, r1
 80016c6:	4611      	mov	r1, r2
 80016c8:	461a      	mov	r2, r3
 80016ca:	4603      	mov	r3, r0
 80016cc:	70fb      	strb	r3, [r7, #3]
 80016ce:	460b      	mov	r3, r1
 80016d0:	70bb      	strb	r3, [r7, #2]
 80016d2:	4613      	mov	r3, r2
 80016d4:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff92 	bl	8001600 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	78b9      	ldrb	r1, [r7, #2]
 80016e2:	78fa      	ldrb	r2, [r7, #3]
 80016e4:	0052      	lsls	r2, r2, #1
 80016e6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ea:	431a      	orrs	r2, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	7879      	ldrb	r1, [r7, #1]
 80016f6:	78fa      	ldrb	r2, [r7, #3]
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	431a      	orrs	r2, r3
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	7c39      	ldrb	r1, [r7, #16]
 8001708:	78fa      	ldrb	r2, [r7, #3]
 800170a:	0052      	lsls	r2, r2, #1
 800170c:	fa01 f202 	lsl.w	r2, r1, r2
 8001710:	431a      	orrs	r2, r3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	7d39      	ldrb	r1, [r7, #20]
 800171c:	78fa      	ldrb	r2, [r7, #3]
 800171e:	0052      	lsls	r2, r2, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	431a      	orrs	r2, r3
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 800172a:	78fb      	ldrb	r3, [r7, #3]
 800172c:	2b07      	cmp	r3, #7
 800172e:	d80a      	bhi.n	8001746 <GPIO_Pin_Init+0x8a>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	6a1b      	ldr	r3, [r3, #32]
 8001734:	7e39      	ldrb	r1, [r7, #24]
 8001736:	78fa      	ldrb	r2, [r7, #3]
 8001738:	0092      	lsls	r2, r2, #2
 800173a:	fa01 f202 	lsl.w	r2, r1, r2
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001744:	e00a      	b.n	800175c <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800174a:	7e39      	ldrb	r1, [r7, #24]
 800174c:	78fa      	ldrb	r2, [r7, #3]
 800174e:	3a08      	subs	r2, #8
 8001750:	0092      	lsls	r2, r2, #2
 8001752:	fa01 f202 	lsl.w	r2, r1, r2
 8001756:	431a      	orrs	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800175c:	bf00      	nop
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <SPI_Clock_Enable>:

DMA_Config xDMA_TX;
DMA_Config xDMA_RX;

int8_t SPI_Clock_Enable(SPI_Config *config)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a14      	ldr	r2, [pc, #80]	@ (80017c8 <SPI_Clock_Enable+0x64>)
 8001776:	4293      	cmp	r3, r2
 8001778:	d105      	bne.n	8001786 <SPI_Clock_Enable+0x22>
 800177a:	4b14      	ldr	r3, [pc, #80]	@ (80017cc <SPI_Clock_Enable+0x68>)
 800177c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800177e:	4a13      	ldr	r2, [pc, #76]	@ (80017cc <SPI_Clock_Enable+0x68>)
 8001780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001784:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a11      	ldr	r2, [pc, #68]	@ (80017d0 <SPI_Clock_Enable+0x6c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d105      	bne.n	800179c <SPI_Clock_Enable+0x38>
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <SPI_Clock_Enable+0x68>)
 8001792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001794:	4a0d      	ldr	r2, [pc, #52]	@ (80017cc <SPI_Clock_Enable+0x68>)
 8001796:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800179a:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0c      	ldr	r2, [pc, #48]	@ (80017d4 <SPI_Clock_Enable+0x70>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d106      	bne.n	80017b4 <SPI_Clock_Enable+0x50>
 80017a6:	4b09      	ldr	r3, [pc, #36]	@ (80017cc <SPI_Clock_Enable+0x68>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	4a08      	ldr	r2, [pc, #32]	@ (80017cc <SPI_Clock_Enable+0x68>)
 80017ac:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80017b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80017b2:	e001      	b.n	80017b8 <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 80017b4:	23ff      	movs	r3, #255	@ 0xff
 80017b6:	73fb      	strb	r3, [r7, #15]
	return retval;
 80017b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	40013000 	.word	0x40013000
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40003800 	.word	0x40003800
 80017d4:	40003c00 	.word	0x40003c00

080017d8 <SPI_Pin>:
	return retval;
}


static void SPI_Pin(SPI_Config *config)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af04      	add	r7, sp, #16
 80017de:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4aaa      	ldr	r2, [pc, #680]	@ (8001a90 <SPI_Pin+0x2b8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	f040 8158 	bne.w	8001a9c <SPI_Pin+0x2c4>
	{
		if(config->mode == 0)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	89db      	ldrh	r3, [r3, #14]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	f040 8081 	bne.w	80018f8 <SPI_Pin+0x120>
		{
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	791b      	ldrb	r3, [r3, #4]
 80017fa:	461a      	mov	r2, r3
 80017fc:	230f      	movs	r3, #15
 80017fe:	429a      	cmp	r2, r3
 8001800:	d10d      	bne.n	800181e <SPI_Pin+0x46>
 8001802:	2002      	movs	r0, #2
 8001804:	2400      	movs	r4, #0
 8001806:	2303      	movs	r3, #3
 8001808:	2200      	movs	r2, #0
 800180a:	2105      	movs	r1, #5
 800180c:	9102      	str	r1, [sp, #8]
 800180e:	9201      	str	r2, [sp, #4]
 8001810:	9300      	str	r3, [sp, #0]
 8001812:	4623      	mov	r3, r4
 8001814:	4602      	mov	r2, r0
 8001816:	2105      	movs	r1, #5
 8001818:	489e      	ldr	r0, [pc, #632]	@ (8001a94 <SPI_Pin+0x2bc>)
 800181a:	f7ff ff4f 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	791b      	ldrb	r3, [r3, #4]
 8001822:	461a      	mov	r2, r3
 8001824:	2317      	movs	r3, #23
 8001826:	429a      	cmp	r2, r3
 8001828:	d10d      	bne.n	8001846 <SPI_Pin+0x6e>
 800182a:	2002      	movs	r0, #2
 800182c:	2400      	movs	r4, #0
 800182e:	2303      	movs	r3, #3
 8001830:	2200      	movs	r2, #0
 8001832:	2105      	movs	r1, #5
 8001834:	9102      	str	r1, [sp, #8]
 8001836:	9201      	str	r2, [sp, #4]
 8001838:	9300      	str	r3, [sp, #0]
 800183a:	4623      	mov	r3, r4
 800183c:	4602      	mov	r2, r0
 800183e:	2103      	movs	r1, #3
 8001840:	4895      	ldr	r0, [pc, #596]	@ (8001a98 <SPI_Pin+0x2c0>)
 8001842:	f7ff ff3b 	bl	80016bc <GPIO_Pin_Init>

			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	799b      	ldrb	r3, [r3, #6]
 800184a:	461a      	mov	r2, r3
 800184c:	2310      	movs	r3, #16
 800184e:	429a      	cmp	r2, r3
 8001850:	d10d      	bne.n	800186e <SPI_Pin+0x96>
 8001852:	2002      	movs	r0, #2
 8001854:	2400      	movs	r4, #0
 8001856:	2303      	movs	r3, #3
 8001858:	2200      	movs	r2, #0
 800185a:	2105      	movs	r1, #5
 800185c:	9102      	str	r1, [sp, #8]
 800185e:	9201      	str	r2, [sp, #4]
 8001860:	9300      	str	r3, [sp, #0]
 8001862:	4623      	mov	r3, r4
 8001864:	4602      	mov	r2, r0
 8001866:	2106      	movs	r1, #6
 8001868:	488a      	ldr	r0, [pc, #552]	@ (8001a94 <SPI_Pin+0x2bc>)
 800186a:	f7ff ff27 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	799b      	ldrb	r3, [r3, #6]
 8001872:	461a      	mov	r2, r3
 8001874:	2318      	movs	r3, #24
 8001876:	429a      	cmp	r2, r3
 8001878:	d10d      	bne.n	8001896 <SPI_Pin+0xbe>
 800187a:	2002      	movs	r0, #2
 800187c:	2400      	movs	r4, #0
 800187e:	2303      	movs	r3, #3
 8001880:	2200      	movs	r2, #0
 8001882:	2105      	movs	r1, #5
 8001884:	9102      	str	r1, [sp, #8]
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	4623      	mov	r3, r4
 800188c:	4602      	mov	r2, r0
 800188e:	2104      	movs	r1, #4
 8001890:	4881      	ldr	r0, [pc, #516]	@ (8001a98 <SPI_Pin+0x2c0>)
 8001892:	f7ff ff13 	bl	80016bc <GPIO_Pin_Init>

			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	795b      	ldrb	r3, [r3, #5]
 800189a:	461a      	mov	r2, r3
 800189c:	2311      	movs	r3, #17
 800189e:	429a      	cmp	r2, r3
 80018a0:	d10d      	bne.n	80018be <SPI_Pin+0xe6>
 80018a2:	2002      	movs	r0, #2
 80018a4:	2400      	movs	r4, #0
 80018a6:	2303      	movs	r3, #3
 80018a8:	2200      	movs	r2, #0
 80018aa:	2105      	movs	r1, #5
 80018ac:	9102      	str	r1, [sp, #8]
 80018ae:	9201      	str	r2, [sp, #4]
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	4623      	mov	r3, r4
 80018b4:	4602      	mov	r2, r0
 80018b6:	2107      	movs	r1, #7
 80018b8:	4876      	ldr	r0, [pc, #472]	@ (8001a94 <SPI_Pin+0x2bc>)
 80018ba:	f7ff feff 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	795b      	ldrb	r3, [r3, #5]
 80018c2:	461a      	mov	r2, r3
 80018c4:	2319      	movs	r3, #25
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d10d      	bne.n	80018e6 <SPI_Pin+0x10e>
 80018ca:	2002      	movs	r0, #2
 80018cc:	2400      	movs	r4, #0
 80018ce:	2303      	movs	r3, #3
 80018d0:	2200      	movs	r2, #0
 80018d2:	2105      	movs	r1, #5
 80018d4:	9102      	str	r1, [sp, #8]
 80018d6:	9201      	str	r2, [sp, #4]
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	4623      	mov	r3, r4
 80018dc:	4602      	mov	r2, r0
 80018de:	2105      	movs	r1, #5
 80018e0:	486d      	ldr	r0, [pc, #436]	@ (8001a98 <SPI_Pin+0x2c0>)
 80018e2:	f7ff feeb 	bl	80016bc <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	681a      	ldr	r2, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80018f4:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 80018f6:	e38b      	b.n	8002010 <SPI_Pin+0x838>
		else if(config->mode == 1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	89db      	ldrh	r3, [r3, #14]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	d160      	bne.n	80019c2 <SPI_Pin+0x1ea>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	791b      	ldrb	r3, [r3, #4]
 8001904:	461a      	mov	r2, r3
 8001906:	230f      	movs	r3, #15
 8001908:	429a      	cmp	r2, r3
 800190a:	d10d      	bne.n	8001928 <SPI_Pin+0x150>
 800190c:	2002      	movs	r0, #2
 800190e:	2400      	movs	r4, #0
 8001910:	2303      	movs	r3, #3
 8001912:	2200      	movs	r2, #0
 8001914:	2105      	movs	r1, #5
 8001916:	9102      	str	r1, [sp, #8]
 8001918:	9201      	str	r2, [sp, #4]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	4623      	mov	r3, r4
 800191e:	4602      	mov	r2, r0
 8001920:	2105      	movs	r1, #5
 8001922:	485c      	ldr	r0, [pc, #368]	@ (8001a94 <SPI_Pin+0x2bc>)
 8001924:	f7ff feca 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	791b      	ldrb	r3, [r3, #4]
 800192c:	461a      	mov	r2, r3
 800192e:	2317      	movs	r3, #23
 8001930:	429a      	cmp	r2, r3
 8001932:	d10d      	bne.n	8001950 <SPI_Pin+0x178>
 8001934:	2002      	movs	r0, #2
 8001936:	2400      	movs	r4, #0
 8001938:	2303      	movs	r3, #3
 800193a:	2200      	movs	r2, #0
 800193c:	2105      	movs	r1, #5
 800193e:	9102      	str	r1, [sp, #8]
 8001940:	9201      	str	r2, [sp, #4]
 8001942:	9300      	str	r3, [sp, #0]
 8001944:	4623      	mov	r3, r4
 8001946:	4602      	mov	r2, r0
 8001948:	2103      	movs	r1, #3
 800194a:	4853      	ldr	r0, [pc, #332]	@ (8001a98 <SPI_Pin+0x2c0>)
 800194c:	f7ff feb6 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PA7) GPIO_Pin_Init(GPIOA, 7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	795b      	ldrb	r3, [r3, #5]
 8001954:	461a      	mov	r2, r3
 8001956:	2311      	movs	r3, #17
 8001958:	429a      	cmp	r2, r3
 800195a:	d10d      	bne.n	8001978 <SPI_Pin+0x1a0>
 800195c:	2002      	movs	r0, #2
 800195e:	2400      	movs	r4, #0
 8001960:	2303      	movs	r3, #3
 8001962:	2200      	movs	r2, #0
 8001964:	2105      	movs	r1, #5
 8001966:	9102      	str	r1, [sp, #8]
 8001968:	9201      	str	r2, [sp, #4]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4623      	mov	r3, r4
 800196e:	4602      	mov	r2, r0
 8001970:	2107      	movs	r1, #7
 8001972:	4848      	ldr	r0, [pc, #288]	@ (8001a94 <SPI_Pin+0x2bc>)
 8001974:	f7ff fea2 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI1_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	795b      	ldrb	r3, [r3, #5]
 800197c:	461a      	mov	r2, r3
 800197e:	2319      	movs	r3, #25
 8001980:	429a      	cmp	r2, r3
 8001982:	d10d      	bne.n	80019a0 <SPI_Pin+0x1c8>
 8001984:	2002      	movs	r0, #2
 8001986:	2400      	movs	r4, #0
 8001988:	2303      	movs	r3, #3
 800198a:	2200      	movs	r2, #0
 800198c:	2105      	movs	r1, #5
 800198e:	9102      	str	r1, [sp, #8]
 8001990:	9201      	str	r2, [sp, #4]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	4623      	mov	r3, r4
 8001996:	4602      	mov	r2, r0
 8001998:	2105      	movs	r1, #5
 800199a:	483f      	ldr	r0, [pc, #252]	@ (8001a98 <SPI_Pin+0x2c0>)
 800199c:	f7ff fe8e 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80019ae:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681a      	ldr	r2, [r3, #0]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	e326      	b.n	8002010 <SPI_Pin+0x838>
		else if(config->mode == 2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	89db      	ldrh	r3, [r3, #14]
 80019c6:	2b02      	cmp	r3, #2
 80019c8:	f040 8322 	bne.w	8002010 <SPI_Pin+0x838>
			if(config->clock_pin == SPI1_CLK.PA5) GPIO_Pin_Init(GPIOA, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	791b      	ldrb	r3, [r3, #4]
 80019d0:	461a      	mov	r2, r3
 80019d2:	230f      	movs	r3, #15
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d10d      	bne.n	80019f4 <SPI_Pin+0x21c>
 80019d8:	2002      	movs	r0, #2
 80019da:	2400      	movs	r4, #0
 80019dc:	2303      	movs	r3, #3
 80019de:	2200      	movs	r2, #0
 80019e0:	2105      	movs	r1, #5
 80019e2:	9102      	str	r1, [sp, #8]
 80019e4:	9201      	str	r2, [sp, #4]
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	4623      	mov	r3, r4
 80019ea:	4602      	mov	r2, r0
 80019ec:	2105      	movs	r1, #5
 80019ee:	4829      	ldr	r0, [pc, #164]	@ (8001a94 <SPI_Pin+0x2bc>)
 80019f0:	f7ff fe64 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI1_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	791b      	ldrb	r3, [r3, #4]
 80019f8:	461a      	mov	r2, r3
 80019fa:	2317      	movs	r3, #23
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d10d      	bne.n	8001a1c <SPI_Pin+0x244>
 8001a00:	2002      	movs	r0, #2
 8001a02:	2400      	movs	r4, #0
 8001a04:	2303      	movs	r3, #3
 8001a06:	2200      	movs	r2, #0
 8001a08:	2105      	movs	r1, #5
 8001a0a:	9102      	str	r1, [sp, #8]
 8001a0c:	9201      	str	r2, [sp, #4]
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	4623      	mov	r3, r4
 8001a12:	4602      	mov	r2, r0
 8001a14:	2103      	movs	r1, #3
 8001a16:	4820      	ldr	r0, [pc, #128]	@ (8001a98 <SPI_Pin+0x2c0>)
 8001a18:	f7ff fe50 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PA6) GPIO_Pin_Init(GPIOA, 6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	799b      	ldrb	r3, [r3, #6]
 8001a20:	461a      	mov	r2, r3
 8001a22:	2310      	movs	r3, #16
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d10d      	bne.n	8001a44 <SPI_Pin+0x26c>
 8001a28:	2002      	movs	r0, #2
 8001a2a:	2400      	movs	r4, #0
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	2200      	movs	r2, #0
 8001a30:	2105      	movs	r1, #5
 8001a32:	9102      	str	r1, [sp, #8]
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	4623      	mov	r3, r4
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	2106      	movs	r1, #6
 8001a3e:	4815      	ldr	r0, [pc, #84]	@ (8001a94 <SPI_Pin+0x2bc>)
 8001a40:	f7ff fe3c 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI1_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_1);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	799b      	ldrb	r3, [r3, #6]
 8001a48:	461a      	mov	r2, r3
 8001a4a:	2318      	movs	r3, #24
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d10d      	bne.n	8001a6c <SPI_Pin+0x294>
 8001a50:	2002      	movs	r0, #2
 8001a52:	2400      	movs	r4, #0
 8001a54:	2303      	movs	r3, #3
 8001a56:	2200      	movs	r2, #0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	9102      	str	r1, [sp, #8]
 8001a5c:	9201      	str	r2, [sp, #4]
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	4623      	mov	r3, r4
 8001a62:	4602      	mov	r2, r0
 8001a64:	2104      	movs	r1, #4
 8001a66:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <SPI_Pin+0x2c0>)
 8001a68:	f7ff fe28 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681a      	ldr	r2, [r3, #0]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a7a:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001a8a:	601a      	str	r2, [r3, #0]
}
 8001a8c:	e2c0      	b.n	8002010 <SPI_Pin+0x838>
 8001a8e:	bf00      	nop
 8001a90:	40013000 	.word	0x40013000
 8001a94:	40020000 	.word	0x40020000
 8001a98:	40020400 	.word	0x40020400
	else if(config -> Port == SPI2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4aaa      	ldr	r2, [pc, #680]	@ (8001d4c <SPI_Pin+0x574>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	f040 8158 	bne.w	8001d58 <SPI_Pin+0x580>
		if(config->mode == 0)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	89db      	ldrh	r3, [r3, #14]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f040 8081 	bne.w	8001bb4 <SPI_Pin+0x3dc>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	791b      	ldrb	r3, [r3, #4]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	23d2      	movs	r3, #210	@ 0xd2
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d10d      	bne.n	8001ada <SPI_Pin+0x302>
 8001abe:	2002      	movs	r0, #2
 8001ac0:	2400      	movs	r4, #0
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	2105      	movs	r1, #5
 8001ac8:	9102      	str	r1, [sp, #8]
 8001aca:	9201      	str	r2, [sp, #4]
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	4623      	mov	r3, r4
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	210a      	movs	r1, #10
 8001ad4:	489e      	ldr	r0, [pc, #632]	@ (8001d50 <SPI_Pin+0x578>)
 8001ad6:	f7ff fdf1 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	791b      	ldrb	r3, [r3, #4]
 8001ade:	461a      	mov	r2, r3
 8001ae0:	23d5      	movs	r3, #213	@ 0xd5
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d10d      	bne.n	8001b02 <SPI_Pin+0x32a>
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	2400      	movs	r4, #0
 8001aea:	2303      	movs	r3, #3
 8001aec:	2200      	movs	r2, #0
 8001aee:	2105      	movs	r1, #5
 8001af0:	9102      	str	r1, [sp, #8]
 8001af2:	9201      	str	r2, [sp, #4]
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	4623      	mov	r3, r4
 8001af8:	4602      	mov	r2, r0
 8001afa:	210d      	movs	r1, #13
 8001afc:	4894      	ldr	r0, [pc, #592]	@ (8001d50 <SPI_Pin+0x578>)
 8001afe:	f7ff fddd 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	799b      	ldrb	r3, [r3, #6]
 8001b06:	461a      	mov	r2, r3
 8001b08:	23d6      	movs	r3, #214	@ 0xd6
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d10d      	bne.n	8001b2a <SPI_Pin+0x352>
 8001b0e:	2002      	movs	r0, #2
 8001b10:	2400      	movs	r4, #0
 8001b12:	2303      	movs	r3, #3
 8001b14:	2200      	movs	r2, #0
 8001b16:	2105      	movs	r1, #5
 8001b18:	9102      	str	r1, [sp, #8]
 8001b1a:	9201      	str	r2, [sp, #4]
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	4623      	mov	r3, r4
 8001b20:	4602      	mov	r2, r0
 8001b22:	210e      	movs	r1, #14
 8001b24:	488a      	ldr	r0, [pc, #552]	@ (8001d50 <SPI_Pin+0x578>)
 8001b26:	f7ff fdc9 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	799b      	ldrb	r3, [r3, #6]
 8001b2e:	461a      	mov	r2, r3
 8001b30:	2320      	movs	r3, #32
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d10d      	bne.n	8001b52 <SPI_Pin+0x37a>
 8001b36:	2002      	movs	r0, #2
 8001b38:	2400      	movs	r4, #0
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	2105      	movs	r1, #5
 8001b40:	9102      	str	r1, [sp, #8]
 8001b42:	9201      	str	r2, [sp, #4]
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	4623      	mov	r3, r4
 8001b48:	4602      	mov	r2, r0
 8001b4a:	2102      	movs	r1, #2
 8001b4c:	4881      	ldr	r0, [pc, #516]	@ (8001d54 <SPI_Pin+0x57c>)
 8001b4e:	f7ff fdb5 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PB15) GPIO_Pin_Init(GPIOB, 15, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	795b      	ldrb	r3, [r3, #5]
 8001b56:	461a      	mov	r2, r3
 8001b58:	23d7      	movs	r3, #215	@ 0xd7
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d10d      	bne.n	8001b7a <SPI_Pin+0x3a2>
 8001b5e:	2002      	movs	r0, #2
 8001b60:	2400      	movs	r4, #0
 8001b62:	2303      	movs	r3, #3
 8001b64:	2200      	movs	r2, #0
 8001b66:	2105      	movs	r1, #5
 8001b68:	9102      	str	r1, [sp, #8]
 8001b6a:	9201      	str	r2, [sp, #4]
 8001b6c:	9300      	str	r3, [sp, #0]
 8001b6e:	4623      	mov	r3, r4
 8001b70:	4602      	mov	r2, r0
 8001b72:	210f      	movs	r1, #15
 8001b74:	4876      	ldr	r0, [pc, #472]	@ (8001d50 <SPI_Pin+0x578>)
 8001b76:	f7ff fda1 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI2_MOSI.PC3) GPIO_Pin_Init(GPIOC, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	795b      	ldrb	r3, [r3, #5]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	2321      	movs	r3, #33	@ 0x21
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d10d      	bne.n	8001ba2 <SPI_Pin+0x3ca>
 8001b86:	2002      	movs	r0, #2
 8001b88:	2400      	movs	r4, #0
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2105      	movs	r1, #5
 8001b90:	9102      	str	r1, [sp, #8]
 8001b92:	9201      	str	r2, [sp, #4]
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	4623      	mov	r3, r4
 8001b98:	4602      	mov	r2, r0
 8001b9a:	2103      	movs	r1, #3
 8001b9c:	486d      	ldr	r0, [pc, #436]	@ (8001d54 <SPI_Pin+0x57c>)
 8001b9e:	f7ff fd8d 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001bb0:	601a      	str	r2, [r3, #0]
}
 8001bb2:	e22d      	b.n	8002010 <SPI_Pin+0x838>
		else if(config->mode == 1)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	89db      	ldrh	r3, [r3, #14]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d160      	bne.n	8001c7e <SPI_Pin+0x4a6>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	791b      	ldrb	r3, [r3, #4]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	23d2      	movs	r3, #210	@ 0xd2
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d10d      	bne.n	8001be4 <SPI_Pin+0x40c>
 8001bc8:	2002      	movs	r0, #2
 8001bca:	2400      	movs	r4, #0
 8001bcc:	2303      	movs	r3, #3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	2105      	movs	r1, #5
 8001bd2:	9102      	str	r1, [sp, #8]
 8001bd4:	9201      	str	r2, [sp, #4]
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	4623      	mov	r3, r4
 8001bda:	4602      	mov	r2, r0
 8001bdc:	210a      	movs	r1, #10
 8001bde:	485c      	ldr	r0, [pc, #368]	@ (8001d50 <SPI_Pin+0x578>)
 8001be0:	f7ff fd6c 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	791b      	ldrb	r3, [r3, #4]
 8001be8:	461a      	mov	r2, r3
 8001bea:	23d5      	movs	r3, #213	@ 0xd5
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d10d      	bne.n	8001c0c <SPI_Pin+0x434>
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	2400      	movs	r4, #0
 8001bf4:	2303      	movs	r3, #3
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2105      	movs	r1, #5
 8001bfa:	9102      	str	r1, [sp, #8]
 8001bfc:	9201      	str	r2, [sp, #4]
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	4623      	mov	r3, r4
 8001c02:	4602      	mov	r2, r0
 8001c04:	210d      	movs	r1, #13
 8001c06:	4852      	ldr	r0, [pc, #328]	@ (8001d50 <SPI_Pin+0x578>)
 8001c08:	f7ff fd58 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	791b      	ldrb	r3, [r3, #4]
 8001c10:	461a      	mov	r2, r3
 8001c12:	23d2      	movs	r3, #210	@ 0xd2
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d10d      	bne.n	8001c34 <SPI_Pin+0x45c>
 8001c18:	2002      	movs	r0, #2
 8001c1a:	2400      	movs	r4, #0
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2105      	movs	r1, #5
 8001c22:	9102      	str	r1, [sp, #8]
 8001c24:	9201      	str	r2, [sp, #4]
 8001c26:	9300      	str	r3, [sp, #0]
 8001c28:	4623      	mov	r3, r4
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	210a      	movs	r1, #10
 8001c2e:	4848      	ldr	r0, [pc, #288]	@ (8001d50 <SPI_Pin+0x578>)
 8001c30:	f7ff fd44 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	791b      	ldrb	r3, [r3, #4]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	23d5      	movs	r3, #213	@ 0xd5
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d10d      	bne.n	8001c5c <SPI_Pin+0x484>
 8001c40:	2002      	movs	r0, #2
 8001c42:	2400      	movs	r4, #0
 8001c44:	2303      	movs	r3, #3
 8001c46:	2200      	movs	r2, #0
 8001c48:	2105      	movs	r1, #5
 8001c4a:	9102      	str	r1, [sp, #8]
 8001c4c:	9201      	str	r2, [sp, #4]
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	4623      	mov	r3, r4
 8001c52:	4602      	mov	r2, r0
 8001c54:	210d      	movs	r1, #13
 8001c56:	483e      	ldr	r0, [pc, #248]	@ (8001d50 <SPI_Pin+0x578>)
 8001c58:	f7ff fd30 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001c6a:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001c7a:	601a      	str	r2, [r3, #0]
}
 8001c7c:	e1c8      	b.n	8002010 <SPI_Pin+0x838>
		else if(config->mode == 2)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	89db      	ldrh	r3, [r3, #14]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	f040 81c4 	bne.w	8002010 <SPI_Pin+0x838>
			if(config->clock_pin == SPI2_CLK.PB10) GPIO_Pin_Init(GPIOB, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	791b      	ldrb	r3, [r3, #4]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	23d2      	movs	r3, #210	@ 0xd2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d10d      	bne.n	8001cb0 <SPI_Pin+0x4d8>
 8001c94:	2002      	movs	r0, #2
 8001c96:	2400      	movs	r4, #0
 8001c98:	2303      	movs	r3, #3
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	9102      	str	r1, [sp, #8]
 8001ca0:	9201      	str	r2, [sp, #4]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4623      	mov	r3, r4
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	210a      	movs	r1, #10
 8001caa:	4829      	ldr	r0, [pc, #164]	@ (8001d50 <SPI_Pin+0x578>)
 8001cac:	f7ff fd06 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI2_CLK.PB13) GPIO_Pin_Init(GPIOB, 13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	791b      	ldrb	r3, [r3, #4]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	23d5      	movs	r3, #213	@ 0xd5
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d10d      	bne.n	8001cd8 <SPI_Pin+0x500>
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	2400      	movs	r4, #0
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	2105      	movs	r1, #5
 8001cc6:	9102      	str	r1, [sp, #8]
 8001cc8:	9201      	str	r2, [sp, #4]
 8001cca:	9300      	str	r3, [sp, #0]
 8001ccc:	4623      	mov	r3, r4
 8001cce:	4602      	mov	r2, r0
 8001cd0:	210d      	movs	r1, #13
 8001cd2:	481f      	ldr	r0, [pc, #124]	@ (8001d50 <SPI_Pin+0x578>)
 8001cd4:	f7ff fcf2 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PB14) GPIO_Pin_Init(GPIOB, 14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	799b      	ldrb	r3, [r3, #6]
 8001cdc:	461a      	mov	r2, r3
 8001cde:	23d6      	movs	r3, #214	@ 0xd6
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d10d      	bne.n	8001d00 <SPI_Pin+0x528>
 8001ce4:	2002      	movs	r0, #2
 8001ce6:	2400      	movs	r4, #0
 8001ce8:	2303      	movs	r3, #3
 8001cea:	2200      	movs	r2, #0
 8001cec:	2105      	movs	r1, #5
 8001cee:	9102      	str	r1, [sp, #8]
 8001cf0:	9201      	str	r2, [sp, #4]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	4623      	mov	r3, r4
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	210e      	movs	r1, #14
 8001cfa:	4815      	ldr	r0, [pc, #84]	@ (8001d50 <SPI_Pin+0x578>)
 8001cfc:	f7ff fcde 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI2_MISO.PC2) GPIO_Pin_Init(GPIOC, 2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_2);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	799b      	ldrb	r3, [r3, #6]
 8001d04:	461a      	mov	r2, r3
 8001d06:	2320      	movs	r3, #32
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d10d      	bne.n	8001d28 <SPI_Pin+0x550>
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	2400      	movs	r4, #0
 8001d10:	2303      	movs	r3, #3
 8001d12:	2200      	movs	r2, #0
 8001d14:	2105      	movs	r1, #5
 8001d16:	9102      	str	r1, [sp, #8]
 8001d18:	9201      	str	r2, [sp, #4]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	4623      	mov	r3, r4
 8001d1e:	4602      	mov	r2, r0
 8001d20:	2102      	movs	r1, #2
 8001d22:	480c      	ldr	r0, [pc, #48]	@ (8001d54 <SPI_Pin+0x57c>)
 8001d24:	f7ff fcca 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d36:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8001d46:	601a      	str	r2, [r3, #0]
}
 8001d48:	e162      	b.n	8002010 <SPI_Pin+0x838>
 8001d4a:	bf00      	nop
 8001d4c:	40003800 	.word	0x40003800
 8001d50:	40020400 	.word	0x40020400
 8001d54:	40020800 	.word	0x40020800
	else if(config -> Port == SPI3)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4aae      	ldr	r2, [pc, #696]	@ (8002018 <SPI_Pin+0x840>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	f040 8156 	bne.w	8002010 <SPI_Pin+0x838>
		if(config->mode == 0)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	89db      	ldrh	r3, [r3, #14]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	f040 8084 	bne.w	8001e76 <SPI_Pin+0x69e>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	791b      	ldrb	r3, [r3, #4]
 8001d72:	461a      	mov	r2, r3
 8001d74:	2317      	movs	r3, #23
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d10d      	bne.n	8001d96 <SPI_Pin+0x5be>
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	2400      	movs	r4, #0
 8001d7e:	2303      	movs	r3, #3
 8001d80:	2200      	movs	r2, #0
 8001d82:	2106      	movs	r1, #6
 8001d84:	9102      	str	r1, [sp, #8]
 8001d86:	9201      	str	r2, [sp, #4]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	4623      	mov	r3, r4
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	2103      	movs	r1, #3
 8001d90:	48a2      	ldr	r0, [pc, #648]	@ (800201c <SPI_Pin+0x844>)
 8001d92:	f7ff fc93 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	791b      	ldrb	r3, [r3, #4]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d10d      	bne.n	8001dc0 <SPI_Pin+0x5e8>
 8001da4:	2002      	movs	r0, #2
 8001da6:	2400      	movs	r4, #0
 8001da8:	2303      	movs	r3, #3
 8001daa:	2200      	movs	r2, #0
 8001dac:	2106      	movs	r1, #6
 8001dae:	9102      	str	r1, [sp, #8]
 8001db0:	9201      	str	r2, [sp, #4]
 8001db2:	9300      	str	r3, [sp, #0]
 8001db4:	4623      	mov	r3, r4
 8001db6:	4602      	mov	r2, r0
 8001db8:	210a      	movs	r1, #10
 8001dba:	4899      	ldr	r0, [pc, #612]	@ (8002020 <SPI_Pin+0x848>)
 8001dbc:	f7ff fc7e 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	799b      	ldrb	r3, [r3, #6]
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	2318      	movs	r3, #24
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d10d      	bne.n	8001de8 <SPI_Pin+0x610>
 8001dcc:	2002      	movs	r0, #2
 8001dce:	2400      	movs	r4, #0
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	2106      	movs	r1, #6
 8001dd6:	9102      	str	r1, [sp, #8]
 8001dd8:	9201      	str	r2, [sp, #4]
 8001dda:	9300      	str	r3, [sp, #0]
 8001ddc:	4623      	mov	r3, r4
 8001dde:	4602      	mov	r2, r0
 8001de0:	2104      	movs	r1, #4
 8001de2:	488e      	ldr	r0, [pc, #568]	@ (800201c <SPI_Pin+0x844>)
 8001de4:	f7ff fc6a 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	799b      	ldrb	r3, [r3, #6]
 8001dec:	461a      	mov	r2, r3
 8001dee:	f240 1337 	movw	r3, #311	@ 0x137
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d10d      	bne.n	8001e12 <SPI_Pin+0x63a>
 8001df6:	2002      	movs	r0, #2
 8001df8:	2400      	movs	r4, #0
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	2106      	movs	r1, #6
 8001e00:	9102      	str	r1, [sp, #8]
 8001e02:	9201      	str	r2, [sp, #4]
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	4623      	mov	r3, r4
 8001e08:	4602      	mov	r2, r0
 8001e0a:	210b      	movs	r1, #11
 8001e0c:	4884      	ldr	r0, [pc, #528]	@ (8002020 <SPI_Pin+0x848>)
 8001e0e:	f7ff fc55 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	795b      	ldrb	r3, [r3, #5]
 8001e16:	461a      	mov	r2, r3
 8001e18:	2319      	movs	r3, #25
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d10d      	bne.n	8001e3a <SPI_Pin+0x662>
 8001e1e:	2002      	movs	r0, #2
 8001e20:	2400      	movs	r4, #0
 8001e22:	2303      	movs	r3, #3
 8001e24:	2200      	movs	r2, #0
 8001e26:	2106      	movs	r1, #6
 8001e28:	9102      	str	r1, [sp, #8]
 8001e2a:	9201      	str	r2, [sp, #4]
 8001e2c:	9300      	str	r3, [sp, #0]
 8001e2e:	4623      	mov	r3, r4
 8001e30:	4602      	mov	r2, r0
 8001e32:	2105      	movs	r1, #5
 8001e34:	4879      	ldr	r0, [pc, #484]	@ (800201c <SPI_Pin+0x844>)
 8001e36:	f7ff fc41 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	795b      	ldrb	r3, [r3, #5]
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d10d      	bne.n	8001e64 <SPI_Pin+0x68c>
 8001e48:	2002      	movs	r0, #2
 8001e4a:	2400      	movs	r4, #0
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2106      	movs	r1, #6
 8001e52:	9102      	str	r1, [sp, #8]
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	4623      	mov	r3, r4
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	210c      	movs	r1, #12
 8001e5e:	4870      	ldr	r0, [pc, #448]	@ (8002020 <SPI_Pin+0x848>)
 8001e60:	f7ff fc2c 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e72:	601a      	str	r2, [r3, #0]
}
 8001e74:	e0cc      	b.n	8002010 <SPI_Pin+0x838>
		else if(config->mode == 1)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	89db      	ldrh	r3, [r3, #14]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d162      	bne.n	8001f44 <SPI_Pin+0x76c>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	461a      	mov	r2, r3
 8001e84:	2317      	movs	r3, #23
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d10d      	bne.n	8001ea6 <SPI_Pin+0x6ce>
 8001e8a:	2002      	movs	r0, #2
 8001e8c:	2400      	movs	r4, #0
 8001e8e:	2303      	movs	r3, #3
 8001e90:	2200      	movs	r2, #0
 8001e92:	2106      	movs	r1, #6
 8001e94:	9102      	str	r1, [sp, #8]
 8001e96:	9201      	str	r2, [sp, #4]
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	485e      	ldr	r0, [pc, #376]	@ (800201c <SPI_Pin+0x844>)
 8001ea2:	f7ff fc0b 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	791b      	ldrb	r3, [r3, #4]
 8001eaa:	461a      	mov	r2, r3
 8001eac:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d10d      	bne.n	8001ed0 <SPI_Pin+0x6f8>
 8001eb4:	2002      	movs	r0, #2
 8001eb6:	2400      	movs	r4, #0
 8001eb8:	2303      	movs	r3, #3
 8001eba:	2200      	movs	r2, #0
 8001ebc:	2106      	movs	r1, #6
 8001ebe:	9102      	str	r1, [sp, #8]
 8001ec0:	9201      	str	r2, [sp, #4]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	210a      	movs	r1, #10
 8001eca:	4855      	ldr	r0, [pc, #340]	@ (8002020 <SPI_Pin+0x848>)
 8001ecc:	f7ff fbf6 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PB4) GPIO_Pin_Init(GPIOB, 4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	799b      	ldrb	r3, [r3, #6]
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2318      	movs	r3, #24
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d10d      	bne.n	8001ef8 <SPI_Pin+0x720>
 8001edc:	2002      	movs	r0, #2
 8001ede:	2400      	movs	r4, #0
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2106      	movs	r1, #6
 8001ee6:	9102      	str	r1, [sp, #8]
 8001ee8:	9201      	str	r2, [sp, #4]
 8001eea:	9300      	str	r3, [sp, #0]
 8001eec:	4623      	mov	r3, r4
 8001eee:	4602      	mov	r2, r0
 8001ef0:	2104      	movs	r1, #4
 8001ef2:	484a      	ldr	r0, [pc, #296]	@ (800201c <SPI_Pin+0x844>)
 8001ef4:	f7ff fbe2 	bl	80016bc <GPIO_Pin_Init>
			if(config->miso_pin == SPI3_MISO.PC11) GPIO_Pin_Init(GPIOC,11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	799b      	ldrb	r3, [r3, #6]
 8001efc:	461a      	mov	r2, r3
 8001efe:	f240 1337 	movw	r3, #311	@ 0x137
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d10d      	bne.n	8001f22 <SPI_Pin+0x74a>
 8001f06:	2002      	movs	r0, #2
 8001f08:	2400      	movs	r4, #0
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	2106      	movs	r1, #6
 8001f10:	9102      	str	r1, [sp, #8]
 8001f12:	9201      	str	r2, [sp, #4]
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	4623      	mov	r3, r4
 8001f18:	4602      	mov	r2, r0
 8001f1a:	210b      	movs	r1, #11
 8001f1c:	4840      	ldr	r0, [pc, #256]	@ (8002020 <SPI_Pin+0x848>)
 8001f1e:	f7ff fbcd 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681a      	ldr	r2, [r3, #0]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f30:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001f40:	601a      	str	r2, [r3, #0]
}
 8001f42:	e065      	b.n	8002010 <SPI_Pin+0x838>
		else if(config->mode == 2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	89db      	ldrh	r3, [r3, #14]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d161      	bne.n	8002010 <SPI_Pin+0x838>
			if(config->clock_pin == SPI3_CLK.PB3) GPIO_Pin_Init(GPIOB, 3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	791b      	ldrb	r3, [r3, #4]
 8001f50:	461a      	mov	r2, r3
 8001f52:	2317      	movs	r3, #23
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d10d      	bne.n	8001f74 <SPI_Pin+0x79c>
 8001f58:	2002      	movs	r0, #2
 8001f5a:	2400      	movs	r4, #0
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	2200      	movs	r2, #0
 8001f60:	2106      	movs	r1, #6
 8001f62:	9102      	str	r1, [sp, #8]
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	9300      	str	r3, [sp, #0]
 8001f68:	4623      	mov	r3, r4
 8001f6a:	4602      	mov	r2, r0
 8001f6c:	2103      	movs	r1, #3
 8001f6e:	482b      	ldr	r0, [pc, #172]	@ (800201c <SPI_Pin+0x844>)
 8001f70:	f7ff fba4 	bl	80016bc <GPIO_Pin_Init>
			if(config->clock_pin == SPI3_CLK.PC10) GPIO_Pin_Init(GPIOC, 10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	791b      	ldrb	r3, [r3, #4]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 739b 	mov.w	r3, #310	@ 0x136
 8001f7e:	429a      	cmp	r2, r3
 8001f80:	d10d      	bne.n	8001f9e <SPI_Pin+0x7c6>
 8001f82:	2002      	movs	r0, #2
 8001f84:	2400      	movs	r4, #0
 8001f86:	2303      	movs	r3, #3
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2106      	movs	r1, #6
 8001f8c:	9102      	str	r1, [sp, #8]
 8001f8e:	9201      	str	r2, [sp, #4]
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	4623      	mov	r3, r4
 8001f94:	4602      	mov	r2, r0
 8001f96:	210a      	movs	r1, #10
 8001f98:	4821      	ldr	r0, [pc, #132]	@ (8002020 <SPI_Pin+0x848>)
 8001f9a:	f7ff fb8f 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PB5) GPIO_Pin_Init(GPIOB, 5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	795b      	ldrb	r3, [r3, #5]
 8001fa2:	461a      	mov	r2, r3
 8001fa4:	2319      	movs	r3, #25
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d10d      	bne.n	8001fc6 <SPI_Pin+0x7ee>
 8001faa:	2002      	movs	r0, #2
 8001fac:	2400      	movs	r4, #0
 8001fae:	2303      	movs	r3, #3
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	2106      	movs	r1, #6
 8001fb4:	9102      	str	r1, [sp, #8]
 8001fb6:	9201      	str	r2, [sp, #4]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4623      	mov	r3, r4
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	2105      	movs	r1, #5
 8001fc0:	4816      	ldr	r0, [pc, #88]	@ (800201c <SPI_Pin+0x844>)
 8001fc2:	f7ff fb7b 	bl	80016bc <GPIO_Pin_Init>
			if(config->mosi_pin == SPI3_MOSI.PC12) GPIO_Pin_Init(GPIOC, 12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.SPI_3);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	795b      	ldrb	r3, [r3, #5]
 8001fca:	461a      	mov	r2, r3
 8001fcc:	f44f 739c 	mov.w	r3, #312	@ 0x138
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d10d      	bne.n	8001ff0 <SPI_Pin+0x818>
 8001fd4:	2002      	movs	r0, #2
 8001fd6:	2400      	movs	r4, #0
 8001fd8:	2303      	movs	r3, #3
 8001fda:	2200      	movs	r2, #0
 8001fdc:	2106      	movs	r1, #6
 8001fde:	9102      	str	r1, [sp, #8]
 8001fe0:	9201      	str	r2, [sp, #4]
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	4623      	mov	r3, r4
 8001fe6:	4602      	mov	r2, r0
 8001fe8:	210c      	movs	r1, #12
 8001fea:	480d      	ldr	r0, [pc, #52]	@ (8002020 <SPI_Pin+0x848>)
 8001fec:	f7ff fb66 	bl	80016bc <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ffe:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800200e:	601a      	str	r2, [r3, #0]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bd90      	pop	{r4, r7, pc}
 8002018:	40003c00 	.word	0x40003c00
 800201c:	40020400 	.word	0x40020400
 8002020:	40020800 	.word	0x40020800

08002024 <SPI_Init>:


void SPI_Init(SPI_Config *config)
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	b087      	sub	sp, #28
 8002028:	af04      	add	r7, sp, #16
 800202a:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Type.Master){
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	8b1b      	ldrh	r3, [r3, #24]
 8002030:	2204      	movs	r2, #4
 8002032:	4293      	cmp	r3, r2
 8002034:	d10f      	bne.n	8002056 <SPI_Init+0x32>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.General_Purpose_Output, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6898      	ldr	r0, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	7b19      	ldrb	r1, [r3, #12]
 800203e:	2501      	movs	r5, #1
 8002040:	2600      	movs	r6, #0
 8002042:	2303      	movs	r3, #3
 8002044:	2201      	movs	r2, #1
 8002046:	2400      	movs	r4, #0
 8002048:	9402      	str	r4, [sp, #8]
 800204a:	9201      	str	r2, [sp, #4]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	4633      	mov	r3, r6
 8002050:	462a      	mov	r2, r5
 8002052:	f7ff fb33 	bl	80016bc <GPIO_Pin_Init>
	}
	if(config->type == SPI_Type.Slave){
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8b1b      	ldrh	r3, [r3, #24]
 800205a:	2200      	movs	r2, #0
 800205c:	4293      	cmp	r3, r2
 800205e:	d10f      	bne.n	8002080 <SPI_Init+0x5c>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, MODE.Input, Output_Type.Push_Pull, Speed.Very_High_Speed, Pull.Pull_Up, Alternate_Functions.None);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6898      	ldr	r0, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	7b19      	ldrb	r1, [r3, #12]
 8002068:	2500      	movs	r5, #0
 800206a:	2600      	movs	r6, #0
 800206c:	2303      	movs	r3, #3
 800206e:	2201      	movs	r2, #1
 8002070:	2400      	movs	r4, #0
 8002072:	9402      	str	r4, [sp, #8]
 8002074:	9201      	str	r2, [sp, #4]
 8002076:	9300      	str	r3, [sp, #0]
 8002078:	4633      	mov	r3, r6
 800207a:	462a      	mov	r2, r5
 800207c:	f7ff fb1e 	bl	80016bc <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fb6f 	bl	8001764 <SPI_Clock_Enable>
	SPI_Pin(config);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fba6 	bl	80017d8 <SPI_Pin>

	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	8b99      	ldrh	r1, [r3, #28]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	8b5b      	ldrh	r3, [r3, #26]
					config->type | config->frame_format |
					config->data_format | config->crc ;
 800209a:	430b      	orrs	r3, r1
 800209c:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	8b1b      	ldrh	r3, [r3, #24]
					config->data_format | config->crc ;
 80020a2:	430b      	orrs	r3, r1
 80020a4:	b299      	uxth	r1, r3
					config->type | config->frame_format |
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	8a9b      	ldrh	r3, [r3, #20]
					config->data_format | config->crc ;
 80020aa:	430b      	orrs	r3, r1
 80020ac:	b299      	uxth	r1, r3
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	8a5b      	ldrh	r3, [r3, #18]
 80020b2:	430b      	orrs	r3, r1
 80020b4:	b299      	uxth	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	8a1b      	ldrh	r3, [r3, #16]
 80020ba:	430b      	orrs	r3, r1
 80020bc:	b29b      	uxth	r3, r3
 80020be:	4619      	mov	r1, r3
	config->Port->CR1 |= config->clock_phase | config->clock_polarity |
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	601a      	str	r2, [r3, #0]
	config->Port->CR2 |= config->dma | config->interrupt;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8c19      	ldrh	r1, [r3, #32]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	8bdb      	ldrh	r3, [r3, #30]
 80020d6:	430b      	orrs	r3, r1
 80020d8:	b29b      	uxth	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	605a      	str	r2, [r3, #4]
	config->Port->CR1 |= config->mode | config->type;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	89d9      	ldrh	r1, [r3, #14]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	8b1b      	ldrh	r3, [r3, #24]
 80020f2:	430b      	orrs	r3, r1
 80020f4:	b29b      	uxth	r3, r3
 80020f6:	4619      	mov	r1, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

//	if(config->Port == SPI1)config->speed = (SystemCoreClock/2)/(2*2^(config->prescaler));
//	else config->speed = (SystemCoreClock/4)/(2*2^(config->prescaler));

	config -> Port -> CR1 |= config->prescaler << SPI_CR1_BR_Pos;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	8adb      	ldrh	r3, [r3, #22]
 800210a:	00da      	lsls	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
	config->Port -> CR1 &= ~SPI_CR1_SSM ;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002122:	601a      	str	r2, [r3, #0]
	config->Port -> CR2 |=  SPI_CR2_SSOE ;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	685a      	ldr	r2, [r3, #4]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f042 0204 	orr.w	r2, r2, #4
 8002132:	605a      	str	r2, [r3, #4]


	if(config->dma == SPI_DMA.RX_DMA_Enable)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	8c1b      	ldrh	r3, [r3, #32]
 8002138:	2201      	movs	r2, #1
 800213a:	4293      	cmp	r3, r2
 800213c:	d176      	bne.n	800222c <SPI_Init+0x208>
	{
		if(config->Port == SPI1)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a7a      	ldr	r2, [pc, #488]	@ (800232c <SPI_Init+0x308>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d122      	bne.n	800218e <SPI_Init+0x16a>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI1_RX;
 8002148:	4a79      	ldr	r2, [pc, #484]	@ (8002330 <SPI_Init+0x30c>)
 800214a:	4b7a      	ldr	r3, [pc, #488]	@ (8002334 <SPI_Init+0x310>)
 800214c:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA2;
 800214e:	4b79      	ldr	r3, [pc, #484]	@ (8002334 <SPI_Init+0x310>)
 8002150:	4a79      	ldr	r2, [pc, #484]	@ (8002338 <SPI_Init+0x314>)
 8002152:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 8002154:	2203      	movs	r2, #3
 8002156:	4b77      	ldr	r3, [pc, #476]	@ (8002334 <SPI_Init+0x310>)
 8002158:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 800215a:	2200      	movs	r2, #0
 800215c:	4b75      	ldr	r3, [pc, #468]	@ (8002334 <SPI_Init+0x310>)
 800215e:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8002160:	2220      	movs	r2, #32
 8002162:	4b74      	ldr	r3, [pc, #464]	@ (8002334 <SPI_Init+0x310>)
 8002164:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 8002166:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800216a:	4b72      	ldr	r3, [pc, #456]	@ (8002334 <SPI_Init+0x310>)
 800216c:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 800216e:	2200      	movs	r2, #0
 8002170:	4b70      	ldr	r3, [pc, #448]	@ (8002334 <SPI_Init+0x310>)
 8002172:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8002174:	2200      	movs	r2, #0
 8002176:	4b6f      	ldr	r3, [pc, #444]	@ (8002334 <SPI_Init+0x310>)
 8002178:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 800217a:	2200      	movs	r2, #0
 800217c:	4b6d      	ldr	r3, [pc, #436]	@ (8002334 <SPI_Init+0x310>)
 800217e:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8002180:	2200      	movs	r2, #0
 8002182:	4b6c      	ldr	r3, [pc, #432]	@ (8002334 <SPI_Init+0x310>)
 8002184:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 8002186:	486b      	ldr	r0, [pc, #428]	@ (8002334 <SPI_Init+0x310>)
 8002188:	f7fe fd3e 	bl	8000c08 <DMA_Init>
 800218c:	e04e      	b.n	800222c <SPI_Init+0x208>
		}
		else if(config->Port == SPI2)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a6a      	ldr	r2, [pc, #424]	@ (800233c <SPI_Init+0x318>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d122      	bne.n	80021de <SPI_Init+0x1ba>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI2_RX;
 8002198:	4a69      	ldr	r2, [pc, #420]	@ (8002340 <SPI_Init+0x31c>)
 800219a:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <SPI_Init+0x310>)
 800219c:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 800219e:	4b65      	ldr	r3, [pc, #404]	@ (8002334 <SPI_Init+0x310>)
 80021a0:	4a68      	ldr	r2, [pc, #416]	@ (8002344 <SPI_Init+0x320>)
 80021a2:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 80021a4:	2200      	movs	r2, #0
 80021a6:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <SPI_Init+0x310>)
 80021a8:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 80021aa:	2200      	movs	r2, #0
 80021ac:	4b61      	ldr	r3, [pc, #388]	@ (8002334 <SPI_Init+0x310>)
 80021ae:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 80021b0:	2220      	movs	r2, #32
 80021b2:	4b60      	ldr	r3, [pc, #384]	@ (8002334 <SPI_Init+0x310>)
 80021b4:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 80021b6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002334 <SPI_Init+0x310>)
 80021bc:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 80021be:	2200      	movs	r2, #0
 80021c0:	4b5c      	ldr	r3, [pc, #368]	@ (8002334 <SPI_Init+0x310>)
 80021c2:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80021c4:	2200      	movs	r2, #0
 80021c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002334 <SPI_Init+0x310>)
 80021c8:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80021ca:	2200      	movs	r2, #0
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <SPI_Init+0x310>)
 80021ce:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 80021d0:	2200      	movs	r2, #0
 80021d2:	4b58      	ldr	r3, [pc, #352]	@ (8002334 <SPI_Init+0x310>)
 80021d4:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 80021d6:	4857      	ldr	r0, [pc, #348]	@ (8002334 <SPI_Init+0x310>)
 80021d8:	f7fe fd16 	bl	8000c08 <DMA_Init>
 80021dc:	e026      	b.n	800222c <SPI_Init+0x208>
		}
		else if(config->Port == SPI3)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a59      	ldr	r2, [pc, #356]	@ (8002348 <SPI_Init+0x324>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d121      	bne.n	800222c <SPI_Init+0x208>
		{
			xDMA_RX.stream = SPI_DMA_Stream.SPI3_RX;
 80021e8:	4a58      	ldr	r2, [pc, #352]	@ (800234c <SPI_Init+0x328>)
 80021ea:	4b52      	ldr	r3, [pc, #328]	@ (8002334 <SPI_Init+0x310>)
 80021ec:	605a      	str	r2, [r3, #4]
			xDMA_RX.controller = DMA1;
 80021ee:	4b51      	ldr	r3, [pc, #324]	@ (8002334 <SPI_Init+0x310>)
 80021f0:	4a54      	ldr	r2, [pc, #336]	@ (8002344 <SPI_Init+0x320>)
 80021f2:	601a      	str	r2, [r3, #0]
			xDMA_RX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 80021f4:	2200      	movs	r2, #0
 80021f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002334 <SPI_Init+0x310>)
 80021f8:	609a      	str	r2, [r3, #8]
			xDMA_RX.circular_mode = DMA_Circular_Mode.Disable;
 80021fa:	2200      	movs	r2, #0
 80021fc:	4b4d      	ldr	r3, [pc, #308]	@ (8002334 <SPI_Init+0x310>)
 80021fe:	621a      	str	r2, [r3, #32]
			xDMA_RX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8002200:	2220      	movs	r2, #32
 8002202:	4b4c      	ldr	r3, [pc, #304]	@ (8002334 <SPI_Init+0x310>)
 8002204:	60da      	str	r2, [r3, #12]
			xDMA_RX.priority_level = DMA_Priority_Level.Very_high;
 8002206:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800220a:	4b4a      	ldr	r3, [pc, #296]	@ (8002334 <SPI_Init+0x310>)
 800220c:	615a      	str	r2, [r3, #20]
			xDMA_RX.memory_data_size = DMA_Memory_Data_Size.byte;
 800220e:	2200      	movs	r2, #0
 8002210:	4b48      	ldr	r3, [pc, #288]	@ (8002334 <SPI_Init+0x310>)
 8002212:	61da      	str	r2, [r3, #28]
			xDMA_RX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 8002214:	2200      	movs	r2, #0
 8002216:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <SPI_Init+0x310>)
 8002218:	619a      	str	r2, [r3, #24]
			xDMA_RX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 800221a:	2200      	movs	r2, #0
 800221c:	4b45      	ldr	r3, [pc, #276]	@ (8002334 <SPI_Init+0x310>)
 800221e:	611a      	str	r2, [r3, #16]
			xDMA_RX.interrupts =  DMA_Interrupts.Disable;
 8002220:	2200      	movs	r2, #0
 8002222:	4b44      	ldr	r3, [pc, #272]	@ (8002334 <SPI_Init+0x310>)
 8002224:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_RX);
 8002226:	4843      	ldr	r0, [pc, #268]	@ (8002334 <SPI_Init+0x310>)
 8002228:	f7fe fcee 	bl	8000c08 <DMA_Init>
		}
	}
	if(config->dma == SPI_DMA.TX_DMA_Enable)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	8c1b      	ldrh	r3, [r3, #32]
 8002230:	2202      	movs	r2, #2
 8002232:	4293      	cmp	r3, r2
 8002234:	d176      	bne.n	8002324 <SPI_Init+0x300>
	{
		if(config->Port == SPI1)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a3c      	ldr	r2, [pc, #240]	@ (800232c <SPI_Init+0x308>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d122      	bne.n	8002286 <SPI_Init+0x262>
		{
			xDMA_TX.stream = SPI_DMA_Stream.SPI1_TX;
 8002240:	4a43      	ldr	r2, [pc, #268]	@ (8002350 <SPI_Init+0x32c>)
 8002242:	4b44      	ldr	r3, [pc, #272]	@ (8002354 <SPI_Init+0x330>)
 8002244:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA2;
 8002246:	4b43      	ldr	r3, [pc, #268]	@ (8002354 <SPI_Init+0x330>)
 8002248:	4a3b      	ldr	r2, [pc, #236]	@ (8002338 <SPI_Init+0x314>)
 800224a:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI1_DMA_Channel;
 800224c:	2203      	movs	r2, #3
 800224e:	4b41      	ldr	r3, [pc, #260]	@ (8002354 <SPI_Init+0x330>)
 8002250:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 8002252:	2200      	movs	r2, #0
 8002254:	4b3f      	ldr	r3, [pc, #252]	@ (8002354 <SPI_Init+0x330>)
 8002256:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 8002258:	2220      	movs	r2, #32
 800225a:	4b3e      	ldr	r3, [pc, #248]	@ (8002354 <SPI_Init+0x330>)
 800225c:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 800225e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002262:	4b3c      	ldr	r3, [pc, #240]	@ (8002354 <SPI_Init+0x330>)
 8002264:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 8002266:	2200      	movs	r2, #0
 8002268:	4b3a      	ldr	r3, [pc, #232]	@ (8002354 <SPI_Init+0x330>)
 800226a:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 800226c:	2200      	movs	r2, #0
 800226e:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <SPI_Init+0x330>)
 8002270:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8002272:	2200      	movs	r2, #0
 8002274:	4b37      	ldr	r3, [pc, #220]	@ (8002354 <SPI_Init+0x330>)
 8002276:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 8002278:	2200      	movs	r2, #0
 800227a:	4b36      	ldr	r3, [pc, #216]	@ (8002354 <SPI_Init+0x330>)
 800227c:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 800227e:	4835      	ldr	r0, [pc, #212]	@ (8002354 <SPI_Init+0x330>)
 8002280:	f7fe fcc2 	bl	8000c08 <DMA_Init>
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
			DMA_Init(&xDMA_TX);
		}
	}
}
 8002284:	e04e      	b.n	8002324 <SPI_Init+0x300>
		else if(config->Port == SPI2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2c      	ldr	r2, [pc, #176]	@ (800233c <SPI_Init+0x318>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d122      	bne.n	80022d6 <SPI_Init+0x2b2>
			xDMA_TX.stream = SPI_DMA_Stream.SPI2_TX;
 8002290:	4a31      	ldr	r2, [pc, #196]	@ (8002358 <SPI_Init+0x334>)
 8002292:	4b30      	ldr	r3, [pc, #192]	@ (8002354 <SPI_Init+0x330>)
 8002294:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 8002296:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <SPI_Init+0x330>)
 8002298:	4a2a      	ldr	r2, [pc, #168]	@ (8002344 <SPI_Init+0x320>)
 800229a:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI2_DMA_Channel;
 800229c:	2200      	movs	r2, #0
 800229e:	4b2d      	ldr	r3, [pc, #180]	@ (8002354 <SPI_Init+0x330>)
 80022a0:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 80022a2:	2200      	movs	r2, #0
 80022a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002354 <SPI_Init+0x330>)
 80022a6:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 80022a8:	2220      	movs	r2, #32
 80022aa:	4b2a      	ldr	r3, [pc, #168]	@ (8002354 <SPI_Init+0x330>)
 80022ac:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 80022ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80022b2:	4b28      	ldr	r3, [pc, #160]	@ (8002354 <SPI_Init+0x330>)
 80022b4:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 80022b6:	2200      	movs	r2, #0
 80022b8:	4b26      	ldr	r3, [pc, #152]	@ (8002354 <SPI_Init+0x330>)
 80022ba:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 80022bc:	2200      	movs	r2, #0
 80022be:	4b25      	ldr	r3, [pc, #148]	@ (8002354 <SPI_Init+0x330>)
 80022c0:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 80022c2:	2200      	movs	r2, #0
 80022c4:	4b23      	ldr	r3, [pc, #140]	@ (8002354 <SPI_Init+0x330>)
 80022c6:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 80022c8:	2200      	movs	r2, #0
 80022ca:	4b22      	ldr	r3, [pc, #136]	@ (8002354 <SPI_Init+0x330>)
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 80022ce:	4821      	ldr	r0, [pc, #132]	@ (8002354 <SPI_Init+0x330>)
 80022d0:	f7fe fc9a 	bl	8000c08 <DMA_Init>
}
 80022d4:	e026      	b.n	8002324 <SPI_Init+0x300>
		else if(config->Port == SPI3)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a1b      	ldr	r2, [pc, #108]	@ (8002348 <SPI_Init+0x324>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d121      	bne.n	8002324 <SPI_Init+0x300>
			xDMA_TX.stream = SPI_DMA_Stream.SPI3_TX;
 80022e0:	4a1e      	ldr	r2, [pc, #120]	@ (800235c <SPI_Init+0x338>)
 80022e2:	4b1c      	ldr	r3, [pc, #112]	@ (8002354 <SPI_Init+0x330>)
 80022e4:	605a      	str	r2, [r3, #4]
			xDMA_TX.controller = DMA1;
 80022e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002354 <SPI_Init+0x330>)
 80022e8:	4a16      	ldr	r2, [pc, #88]	@ (8002344 <SPI_Init+0x320>)
 80022ea:	601a      	str	r2, [r3, #0]
			xDMA_TX.channel = SPI_DMA_Stream.SPI3_DMA_Channel;
 80022ec:	2200      	movs	r2, #0
 80022ee:	4b19      	ldr	r3, [pc, #100]	@ (8002354 <SPI_Init+0x330>)
 80022f0:	609a      	str	r2, [r3, #8]
			xDMA_TX.circular_mode = DMA_Circular_Mode.Disable;
 80022f2:	2200      	movs	r2, #0
 80022f4:	4b17      	ldr	r3, [pc, #92]	@ (8002354 <SPI_Init+0x330>)
 80022f6:	621a      	str	r2, [r3, #32]
			xDMA_TX.flow_control = DMA_Flow_Control.Peripheral_Control;
 80022f8:	2220      	movs	r2, #32
 80022fa:	4b16      	ldr	r3, [pc, #88]	@ (8002354 <SPI_Init+0x330>)
 80022fc:	60da      	str	r2, [r3, #12]
			xDMA_TX.priority_level = DMA_Priority_Level.Very_high;
 80022fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002302:	4b14      	ldr	r3, [pc, #80]	@ (8002354 <SPI_Init+0x330>)
 8002304:	615a      	str	r2, [r3, #20]
			xDMA_TX.memory_data_size = DMA_Memory_Data_Size.byte;
 8002306:	2200      	movs	r2, #0
 8002308:	4b12      	ldr	r3, [pc, #72]	@ (8002354 <SPI_Init+0x330>)
 800230a:	61da      	str	r2, [r3, #28]
			xDMA_TX.peripheral_data_size = DMA_Peripheral_Data_Size.byte;
 800230c:	2200      	movs	r2, #0
 800230e:	4b11      	ldr	r3, [pc, #68]	@ (8002354 <SPI_Init+0x330>)
 8002310:	619a      	str	r2, [r3, #24]
			xDMA_TX.transfer_direction = DMA_Transfer_Direction.Peripheral_to_memory;
 8002312:	2200      	movs	r2, #0
 8002314:	4b0f      	ldr	r3, [pc, #60]	@ (8002354 <SPI_Init+0x330>)
 8002316:	611a      	str	r2, [r3, #16]
			xDMA_TX.interrupts =  DMA_Interrupts.Disable;
 8002318:	2200      	movs	r2, #0
 800231a:	4b0e      	ldr	r3, [pc, #56]	@ (8002354 <SPI_Init+0x330>)
 800231c:	625a      	str	r2, [r3, #36]	@ 0x24
			DMA_Init(&xDMA_TX);
 800231e:	480d      	ldr	r0, [pc, #52]	@ (8002354 <SPI_Init+0x330>)
 8002320:	f7fe fc72 	bl	8000c08 <DMA_Init>
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800232c:	40013000 	.word	0x40013000
 8002330:	40026410 	.word	0x40026410
 8002334:	2000006c 	.word	0x2000006c
 8002338:	40026400 	.word	0x40026400
 800233c:	40003800 	.word	0x40003800
 8002340:	40026058 	.word	0x40026058
 8002344:	40026000 	.word	0x40026000
 8002348:	40003c00 	.word	0x40003c00
 800234c:	40026040 	.word	0x40026040
 8002350:	40026458 	.word	0x40026458
 8002354:	20000038 	.word	0x20000038
 8002358:	40026070 	.word	0x40026070
 800235c:	400260b8 	.word	0x400260b8

08002360 <SPI_Enable>:

void SPI_Enable(SPI_Config *config)
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <SPI_TRX_Byte>:
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
}


uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	460b      	mov	r3, r1
 800238e:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8002394:	bf00      	nop
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f8      	beq.n	8002396 <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	887a      	ldrh	r2, [r7, #2]
 80023aa:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 80023ac:	bf00      	nop
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0f8      	beq.n	80023ae <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 80023c6:	bf00      	nop
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f8      	beq.n	80023c8 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 80023d6:	bf00      	nop
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d1f8      	bne.n	80023d8 <SPI_TRX_Byte+0x54>
	return temp;
 80023e6:	89fb      	ldrh	r3, [r7, #14]
 80023e8:	b29b      	uxth	r3, r3
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3714      	adds	r7, #20
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <SPI_NSS_High>:
	}

}

void SPI_NSS_High(SPI_Config *config)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	7b1b      	ldrb	r3, [r3, #12]
 8002406:	4619      	mov	r1, r3
 8002408:	4610      	mov	r0, r2
 800240a:	f7ff f8d2 	bl	80015b2 <GPIO_Pin_High>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <SPI_NSS_Low>:

void SPI_NSS_Low(SPI_Config *config)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	689a      	ldr	r2, [r3, #8]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	7b1b      	ldrb	r3, [r3, #12]
 8002426:	4619      	mov	r1, r3
 8002428:	4610      	mov	r0, r2
 800242a:	f7ff f8d4 	bl	80015d6 <GPIO_Pin_Low>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002438:	b480      	push	{r7}
 800243a:	b083      	sub	sp, #12
 800243c:	af00      	add	r7, sp, #0
 800243e:	4603      	mov	r3, r0
 8002440:	6039      	str	r1, [r7, #0]
 8002442:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002444:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002448:	2b00      	cmp	r3, #0
 800244a:	db0a      	blt.n	8002462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	b2da      	uxtb	r2, r3
 8002450:	490c      	ldr	r1, [pc, #48]	@ (8002484 <__NVIC_SetPriority+0x4c>)
 8002452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002456:	0112      	lsls	r2, r2, #4
 8002458:	b2d2      	uxtb	r2, r2
 800245a:	440b      	add	r3, r1
 800245c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002460:	e00a      	b.n	8002478 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	b2da      	uxtb	r2, r3
 8002466:	4908      	ldr	r1, [pc, #32]	@ (8002488 <__NVIC_SetPriority+0x50>)
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	f003 030f 	and.w	r3, r3, #15
 800246e:	3b04      	subs	r3, #4
 8002470:	0112      	lsls	r2, r2, #4
 8002472:	b2d2      	uxtb	r2, r2
 8002474:	440b      	add	r3, r1
 8002476:	761a      	strb	r2, [r3, #24]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	e000e100 	.word	0xe000e100
 8002488:	e000ed00 	.word	0xe000ed00

0800248c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	3b01      	subs	r3, #1
 8002498:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800249c:	d301      	bcc.n	80024a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249e:	2301      	movs	r3, #1
 80024a0:	e00f      	b.n	80024c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024a2:	4a0a      	ldr	r2, [pc, #40]	@ (80024cc <SysTick_Config+0x40>)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	3b01      	subs	r3, #1
 80024a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024aa:	210f      	movs	r1, #15
 80024ac:	f04f 30ff 	mov.w	r0, #4294967295
 80024b0:	f7ff ffc2 	bl	8002438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b4:	4b05      	ldr	r3, [pc, #20]	@ (80024cc <SysTick_Config+0x40>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ba:	4b04      	ldr	r3, [pc, #16]	@ (80024cc <SysTick_Config+0x40>)
 80024bc:	2207      	movs	r2, #7
 80024be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3708      	adds	r7, #8
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	e000e010 	.word	0xe000e010

080024d0 <MCU_Clock_Setup>:
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b082      	sub	sp, #8
 80024d4:	af00      	add	r7, sp, #0
	uint8_t pll_m = 4;
 80024d6:	2304      	movs	r3, #4
 80024d8:	71fb      	strb	r3, [r7, #7]
	uint8_t pll_n = 168; //192
 80024da:	23a8      	movs	r3, #168	@ 0xa8
 80024dc:	71bb      	strb	r3, [r7, #6]
	uint8_t pll_p = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	717b      	strb	r3, [r7, #5]
	uint8_t pll_q = 7;
 80024e2:	2307      	movs	r3, #7
 80024e4:	713b      	strb	r3, [r7, #4]
	RCC->PLLCFGR = 0x00000000;
 80024e6:	4b3d      	ldr	r3, [pc, #244]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 80024ec:	4b3b      	ldr	r3, [pc, #236]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a3a      	ldr	r2, [pc, #232]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 80024f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f6:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 80024f8:	bf00      	nop
 80024fa:	4b38      	ldr	r3, [pc, #224]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f9      	beq.n	80024fa <MCU_Clock_Setup+0x2a>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8002506:	4b35      	ldr	r3, [pc, #212]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4a34      	ldr	r2, [pc, #208]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 800250c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002510:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8002512:	4b33      	ldr	r3, [pc, #204]	@ (80025e0 <MCU_Clock_Setup+0x110>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a32      	ldr	r2, [pc, #200]	@ (80025e0 <MCU_Clock_Setup+0x110>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800251c:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800251e:	4b31      	ldr	r3, [pc, #196]	@ (80025e4 <MCU_Clock_Setup+0x114>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a30      	ldr	r2, [pc, #192]	@ (80025e4 <MCU_Clock_Setup+0x114>)
 8002524:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002528:	f043 0305 	orr.w	r3, r3, #5
 800252c:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800252e:	4b2b      	ldr	r3, [pc, #172]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	793a      	ldrb	r2, [r7, #4]
 8002534:	0611      	lsls	r1, r2, #24
 8002536:	797a      	ldrb	r2, [r7, #5]
 8002538:	0412      	lsls	r2, r2, #16
 800253a:	4311      	orrs	r1, r2
 800253c:	79ba      	ldrb	r2, [r7, #6]
 800253e:	0192      	lsls	r2, r2, #6
 8002540:	4311      	orrs	r1, r2
 8002542:	79fa      	ldrb	r2, [r7, #7]
 8002544:	430a      	orrs	r2, r1
 8002546:	4611      	mov	r1, r2
 8002548:	4a24      	ldr	r2, [pc, #144]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 800254a:	430b      	orrs	r3, r1
 800254c:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800254e:	4b23      	ldr	r3, [pc, #140]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	4a22      	ldr	r2, [pc, #136]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002558:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 800255a:	4b20      	ldr	r3, [pc, #128]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 800255c:	4a1f      	ldr	r2, [pc, #124]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 800255e:	689b      	ldr	r3, [r3, #8]
 8002560:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 8002562:	4b1e      	ldr	r3, [pc, #120]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	4a1d      	ldr	r2, [pc, #116]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002568:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800256c:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 800256e:	4b1b      	ldr	r3, [pc, #108]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	4a1a      	ldr	r2, [pc, #104]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002574:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002578:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 800257a:	4b18      	ldr	r3, [pc, #96]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a17      	ldr	r2, [pc, #92]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002580:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002584:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 8002586:	bf00      	nop
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f9      	beq.n	8002588 <MCU_Clock_Setup+0xb8>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 8002594:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	4a10      	ldr	r2, [pc, #64]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 800259a:	f043 0302 	orr.w	r3, r3, #2
 800259e:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80025a0:	bf00      	nop
 80025a2:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d1f9      	bne.n	80025a2 <MCU_Clock_Setup+0xd2>
	SystemCoreClockUpdate();
 80025ae:	f000 f9ef 	bl	8002990 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80025b2:	4b0d      	ldr	r3, [pc, #52]	@ (80025e8 <MCU_Clock_Setup+0x118>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	08db      	lsrs	r3, r3, #3
 80025b8:	4a0c      	ldr	r2, [pc, #48]	@ (80025ec <MCU_Clock_Setup+0x11c>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	085b      	lsrs	r3, r3, #1
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff63 	bl	800248c <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 80025c6:	4b05      	ldr	r3, [pc, #20]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ca:	4a04      	ldr	r2, [pc, #16]	@ (80025dc <MCU_Clock_Setup+0x10c>)
 80025cc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025d0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80025d2:	bf00      	nop
 80025d4:	3708      	adds	r7, #8
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	40023800 	.word	0x40023800
 80025e0:	40007000 	.word	0x40007000
 80025e4:	40023c00 	.word	0x40023c00
 80025e8:	20000000 	.word	0x20000000
 80025ec:	18618619 	.word	0x18618619

080025f0 <Delay_Config>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 80025f4:	4b09      	ldr	r3, [pc, #36]	@ (800261c <Delay_Config+0x2c>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 80025fa:	4b08      	ldr	r3, [pc, #32]	@ (800261c <Delay_Config+0x2c>)
 80025fc:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 8002600:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <Delay_Config+0x2c>)
 8002604:	2200      	movs	r2, #0
 8002606:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8002608:	4b04      	ldr	r3, [pc, #16]	@ (800261c <Delay_Config+0x2c>)
 800260a:	2205      	movs	r2, #5
 800260c:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800260e:	2300      	movs	r3, #0
}
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	e000e010 	.word	0xe000e010

08002620 <Delay_us>:
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	ed87 0a01 	vstr	s0, [r7, #4]
	SysTick->LOAD = 167 * us;
 800262a:	edd7 7a01 	vldr	s15, [r7, #4]
 800262e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8002664 <Delay_us+0x44>
 8002632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002636:	4b0c      	ldr	r3, [pc, #48]	@ (8002668 <Delay_us+0x48>)
 8002638:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800263c:	ee17 2a90 	vmov	r2, s15
 8002640:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 8002642:	4b09      	ldr	r3, [pc, #36]	@ (8002668 <Delay_us+0x48>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
	while((SysTick->CTRL & 0x00010000) == 0);
 8002648:	bf00      	nop
 800264a:	4b07      	ldr	r3, [pc, #28]	@ (8002668 <Delay_us+0x48>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d0f9      	beq.n	800264a <Delay_us+0x2a>
	return (0UL);                                                     /* Function successful */
 8002656:	2300      	movs	r3, #0
}
 8002658:	4618      	mov	r0, r3
 800265a:	370c      	adds	r7, #12
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr
 8002664:	43270000 	.word	0x43270000
 8002668:	e000e010 	.word	0xe000e010

0800266c <Delay_ms>:
{
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8002676:	edd7 7a01 	vldr	s15, [r7, #4]
 800267a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80026c0 <Delay_ms+0x54>
 800267e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002686:	ee17 3a90 	vmov	r3, s15
 800268a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 800268c:	4a0d      	ldr	r2, [pc, #52]	@ (80026c4 <Delay_ms+0x58>)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8002692:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <Delay_ms+0x58>)
 8002694:	2200      	movs	r2, #0
 8002696:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <Delay_ms+0x58>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a09      	ldr	r2, [pc, #36]	@ (80026c4 <Delay_ms+0x58>)
 800269e:	f043 0301 	orr.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 80026a4:	bf00      	nop
 80026a6:	4b07      	ldr	r3, [pc, #28]	@ (80026c4 <Delay_ms+0x58>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d0f9      	beq.n	80026a6 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	48241000 	.word	0x48241000
 80026c4:	e000e010 	.word	0xe000e010

080026c8 <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b082      	sub	sp, #8
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026d6:	fb02 f303 	mul.w	r3, r2, r3
 80026da:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 80026dc:	e006      	b.n	80026ec <Delay_s+0x24>
	{
		Delay_ms(1);
 80026de:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80026e2:	f7ff ffc3 	bl	800266c <Delay_ms>
	for (; s>0; s--)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	3b01      	subs	r3, #1
 80026ea:	607b      	str	r3, [r7, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f5      	bne.n	80026de <Delay_s+0x16>
	}
	return (0UL);
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3708      	adds	r7, #8
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	0000      	movs	r0, r0
	...

08002700 <main>:
#include "math.h"

GC9A01_Typedef display;

int main(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 8002706:	f7ff fee3 	bl	80024d0 <MCU_Clock_Setup>
	Delay_Config();
 800270a:	f7ff ff71 	bl	80025f0 <Delay_Config>
	Console_Init(USART1, 9600);
 800270e:	f44f 5116 	mov.w	r1, #9600	@ 0x2580
 8002712:	488d      	ldr	r0, [pc, #564]	@ (8002948 <main+0x248>)
 8002714:	f7fe fa2c 	bl	8000b70 <Console_Init>
	Delay_s(2);
 8002718:	2002      	movs	r0, #2
 800271a:	f7ff ffd5 	bl	80026c8 <Delay_s>

	// test this part
//	GC9A01_DeInit(&display);

	display.SPI_Driver.NSS_Pin = 1;
 800271e:	4b8b      	ldr	r3, [pc, #556]	@ (800294c <main+0x24c>)
 8002720:	2201      	movs	r2, #1
 8002722:	731a      	strb	r2, [r3, #12]
	display.SPI_Driver.NSS_Port = GPIOA;
 8002724:	4b89      	ldr	r3, [pc, #548]	@ (800294c <main+0x24c>)
 8002726:	4a8a      	ldr	r2, [pc, #552]	@ (8002950 <main+0x250>)
 8002728:	609a      	str	r2, [r3, #8]
	display.SPI_Driver.Port = SPI1;
 800272a:	4b88      	ldr	r3, [pc, #544]	@ (800294c <main+0x24c>)
 800272c:	4a89      	ldr	r2, [pc, #548]	@ (8002954 <main+0x254>)
 800272e:	601a      	str	r2, [r3, #0]
	display.SPI_Driver.clock_phase = SPI_Clock_Phase.Low_0;
 8002730:	2200      	movs	r2, #0
 8002732:	4b86      	ldr	r3, [pc, #536]	@ (800294c <main+0x24c>)
 8002734:	839a      	strh	r2, [r3, #28]
	display.SPI_Driver.clock_pin = SPI1_CLK.PA5;
 8002736:	230f      	movs	r3, #15
 8002738:	b2da      	uxtb	r2, r3
 800273a:	4b84      	ldr	r3, [pc, #528]	@ (800294c <main+0x24c>)
 800273c:	711a      	strb	r2, [r3, #4]
	display.SPI_Driver.clock_polarity = SPI_Clock_Polarity.Low_0;
 800273e:	2200      	movs	r2, #0
 8002740:	4b82      	ldr	r3, [pc, #520]	@ (800294c <main+0x24c>)
 8002742:	835a      	strh	r2, [r3, #26]
	display.SPI_Driver.crc = SPI_CRC.Disable;
 8002744:	2200      	movs	r2, #0
 8002746:	4b81      	ldr	r3, [pc, #516]	@ (800294c <main+0x24c>)
 8002748:	821a      	strh	r2, [r3, #16]
	display.SPI_Driver.data_format = SPI_Data_Format.Bit8;
 800274a:	2200      	movs	r2, #0
 800274c:	4b7f      	ldr	r3, [pc, #508]	@ (800294c <main+0x24c>)
 800274e:	825a      	strh	r2, [r3, #18]
	display.SPI_Driver.dma = SPI_DMA.RX_DMA_Disable;
 8002750:	2300      	movs	r3, #0
 8002752:	461a      	mov	r2, r3
 8002754:	4b7d      	ldr	r3, [pc, #500]	@ (800294c <main+0x24c>)
 8002756:	841a      	strh	r2, [r3, #32]
	display.SPI_Driver.frame_format = SPI_Frame_Format.MSB_First;
 8002758:	2200      	movs	r2, #0
 800275a:	4b7c      	ldr	r3, [pc, #496]	@ (800294c <main+0x24c>)
 800275c:	829a      	strh	r2, [r3, #20]
	display.SPI_Driver.interrupt = SPI_Interrupt.Disable;
 800275e:	2300      	movs	r3, #0
 8002760:	461a      	mov	r2, r3
 8002762:	4b7a      	ldr	r3, [pc, #488]	@ (800294c <main+0x24c>)
 8002764:	83da      	strh	r2, [r3, #30]
	display.SPI_Driver.miso_pin = SPI1_MISO.PA6;
 8002766:	2310      	movs	r3, #16
 8002768:	b2da      	uxtb	r2, r3
 800276a:	4b78      	ldr	r3, [pc, #480]	@ (800294c <main+0x24c>)
 800276c:	719a      	strb	r2, [r3, #6]
	display.SPI_Driver.mode = SPI_Mode.Full_Duplex_Master;
 800276e:	2300      	movs	r3, #0
 8002770:	461a      	mov	r2, r3
 8002772:	4b76      	ldr	r3, [pc, #472]	@ (800294c <main+0x24c>)
 8002774:	81da      	strh	r2, [r3, #14]
	display.SPI_Driver.mosi_pin = SPI1_MOSI.PA7;
 8002776:	2311      	movs	r3, #17
 8002778:	b2da      	uxtb	r2, r3
 800277a:	4b74      	ldr	r3, [pc, #464]	@ (800294c <main+0x24c>)
 800277c:	715a      	strb	r2, [r3, #5]
	display.SPI_Driver.prescaler = SPI_Prescaler.CLK_div_2;
 800277e:	2200      	movs	r2, #0
 8002780:	4b72      	ldr	r3, [pc, #456]	@ (800294c <main+0x24c>)
 8002782:	82da      	strh	r2, [r3, #22]
	display.SPI_Driver.type = SPI_Type.Master;
 8002784:	2204      	movs	r2, #4
 8002786:	4b71      	ldr	r3, [pc, #452]	@ (800294c <main+0x24c>)
 8002788:	831a      	strh	r2, [r3, #24]

	display.DC_Port = GPIOA;
 800278a:	4b70      	ldr	r3, [pc, #448]	@ (800294c <main+0x24c>)
 800278c:	4a70      	ldr	r2, [pc, #448]	@ (8002950 <main+0x250>)
 800278e:	629a      	str	r2, [r3, #40]	@ 0x28
	display.DC_Pin = 3;
 8002790:	4b6e      	ldr	r3, [pc, #440]	@ (800294c <main+0x24c>)
 8002792:	2203      	movs	r2, #3
 8002794:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

	display.Reset_Port = GPIOA;
 8002798:	4b6c      	ldr	r3, [pc, #432]	@ (800294c <main+0x24c>)
 800279a:	4a6d      	ldr	r2, [pc, #436]	@ (8002950 <main+0x250>)
 800279c:	631a      	str	r2, [r3, #48]	@ 0x30
	display.Reset_Pin = 2;
 800279e:	4b6b      	ldr	r3, [pc, #428]	@ (800294c <main+0x24c>)
 80027a0:	2202      	movs	r2, #2
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

	GC9A01_Init(&display);
 80027a6:	4869      	ldr	r0, [pc, #420]	@ (800294c <main+0x24c>)
 80027a8:	f7fe fb34 	bl	8000e14 <GC9A01_Init>

    struct GC9A01_frame frame = {{0,0},{239,239}};
 80027ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002958 <main+0x258>)
 80027ae:	1d3b      	adds	r3, r7, #4
 80027b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027b4:	e883 0003 	stmia.w	r3, {r0, r1}
    GC9A01_Set_Frame(&display,frame);
 80027b8:	1d3b      	adds	r3, r7, #4
 80027ba:	e893 0006 	ldmia.w	r3, {r1, r2}
 80027be:	4863      	ldr	r0, [pc, #396]	@ (800294c <main+0x24c>)
 80027c0:	f7fe feb6 	bl	8001530 <GC9A01_Set_Frame>



	for(;;)
	{
	    float frequency = 0.026;
 80027c4:	4b65      	ldr	r3, [pc, #404]	@ (800295c <main+0x25c>)
 80027c6:	60fb      	str	r3, [r7, #12]
	    for (int x = 0; x < 240; x++) {
 80027c8:	2300      	movs	r3, #0
 80027ca:	617b      	str	r3, [r7, #20]
 80027cc:	e0ae      	b.n	800292c <main+0x22c>
	        color[0] = sin(frequency*x + 0) * 127 + 128;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	ee07 3a90 	vmov	s15, r3
 80027d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027e0:	ed9f 7a5f 	vldr	s14, [pc, #380]	@ 8002960 <main+0x260>
 80027e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80027e8:	ee17 0a90 	vmov	r0, s15
 80027ec:	f7fd fe50 	bl	8000490 <__aeabi_f2d>
 80027f0:	4602      	mov	r2, r0
 80027f2:	460b      	mov	r3, r1
 80027f4:	ec43 2b10 	vmov	d0, r2, r3
 80027f8:	f000 ff8a 	bl	8003710 <sin>
 80027fc:	ec51 0b10 	vmov	r0, r1, d0
 8002800:	a34f      	add	r3, pc, #316	@ (adr r3, 8002940 <main+0x240>)
 8002802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002806:	f7fd fe9b 	bl	8000540 <__aeabi_dmul>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	4610      	mov	r0, r2
 8002810:	4619      	mov	r1, r3
 8002812:	f04f 0200 	mov.w	r2, #0
 8002816:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <main+0x264>)
 8002818:	f7fd fcdc 	bl	80001d4 <__adddf3>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4610      	mov	r0, r2
 8002822:	4619      	mov	r1, r3
 8002824:	f7fe f94e 	bl	8000ac4 <__aeabi_d2uiz>
 8002828:	4603      	mov	r3, r0
 800282a:	b2db      	uxtb	r3, r3
 800282c:	703b      	strb	r3, [r7, #0]
	        color[1] = sin(frequency*x + 2) * 127 + 128;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	ee07 3a90 	vmov	s15, r3
 8002834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002838:	edd7 7a03 	vldr	s15, [r7, #12]
 800283c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002840:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002848:	ee17 0a90 	vmov	r0, s15
 800284c:	f7fd fe20 	bl	8000490 <__aeabi_f2d>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	ec43 2b10 	vmov	d0, r2, r3
 8002858:	f000 ff5a 	bl	8003710 <sin>
 800285c:	ec51 0b10 	vmov	r0, r1, d0
 8002860:	a337      	add	r3, pc, #220	@ (adr r3, 8002940 <main+0x240>)
 8002862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002866:	f7fd fe6b 	bl	8000540 <__aeabi_dmul>
 800286a:	4602      	mov	r2, r0
 800286c:	460b      	mov	r3, r1
 800286e:	4610      	mov	r0, r2
 8002870:	4619      	mov	r1, r3
 8002872:	f04f 0200 	mov.w	r2, #0
 8002876:	4b3b      	ldr	r3, [pc, #236]	@ (8002964 <main+0x264>)
 8002878:	f7fd fcac 	bl	80001d4 <__adddf3>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f91e 	bl	8000ac4 <__aeabi_d2uiz>
 8002888:	4603      	mov	r3, r0
 800288a:	b2db      	uxtb	r3, r3
 800288c:	707b      	strb	r3, [r7, #1]
	        color[2] = sin(frequency*x + 4) * 127 + 128;
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002898:	edd7 7a03 	vldr	s15, [r7, #12]
 800289c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a0:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 80028a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80028a8:	ee17 0a90 	vmov	r0, s15
 80028ac:	f7fd fdf0 	bl	8000490 <__aeabi_f2d>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	ec43 2b10 	vmov	d0, r2, r3
 80028b8:	f000 ff2a 	bl	8003710 <sin>
 80028bc:	ec51 0b10 	vmov	r0, r1, d0
 80028c0:	a31f      	add	r3, pc, #124	@ (adr r3, 8002940 <main+0x240>)
 80028c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c6:	f7fd fe3b 	bl	8000540 <__aeabi_dmul>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4610      	mov	r0, r2
 80028d0:	4619      	mov	r1, r3
 80028d2:	f04f 0200 	mov.w	r2, #0
 80028d6:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <main+0x264>)
 80028d8:	f7fd fc7c 	bl	80001d4 <__adddf3>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fe f8ee 	bl	8000ac4 <__aeabi_d2uiz>
 80028e8:	4603      	mov	r3, r0
 80028ea:	b2db      	uxtb	r3, r3
 80028ec:	70bb      	strb	r3, [r7, #2]
	        for (int y = 0; y < 240; y++) {
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
 80028f2:	e015      	b.n	8002920 <main+0x220>
	            if (x == 0 && y == 0) {
 80028f4:	697b      	ldr	r3, [r7, #20]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d109      	bne.n	800290e <main+0x20e>
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d106      	bne.n	800290e <main+0x20e>
	                GC9A01_Write(&display,color, sizeof(color));
 8002900:	463b      	mov	r3, r7
 8002902:	2203      	movs	r2, #3
 8002904:	4619      	mov	r1, r3
 8002906:	4811      	ldr	r0, [pc, #68]	@ (800294c <main+0x24c>)
 8002908:	f7fe fdbc 	bl	8001484 <GC9A01_Write>
 800290c:	e005      	b.n	800291a <main+0x21a>
	            } else {
	                GC9A01_Write_Continue(&display,color, sizeof(color));
 800290e:	463b      	mov	r3, r7
 8002910:	2203      	movs	r2, #3
 8002912:	4619      	mov	r1, r3
 8002914:	480d      	ldr	r0, [pc, #52]	@ (800294c <main+0x24c>)
 8002916:	f7fe fde0 	bl	80014da <GC9A01_Write_Continue>
	        for (int y = 0; y < 240; y++) {
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	3301      	adds	r3, #1
 800291e:	613b      	str	r3, [r7, #16]
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	2bef      	cmp	r3, #239	@ 0xef
 8002924:	dde6      	ble.n	80028f4 <main+0x1f4>
	    for (int x = 0; x < 240; x++) {
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	3301      	adds	r3, #1
 800292a:	617b      	str	r3, [r7, #20]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	2bef      	cmp	r3, #239	@ 0xef
 8002930:	f77f af4d 	ble.w	80027ce <main+0xce>
	            }
	        }
	    }

	    Delay_us(1000);
 8002934:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 8002968 <main+0x268>
 8002938:	f7ff fe72 	bl	8002620 <Delay_us>
	{
 800293c:	e742      	b.n	80027c4 <main+0xc4>
 800293e:	bf00      	nop
 8002940:	00000000 	.word	0x00000000
 8002944:	405fc000 	.word	0x405fc000
 8002948:	40011000 	.word	0x40011000
 800294c:	200000a0 	.word	0x200000a0
 8002950:	40020000 	.word	0x40020000
 8002954:	40013000 	.word	0x40013000
 8002958:	08004880 	.word	0x08004880
 800295c:	3cd4fdf4 	.word	0x3cd4fdf4
 8002960:	00000000 	.word	0x00000000
 8002964:	40600000 	.word	0x40600000
 8002968:	447a0000 	.word	0x447a0000

0800296c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800296c:	b480      	push	{r7}
 800296e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002970:	4b06      	ldr	r3, [pc, #24]	@ (800298c <SystemInit+0x20>)
 8002972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002976:	4a05      	ldr	r2, [pc, #20]	@ (800298c <SystemInit+0x20>)
 8002978:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800297c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002980:	bf00      	nop
 8002982:	46bd      	mov	sp, r7
 8002984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002988:	4770      	bx	lr
 800298a:	bf00      	nop
 800298c:	e000ed00 	.word	0xe000ed00

08002990 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002996:	2300      	movs	r3, #0
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	2300      	movs	r3, #0
 800299c:	617b      	str	r3, [r7, #20]
 800299e:	2302      	movs	r3, #2
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	2300      	movs	r3, #0
 80029a4:	60bb      	str	r3, [r7, #8]
 80029a6:	2302      	movs	r3, #2
 80029a8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80029aa:	4b34      	ldr	r3, [pc, #208]	@ (8002a7c <SystemCoreClockUpdate+0xec>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f003 030c 	and.w	r3, r3, #12
 80029b2:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	2b08      	cmp	r3, #8
 80029b8:	d011      	beq.n	80029de <SystemCoreClockUpdate+0x4e>
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b08      	cmp	r3, #8
 80029be:	d844      	bhi.n	8002a4a <SystemCoreClockUpdate+0xba>
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <SystemCoreClockUpdate+0x3e>
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b04      	cmp	r3, #4
 80029ca:	d004      	beq.n	80029d6 <SystemCoreClockUpdate+0x46>
 80029cc:	e03d      	b.n	8002a4a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80029ce:	4b2c      	ldr	r3, [pc, #176]	@ (8002a80 <SystemCoreClockUpdate+0xf0>)
 80029d0:	4a2c      	ldr	r2, [pc, #176]	@ (8002a84 <SystemCoreClockUpdate+0xf4>)
 80029d2:	601a      	str	r2, [r3, #0]
      break;
 80029d4:	e03d      	b.n	8002a52 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80029d6:	4b2a      	ldr	r3, [pc, #168]	@ (8002a80 <SystemCoreClockUpdate+0xf0>)
 80029d8:	4a2b      	ldr	r2, [pc, #172]	@ (8002a88 <SystemCoreClockUpdate+0xf8>)
 80029da:	601a      	str	r2, [r3, #0]
      break;
 80029dc:	e039      	b.n	8002a52 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80029de:	4b27      	ldr	r3, [pc, #156]	@ (8002a7c <SystemCoreClockUpdate+0xec>)
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	0d9b      	lsrs	r3, r3, #22
 80029e4:	f003 0301 	and.w	r3, r3, #1
 80029e8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029ea:	4b24      	ldr	r3, [pc, #144]	@ (8002a7c <SystemCoreClockUpdate+0xec>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80029fa:	4a23      	ldr	r2, [pc, #140]	@ (8002a88 <SystemCoreClockUpdate+0xf8>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	4a1e      	ldr	r2, [pc, #120]	@ (8002a7c <SystemCoreClockUpdate+0xec>)
 8002a04:	6852      	ldr	r2, [r2, #4]
 8002a06:	0992      	lsrs	r2, r2, #6
 8002a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a0c:	fb02 f303 	mul.w	r3, r2, r3
 8002a10:	617b      	str	r3, [r7, #20]
 8002a12:	e00b      	b.n	8002a2c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002a14:	4a1b      	ldr	r2, [pc, #108]	@ (8002a84 <SystemCoreClockUpdate+0xf4>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a1c:	4a17      	ldr	r2, [pc, #92]	@ (8002a7c <SystemCoreClockUpdate+0xec>)
 8002a1e:	6852      	ldr	r2, [r2, #4]
 8002a20:	0992      	lsrs	r2, r2, #6
 8002a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a26:	fb02 f303 	mul.w	r3, r2, r3
 8002a2a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002a2c:	4b13      	ldr	r3, [pc, #76]	@ (8002a7c <SystemCoreClockUpdate+0xec>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0c1b      	lsrs	r3, r3, #16
 8002a32:	f003 0303 	and.w	r3, r3, #3
 8002a36:	3301      	adds	r3, #1
 8002a38:	005b      	lsls	r3, r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8002a3c:	697a      	ldr	r2, [r7, #20]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a44:	4a0e      	ldr	r2, [pc, #56]	@ (8002a80 <SystemCoreClockUpdate+0xf0>)
 8002a46:	6013      	str	r3, [r2, #0]
      break;
 8002a48:	e003      	b.n	8002a52 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a80 <SystemCoreClockUpdate+0xf0>)
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a84 <SystemCoreClockUpdate+0xf4>)
 8002a4e:	601a      	str	r2, [r3, #0]
      break;
 8002a50:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002a52:	4b0a      	ldr	r3, [pc, #40]	@ (8002a7c <SystemCoreClockUpdate+0xec>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	091b      	lsrs	r3, r3, #4
 8002a58:	f003 030f 	and.w	r3, r3, #15
 8002a5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002a8c <SystemCoreClockUpdate+0xfc>)
 8002a5e:	5cd3      	ldrb	r3, [r2, r3]
 8002a60:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002a62:	4b07      	ldr	r3, [pc, #28]	@ (8002a80 <SystemCoreClockUpdate+0xf0>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
 8002a6c:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <SystemCoreClockUpdate+0xf0>)
 8002a6e:	6013      	str	r3, [r2, #0]
}
 8002a70:	bf00      	nop
 8002a72:	371c      	adds	r7, #28
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	20000000 	.word	0x20000000
 8002a84:	00f42400 	.word	0x00f42400
 8002a88:	007a1200 	.word	0x007a1200
 8002a8c:	08004888 	.word	0x08004888

08002a90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a90:	480d      	ldr	r0, [pc, #52]	@ (8002ac8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002a94:	f7ff ff6a 	bl	800296c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a98:	480c      	ldr	r0, [pc, #48]	@ (8002acc <LoopForever+0x6>)
  ldr r1, =_edata
 8002a9a:	490d      	ldr	r1, [pc, #52]	@ (8002ad0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad4 <LoopForever+0xe>)
  movs r3, #0
 8002a9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002aa0:	e002      	b.n	8002aa8 <LoopCopyDataInit>

08002aa2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002aa2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002aa4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002aa6:	3304      	adds	r3, #4

08002aa8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002aa8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002aaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002aac:	d3f9      	bcc.n	8002aa2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002aae:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002ab0:	4c0a      	ldr	r4, [pc, #40]	@ (8002adc <LoopForever+0x16>)
  movs r3, #0
 8002ab2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ab4:	e001      	b.n	8002aba <LoopFillZerobss>

08002ab6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ab6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ab8:	3204      	adds	r2, #4

08002aba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002abc:	d3fb      	bcc.n	8002ab6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002abe:	f000 fe03 	bl	80036c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ac2:	f7ff fe1d 	bl	8002700 <main>

08002ac6 <LoopForever>:

LoopForever:
  b LoopForever
 8002ac6:	e7fe      	b.n	8002ac6 <LoopForever>
  ldr   r0, =_estack
 8002ac8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002acc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ad0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8002ad4:	08004a78 	.word	0x08004a78
  ldr r2, =_sbss
 8002ad8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8002adc:	200000d8 	.word	0x200000d8

08002ae0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ae0:	e7fe      	b.n	8002ae0 <ADC_IRQHandler>

08002ae2 <separateFractionAndIntegral>:
	float temp = 0;
	temp = (float)(SysTick->VAL / (SystemCoreClock));
	return temp;
}

__STATIC_INLINE void separateFractionAndIntegral(double number, double *fractionalPart, double *integralPart) {
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b084      	sub	sp, #16
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	ed87 0b02 	vstr	d0, [r7, #8]
 8002aec:	6078      	str	r0, [r7, #4]
 8002aee:	6039      	str	r1, [r7, #0]
    *integralPart = (double)((int64_t)number);
 8002af0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002af4:	f7fe f806 	bl	8000b04 <__aeabi_d2lz>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7fd fcf0 	bl	80004e4 <__aeabi_l2d>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	6839      	ldr	r1, [r7, #0]
 8002b0a:	e9c1 2300 	strd	r2, r3, [r1]
    *fractionalPart = number - *integralPart;
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b14:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002b18:	f7fd fb5a 	bl	80001d0 <__aeabi_dsub>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	460b      	mov	r3, r1
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	e9c1 2300 	strd	r2, r3, [r1]
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <USART_Config_Reset>:
#include "USART.h"



void USART_Config_Reset(USART_Config *config)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
	config->mode = USART_Mode.Disable;
 8002b36:	2200      	movs	r2, #0
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	731a      	strb	r2, [r3, #12]
	config->hardware_flow = Hardware_Flow.Disable;
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	74da      	strb	r2, [r3, #19]
	config->low_power_uart = Low_Power_USART.Disable;
 8002b42:	2200      	movs	r2, #0
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	711a      	strb	r2, [r3, #4]
	config->baudrate = 9600;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002b4e:	609a      	str	r2, [r3, #8]
	config->dma_enable = DMA_Enable.RX_Disable | DMA_Enable.TX_Disable;
 8002b50:	2203      	movs	r2, #3
 8002b52:	2301      	movs	r3, #1
 8002b54:	4313      	orrs	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	755a      	strb	r2, [r3, #21]
	config->interrupt = Interrupt_Type.Disable;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	749a      	strb	r2, [r3, #18]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <USART_Clock_Enable>:


int8_t USART_Clock_Enable(USART_Config *config)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a47      	ldr	r2, [pc, #284]	@ (8002c9c <USART_Clock_Enable+0x12c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d112      	bne.n	8002ba8 <USART_Clock_Enable+0x38>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART1LPEN;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	791b      	ldrb	r3, [r3, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d106      	bne.n	8002b9a <USART_Clock_Enable+0x2a>
 8002b8c:	4b44      	ldr	r3, [pc, #272]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002b8e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002b90:	4a43      	ldr	r2, [pc, #268]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002b92:	f043 0310 	orr.w	r3, r3, #16
 8002b96:	6653      	str	r3, [r2, #100]	@ 0x64
 8002b98:	e079      	b.n	8002c8e <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART1EN;
 8002b9a:	4b41      	ldr	r3, [pc, #260]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b9e:	4a40      	ldr	r2, [pc, #256]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002ba0:	f043 0310 	orr.w	r3, r3, #16
 8002ba4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ba6:	e072      	b.n	8002c8e <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART2)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a3d      	ldr	r2, [pc, #244]	@ (8002ca4 <USART_Clock_Enable+0x134>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d112      	bne.n	8002bd8 <USART_Clock_Enable+0x68>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART2LPEN;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	791b      	ldrb	r3, [r3, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d106      	bne.n	8002bca <USART_Clock_Enable+0x5a>
 8002bbc:	4b38      	ldr	r3, [pc, #224]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002bbe:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bc0:	4a37      	ldr	r2, [pc, #220]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bc8:	e061      	b.n	8002c8e <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART2EN;
 8002bca:	4b35      	ldr	r3, [pc, #212]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bce:	4a34      	ldr	r2, [pc, #208]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002bd6:	e05a      	b.n	8002c8e <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART3)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a32      	ldr	r2, [pc, #200]	@ (8002ca8 <USART_Clock_Enable+0x138>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d112      	bne.n	8002c08 <USART_Clock_Enable+0x98>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB1LPENR |= RCC_APB1LPENR_USART3LPEN;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	791b      	ldrb	r3, [r3, #4]
 8002be6:	2201      	movs	r2, #1
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d106      	bne.n	8002bfa <USART_Clock_Enable+0x8a>
 8002bec:	4b2c      	ldr	r3, [pc, #176]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002bee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002bf0:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002bf2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bf6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002bf8:	e049      	b.n	8002c8e <USART_Clock_Enable+0x11e>
		else RCC -> APB1ENR |= RCC_APB1ENR_USART3EN;
 8002bfa:	4b29      	ldr	r3, [pc, #164]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bfe:	4a28      	ldr	r2, [pc, #160]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c06:	e042      	b.n	8002c8e <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART4)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a27      	ldr	r2, [pc, #156]	@ (8002cac <USART_Clock_Enable+0x13c>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d10e      	bne.n	8002c30 <USART_Clock_Enable+0xc0>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	791b      	ldrb	r3, [r3, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d102      	bne.n	8002c22 <USART_Clock_Enable+0xb2>
 8002c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8002c20:	e036      	b.n	8002c90 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART4EN;
 8002c22:	4b1f      	ldr	r3, [pc, #124]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a1e      	ldr	r2, [pc, #120]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c28:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	e02e      	b.n	8002c8e <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == UART5)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a1e      	ldr	r2, [pc, #120]	@ (8002cb0 <USART_Clock_Enable+0x140>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d10e      	bne.n	8002c58 <USART_Clock_Enable+0xe8>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) return -1;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	791b      	ldrb	r3, [r3, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d102      	bne.n	8002c4a <USART_Clock_Enable+0xda>
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	e022      	b.n	8002c90 <USART_Clock_Enable+0x120>
		else RCC -> APB1ENR |= RCC_APB1ENR_UART5EN;
 8002c4a:	4b15      	ldr	r3, [pc, #84]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c4e:	4a14      	ldr	r2, [pc, #80]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c50:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c56:	e01a      	b.n	8002c8e <USART_Clock_Enable+0x11e>
	}
	else if(config->Port == USART6)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	@ (8002cb4 <USART_Clock_Enable+0x144>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d112      	bne.n	8002c88 <USART_Clock_Enable+0x118>
	{
		if(config->low_power_uart == Low_Power_USART.Enable) RCC -> APB2LPENR |= RCC_APB2LPENR_USART6LPEN;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	791b      	ldrb	r3, [r3, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d106      	bne.n	8002c7a <USART_Clock_Enable+0x10a>
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c72:	f043 0320 	orr.w	r3, r3, #32
 8002c76:	6653      	str	r3, [r2, #100]	@ 0x64
 8002c78:	e009      	b.n	8002c8e <USART_Clock_Enable+0x11e>
		else RCC -> APB2ENR |= RCC_APB2ENR_USART6EN;
 8002c7a:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c7e:	4a08      	ldr	r2, [pc, #32]	@ (8002ca0 <USART_Clock_Enable+0x130>)
 8002c80:	f043 0320 	orr.w	r3, r3, #32
 8002c84:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c86:	e002      	b.n	8002c8e <USART_Clock_Enable+0x11e>
	}
	else
	{
		return -1;
 8002c88:	f04f 33ff 	mov.w	r3, #4294967295
 8002c8c:	e000      	b.n	8002c90 <USART_Clock_Enable+0x120>
	}
	return 1;
 8002c8e:	2301      	movs	r3, #1
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr
 8002c9c:	40011000 	.word	0x40011000
 8002ca0:	40023800 	.word	0x40023800
 8002ca4:	40004400 	.word	0x40004400
 8002ca8:	40004800 	.word	0x40004800
 8002cac:	40004c00 	.word	0x40004c00
 8002cb0:	40005000 	.word	0x40005000
 8002cb4:	40011400 	.word	0x40011400

08002cb8 <PIN_Setup>:
	}
	return 1;
}

static void PIN_Setup(USART_Config *config)
{
 8002cb8:	b5b0      	push	{r4, r5, r7, lr}
 8002cba:	b086      	sub	sp, #24
 8002cbc:	af04      	add	r7, sp, #16
 8002cbe:	6078      	str	r0, [r7, #4]
	if(config->Port == USART1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4aa0      	ldr	r2, [pc, #640]	@ (8002f48 <PIN_Setup+0x290>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	f040 810d 	bne.w	8002ee6 <PIN_Setup+0x22e>
	{
		if((config->mode == USART_Mode.Asynchronous) ||
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	7b1b      	ldrb	r3, [r3, #12]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d00f      	beq.n	8002cf6 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.Synchronous) ||
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	7b1b      	ldrb	r3, [r3, #12]
 8002cda:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d00a      	beq.n	8002cf6 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.IrDA) ||
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	7b1b      	ldrb	r3, [r3, #12]
 8002ce4:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d005      	beq.n	8002cf6 <PIN_Setup+0x3e>
		   (config->mode == USART_Mode.LIN) )
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	7b1b      	ldrb	r3, [r3, #12]
 8002cee:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002cf0:	4293      	cmp	r3, r2
 8002cf2:	f040 80be 	bne.w	8002e72 <PIN_Setup+0x1ba>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7b5b      	ldrb	r3, [r3, #13]
 8002cfa:	2209      	movs	r2, #9
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d10f      	bne.n	8002d20 <PIN_Setup+0x68>
 8002d00:	2009      	movs	r0, #9
 8002d02:	2402      	movs	r4, #2
 8002d04:	2500      	movs	r5, #0
 8002d06:	2302      	movs	r3, #2
 8002d08:	2200      	movs	r2, #0
 8002d0a:	2107      	movs	r1, #7
 8002d0c:	9102      	str	r1, [sp, #8]
 8002d0e:	9201      	str	r2, [sp, #4]
 8002d10:	9300      	str	r3, [sp, #0]
 8002d12:	462b      	mov	r3, r5
 8002d14:	4622      	mov	r2, r4
 8002d16:	4601      	mov	r1, r0
 8002d18:	488c      	ldr	r0, [pc, #560]	@ (8002f4c <PIN_Setup+0x294>)
 8002d1a:	f7fe fccf 	bl	80016bc <GPIO_Pin_Init>
 8002d1e:	e013      	b.n	8002d48 <PIN_Setup+0x90>
			else if(config->TX_Pin == USART1_TX_Pin.PB6)GPIO_Pin_Init(GPIOB, USART1_TX_Pin.PB6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7b5b      	ldrb	r3, [r3, #13]
 8002d24:	2206      	movs	r2, #6
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10e      	bne.n	8002d48 <PIN_Setup+0x90>
 8002d2a:	2006      	movs	r0, #6
 8002d2c:	2402      	movs	r4, #2
 8002d2e:	2500      	movs	r5, #0
 8002d30:	2302      	movs	r3, #2
 8002d32:	2200      	movs	r2, #0
 8002d34:	2107      	movs	r1, #7
 8002d36:	9102      	str	r1, [sp, #8]
 8002d38:	9201      	str	r2, [sp, #4]
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	462b      	mov	r3, r5
 8002d3e:	4622      	mov	r2, r4
 8002d40:	4601      	mov	r1, r0
 8002d42:	4883      	ldr	r0, [pc, #524]	@ (8002f50 <PIN_Setup+0x298>)
 8002d44:	f7fe fcba 	bl	80016bc <GPIO_Pin_Init>

			if(config->RX_Pin == USART1_RX_Pin.PA10)GPIO_Pin_Init(GPIOA, USART1_RX_Pin.PA10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	7b9b      	ldrb	r3, [r3, #14]
 8002d4c:	220a      	movs	r2, #10
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d10f      	bne.n	8002d72 <PIN_Setup+0xba>
 8002d52:	200a      	movs	r0, #10
 8002d54:	2402      	movs	r4, #2
 8002d56:	2500      	movs	r5, #0
 8002d58:	2302      	movs	r3, #2
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	2107      	movs	r1, #7
 8002d5e:	9102      	str	r1, [sp, #8]
 8002d60:	9201      	str	r2, [sp, #4]
 8002d62:	9300      	str	r3, [sp, #0]
 8002d64:	462b      	mov	r3, r5
 8002d66:	4622      	mov	r2, r4
 8002d68:	4601      	mov	r1, r0
 8002d6a:	4878      	ldr	r0, [pc, #480]	@ (8002f4c <PIN_Setup+0x294>)
 8002d6c:	f7fe fca6 	bl	80016bc <GPIO_Pin_Init>
 8002d70:	e013      	b.n	8002d9a <PIN_Setup+0xe2>
			else if(config->RX_Pin == USART1_RX_Pin.PB7)GPIO_Pin_Init(GPIOB, USART1_RX_Pin.PB7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	7b9b      	ldrb	r3, [r3, #14]
 8002d76:	2207      	movs	r2, #7
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d10e      	bne.n	8002d9a <PIN_Setup+0xe2>
 8002d7c:	2007      	movs	r0, #7
 8002d7e:	2402      	movs	r4, #2
 8002d80:	2500      	movs	r5, #0
 8002d82:	2302      	movs	r3, #2
 8002d84:	2200      	movs	r2, #0
 8002d86:	2107      	movs	r1, #7
 8002d88:	9102      	str	r1, [sp, #8]
 8002d8a:	9201      	str	r2, [sp, #4]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	462b      	mov	r3, r5
 8002d90:	4622      	mov	r2, r4
 8002d92:	4601      	mov	r1, r0
 8002d94:	486e      	ldr	r0, [pc, #440]	@ (8002f50 <PIN_Setup+0x298>)
 8002d96:	f7fe fc91 	bl	80016bc <GPIO_Pin_Init>

			if((config->mode == USART_Mode.Synchronous))if(config->CLK_Pin == USART1_CLK_Pin.PA8)GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	7b1b      	ldrb	r3, [r3, #12]
 8002d9e:	2202      	movs	r2, #2
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d113      	bne.n	8002dcc <PIN_Setup+0x114>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	7bdb      	ldrb	r3, [r3, #15]
 8002da8:	2208      	movs	r2, #8
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d10e      	bne.n	8002dcc <PIN_Setup+0x114>
 8002dae:	2008      	movs	r0, #8
 8002db0:	2402      	movs	r4, #2
 8002db2:	2500      	movs	r5, #0
 8002db4:	2302      	movs	r3, #2
 8002db6:	2200      	movs	r2, #0
 8002db8:	2107      	movs	r1, #7
 8002dba:	9102      	str	r1, [sp, #8]
 8002dbc:	9201      	str	r2, [sp, #4]
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	462b      	mov	r3, r5
 8002dc2:	4622      	mov	r2, r4
 8002dc4:	4601      	mov	r1, r0
 8002dc6:	4861      	ldr	r0, [pc, #388]	@ (8002f4c <PIN_Setup+0x294>)
 8002dc8:	f7fe fc78 	bl	80016bc <GPIO_Pin_Init>

			if(config->hardware_flow != Hardware_Flow.Disable)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	7cdb      	ldrb	r3, [r3, #19]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	f000 83bb 	beq.w	800354e <PIN_Setup+0x896>
			{
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	7cdb      	ldrb	r3, [r3, #19]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d10e      	bne.n	8002e00 <PIN_Setup+0x148>
 8002de2:	200b      	movs	r0, #11
 8002de4:	2402      	movs	r4, #2
 8002de6:	2500      	movs	r5, #0
 8002de8:	2302      	movs	r3, #2
 8002dea:	2200      	movs	r2, #0
 8002dec:	2107      	movs	r1, #7
 8002dee:	9102      	str	r1, [sp, #8]
 8002df0:	9201      	str	r2, [sp, #4]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	462b      	mov	r3, r5
 8002df6:	4622      	mov	r2, r4
 8002df8:	4601      	mov	r1, r0
 8002dfa:	4854      	ldr	r0, [pc, #336]	@ (8002f4c <PIN_Setup+0x294>)
 8002dfc:	f7fe fc5e 	bl	80016bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.RTS_Enable)GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7cdb      	ldrb	r3, [r3, #19]
 8002e04:	2202      	movs	r2, #2
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d10e      	bne.n	8002e28 <PIN_Setup+0x170>
 8002e0a:	200c      	movs	r0, #12
 8002e0c:	2402      	movs	r4, #2
 8002e0e:	2500      	movs	r5, #0
 8002e10:	2302      	movs	r3, #2
 8002e12:	2200      	movs	r2, #0
 8002e14:	2107      	movs	r1, #7
 8002e16:	9102      	str	r1, [sp, #8]
 8002e18:	9201      	str	r2, [sp, #4]
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	462b      	mov	r3, r5
 8002e1e:	4622      	mov	r2, r4
 8002e20:	4601      	mov	r1, r0
 8002e22:	484a      	ldr	r0, [pc, #296]	@ (8002f4c <PIN_Setup+0x294>)
 8002e24:	f7fe fc4a 	bl	80016bc <GPIO_Pin_Init>
				if(config->hardware_flow == Hardware_Flow.CTS_RTS_Enable)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	7cdb      	ldrb	r3, [r3, #19]
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	f040 838d 	bne.w	800354e <PIN_Setup+0x896>
				{
					GPIO_Pin_Init(GPIOA, USART1_CTS_Pin.PA11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002e34:	200b      	movs	r0, #11
 8002e36:	2402      	movs	r4, #2
 8002e38:	2500      	movs	r5, #0
 8002e3a:	2302      	movs	r3, #2
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	2107      	movs	r1, #7
 8002e40:	9102      	str	r1, [sp, #8]
 8002e42:	9201      	str	r2, [sp, #4]
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	462b      	mov	r3, r5
 8002e48:	4622      	mov	r2, r4
 8002e4a:	4601      	mov	r1, r0
 8002e4c:	483f      	ldr	r0, [pc, #252]	@ (8002f4c <PIN_Setup+0x294>)
 8002e4e:	f7fe fc35 	bl	80016bc <GPIO_Pin_Init>
					GPIO_Pin_Init(GPIOA, USART1_RTS_Pin.PA12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002e52:	200c      	movs	r0, #12
 8002e54:	2402      	movs	r4, #2
 8002e56:	2500      	movs	r5, #0
 8002e58:	2302      	movs	r3, #2
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	2107      	movs	r1, #7
 8002e5e:	9102      	str	r1, [sp, #8]
 8002e60:	9201      	str	r2, [sp, #4]
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	462b      	mov	r3, r5
 8002e66:	4622      	mov	r2, r4
 8002e68:	4601      	mov	r1, r0
 8002e6a:	4838      	ldr	r0, [pc, #224]	@ (8002f4c <PIN_Setup+0x294>)
 8002e6c:	f7fe fc26 	bl	80016bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8002e70:	e36d      	b.n	800354e <PIN_Setup+0x896>
				}
		    }
		}
		else if((config->mode == USART_Mode.SmartCard) ||
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	7b1b      	ldrb	r3, [r3, #12]
 8002e76:	2206      	movs	r2, #6
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d00a      	beq.n	8002e92 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	7b1b      	ldrb	r3, [r3, #12]
 8002e80:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d005      	beq.n	8002e92 <PIN_Setup+0x1da>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7b1b      	ldrb	r3, [r3, #12]
 8002e8a:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	f040 8363 	bne.w	8003558 <PIN_Setup+0x8a0>
		{
			if(config->TX_Pin == USART1_TX_Pin.PA9)GPIO_Pin_Init(GPIOA, USART1_TX_Pin.PA9, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	7b5b      	ldrb	r3, [r3, #13]
 8002e96:	2209      	movs	r2, #9
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d10e      	bne.n	8002eba <PIN_Setup+0x202>
 8002e9c:	2009      	movs	r0, #9
 8002e9e:	2402      	movs	r4, #2
 8002ea0:	2500      	movs	r5, #0
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2107      	movs	r1, #7
 8002ea8:	9102      	str	r1, [sp, #8]
 8002eaa:	9201      	str	r2, [sp, #4]
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	462b      	mov	r3, r5
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4825      	ldr	r0, [pc, #148]	@ (8002f4c <PIN_Setup+0x294>)
 8002eb6:	f7fe fc01 	bl	80016bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))GPIO_Pin_Init(GPIOA, USART1_CLK_Pin.PA8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_1);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	7b1b      	ldrb	r3, [r3, #12]
 8002ebe:	2207      	movs	r2, #7
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	f040 8349 	bne.w	8003558 <PIN_Setup+0x8a0>
 8002ec6:	2008      	movs	r0, #8
 8002ec8:	2402      	movs	r4, #2
 8002eca:	2500      	movs	r5, #0
 8002ecc:	2302      	movs	r3, #2
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2107      	movs	r1, #7
 8002ed2:	9102      	str	r1, [sp, #8]
 8002ed4:	9201      	str	r2, [sp, #4]
 8002ed6:	9300      	str	r3, [sp, #0]
 8002ed8:	462b      	mov	r3, r5
 8002eda:	4622      	mov	r2, r4
 8002edc:	4601      	mov	r1, r0
 8002ede:	481b      	ldr	r0, [pc, #108]	@ (8002f4c <PIN_Setup+0x294>)
 8002ee0:	f7fe fbec 	bl	80016bc <GPIO_Pin_Init>
//
//		}
//	}


}
 8002ee4:	e338      	b.n	8003558 <PIN_Setup+0x8a0>
	else if(config->Port == USART2)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a1a      	ldr	r2, [pc, #104]	@ (8002f54 <PIN_Setup+0x29c>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	f040 817b 	bne.w	80031e8 <PIN_Setup+0x530>
		if((config->mode == USART_Mode.Asynchronous) ||
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	7b1b      	ldrb	r3, [r3, #12]
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d00f      	beq.n	8002f1c <PIN_Setup+0x264>
		   (config->mode == USART_Mode.Synchronous) ||
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	7b1b      	ldrb	r3, [r3, #12]
 8002f00:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d00a      	beq.n	8002f1c <PIN_Setup+0x264>
		   (config->mode == USART_Mode.IrDA) ||
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7b1b      	ldrb	r3, [r3, #12]
 8002f0a:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d005      	beq.n	8002f1c <PIN_Setup+0x264>
		   (config->mode == USART_Mode.LIN) )
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7b1b      	ldrb	r3, [r3, #12]
 8002f14:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8002f16:	4293      	cmp	r3, r2
 8002f18:	f040 80f8 	bne.w	800310c <PIN_Setup+0x454>
			if(config->TX_Pin == USART2_TX_Pin.PA2)GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	7b5b      	ldrb	r3, [r3, #13]
 8002f20:	2202      	movs	r2, #2
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d118      	bne.n	8002f58 <PIN_Setup+0x2a0>
 8002f26:	2002      	movs	r0, #2
 8002f28:	2402      	movs	r4, #2
 8002f2a:	2500      	movs	r5, #0
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	2200      	movs	r2, #0
 8002f30:	2107      	movs	r1, #7
 8002f32:	9102      	str	r1, [sp, #8]
 8002f34:	9201      	str	r2, [sp, #4]
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	462b      	mov	r3, r5
 8002f3a:	4622      	mov	r2, r4
 8002f3c:	4601      	mov	r1, r0
 8002f3e:	4803      	ldr	r0, [pc, #12]	@ (8002f4c <PIN_Setup+0x294>)
 8002f40:	f7fe fbbc 	bl	80016bc <GPIO_Pin_Init>
 8002f44:	e01c      	b.n	8002f80 <PIN_Setup+0x2c8>
 8002f46:	bf00      	nop
 8002f48:	40011000 	.word	0x40011000
 8002f4c:	40020000 	.word	0x40020000
 8002f50:	40020400 	.word	0x40020400
 8002f54:	40004400 	.word	0x40004400
			else if(config->TX_Pin == USART2_TX_Pin.PD5)GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7b5b      	ldrb	r3, [r3, #13]
 8002f5c:	2205      	movs	r2, #5
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d10e      	bne.n	8002f80 <PIN_Setup+0x2c8>
 8002f62:	2005      	movs	r0, #5
 8002f64:	2402      	movs	r4, #2
 8002f66:	2500      	movs	r5, #0
 8002f68:	2302      	movs	r3, #2
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	2107      	movs	r1, #7
 8002f6e:	9102      	str	r1, [sp, #8]
 8002f70:	9201      	str	r2, [sp, #4]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	462b      	mov	r3, r5
 8002f76:	4622      	mov	r2, r4
 8002f78:	4601      	mov	r1, r0
 8002f7a:	4899      	ldr	r0, [pc, #612]	@ (80031e0 <PIN_Setup+0x528>)
 8002f7c:	f7fe fb9e 	bl	80016bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART2_RX_Pin.PA3)GPIO_Pin_Init(GPIOA, USART2_RX_Pin.PA3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7b9b      	ldrb	r3, [r3, #14]
 8002f84:	2203      	movs	r2, #3
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d10f      	bne.n	8002faa <PIN_Setup+0x2f2>
 8002f8a:	2003      	movs	r0, #3
 8002f8c:	2402      	movs	r4, #2
 8002f8e:	2500      	movs	r5, #0
 8002f90:	2302      	movs	r3, #2
 8002f92:	2200      	movs	r2, #0
 8002f94:	2107      	movs	r1, #7
 8002f96:	9102      	str	r1, [sp, #8]
 8002f98:	9201      	str	r2, [sp, #4]
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	4622      	mov	r2, r4
 8002fa0:	4601      	mov	r1, r0
 8002fa2:	4890      	ldr	r0, [pc, #576]	@ (80031e4 <PIN_Setup+0x52c>)
 8002fa4:	f7fe fb8a 	bl	80016bc <GPIO_Pin_Init>
 8002fa8:	e013      	b.n	8002fd2 <PIN_Setup+0x31a>
			else if(config->RX_Pin == USART2_RX_Pin.PD6)GPIO_Pin_Init(GPIOD, USART2_RX_Pin.PD6, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7b9b      	ldrb	r3, [r3, #14]
 8002fae:	2206      	movs	r2, #6
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d10e      	bne.n	8002fd2 <PIN_Setup+0x31a>
 8002fb4:	2006      	movs	r0, #6
 8002fb6:	2402      	movs	r4, #2
 8002fb8:	2500      	movs	r5, #0
 8002fba:	2302      	movs	r3, #2
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2107      	movs	r1, #7
 8002fc0:	9102      	str	r1, [sp, #8]
 8002fc2:	9201      	str	r2, [sp, #4]
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	462b      	mov	r3, r5
 8002fc8:	4622      	mov	r2, r4
 8002fca:	4601      	mov	r1, r0
 8002fcc:	4884      	ldr	r0, [pc, #528]	@ (80031e0 <PIN_Setup+0x528>)
 8002fce:	f7fe fb75 	bl	80016bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous)){
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	7b1b      	ldrb	r3, [r3, #12]
 8002fd6:	2202      	movs	r2, #2
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d128      	bne.n	800302e <PIN_Setup+0x376>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	7bdb      	ldrb	r3, [r3, #15]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d10f      	bne.n	8003006 <PIN_Setup+0x34e>
 8002fe6:	2004      	movs	r0, #4
 8002fe8:	2402      	movs	r4, #2
 8002fea:	2500      	movs	r5, #0
 8002fec:	2302      	movs	r3, #2
 8002fee:	2200      	movs	r2, #0
 8002ff0:	2107      	movs	r1, #7
 8002ff2:	9102      	str	r1, [sp, #8]
 8002ff4:	9201      	str	r2, [sp, #4]
 8002ff6:	9300      	str	r3, [sp, #0]
 8002ff8:	462b      	mov	r3, r5
 8002ffa:	4622      	mov	r2, r4
 8002ffc:	4601      	mov	r1, r0
 8002ffe:	4879      	ldr	r0, [pc, #484]	@ (80031e4 <PIN_Setup+0x52c>)
 8003000:	f7fe fb5c 	bl	80016bc <GPIO_Pin_Init>
 8003004:	e013      	b.n	800302e <PIN_Setup+0x376>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7bdb      	ldrb	r3, [r3, #15]
 800300a:	2207      	movs	r2, #7
 800300c:	4293      	cmp	r3, r2
 800300e:	d10e      	bne.n	800302e <PIN_Setup+0x376>
 8003010:	2007      	movs	r0, #7
 8003012:	2402      	movs	r4, #2
 8003014:	2500      	movs	r5, #0
 8003016:	2302      	movs	r3, #2
 8003018:	2200      	movs	r2, #0
 800301a:	2107      	movs	r1, #7
 800301c:	9102      	str	r1, [sp, #8]
 800301e:	9201      	str	r2, [sp, #4]
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	462b      	mov	r3, r5
 8003024:	4622      	mov	r2, r4
 8003026:	4601      	mov	r1, r0
 8003028:	486e      	ldr	r0, [pc, #440]	@ (80031e4 <PIN_Setup+0x52c>)
 800302a:	f7fe fb47 	bl	80016bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	7cdb      	ldrb	r3, [r3, #19]
 8003032:	2200      	movs	r2, #0
 8003034:	4293      	cmp	r3, r2
 8003036:	d105      	bne.n	8003044 <PIN_Setup+0x38c>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7cdb      	ldrb	r3, [r3, #19]
 800303c:	2203      	movs	r2, #3
 800303e:	4293      	cmp	r3, r2
 8003040:	f040 8287 	bne.w	8003552 <PIN_Setup+0x89a>
				if(config->hardware_flow == Hardware_Flow.CTS_Enable)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7cdb      	ldrb	r3, [r3, #19]
 8003048:	2201      	movs	r2, #1
 800304a:	4293      	cmp	r3, r2
 800304c:	d128      	bne.n	80030a0 <PIN_Setup+0x3e8>
					if(config->CLK_Pin == USART2_CTS_Pin.PA0)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	7bdb      	ldrb	r3, [r3, #15]
 8003052:	2200      	movs	r2, #0
 8003054:	4293      	cmp	r3, r2
 8003056:	d10f      	bne.n	8003078 <PIN_Setup+0x3c0>
						GPIO_Pin_Init(GPIOA, USART2_CTS_Pin.PA0, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8003058:	2000      	movs	r0, #0
 800305a:	2402      	movs	r4, #2
 800305c:	2500      	movs	r5, #0
 800305e:	2302      	movs	r3, #2
 8003060:	2200      	movs	r2, #0
 8003062:	2107      	movs	r1, #7
 8003064:	9102      	str	r1, [sp, #8]
 8003066:	9201      	str	r2, [sp, #4]
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	462b      	mov	r3, r5
 800306c:	4622      	mov	r2, r4
 800306e:	4601      	mov	r1, r0
 8003070:	485c      	ldr	r0, [pc, #368]	@ (80031e4 <PIN_Setup+0x52c>)
 8003072:	f7fe fb23 	bl	80016bc <GPIO_Pin_Init>
 8003076:	e013      	b.n	80030a0 <PIN_Setup+0x3e8>
					else if(config->CLK_Pin == USART2_CTS_Pin.PD3)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	7bdb      	ldrb	r3, [r3, #15]
 800307c:	2203      	movs	r2, #3
 800307e:	4293      	cmp	r3, r2
 8003080:	d10e      	bne.n	80030a0 <PIN_Setup+0x3e8>
						GPIO_Pin_Init(GPIOD, USART2_CTS_Pin.PD3, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8003082:	2003      	movs	r0, #3
 8003084:	2402      	movs	r4, #2
 8003086:	2500      	movs	r5, #0
 8003088:	2302      	movs	r3, #2
 800308a:	2200      	movs	r2, #0
 800308c:	2107      	movs	r1, #7
 800308e:	9102      	str	r1, [sp, #8]
 8003090:	9201      	str	r2, [sp, #4]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	462b      	mov	r3, r5
 8003096:	4622      	mov	r2, r4
 8003098:	4601      	mov	r1, r0
 800309a:	4851      	ldr	r0, [pc, #324]	@ (80031e0 <PIN_Setup+0x528>)
 800309c:	f7fe fb0e 	bl	80016bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	7cdb      	ldrb	r3, [r3, #19]
 80030a4:	2202      	movs	r2, #2
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d005      	beq.n	80030b6 <PIN_Setup+0x3fe>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	7cdb      	ldrb	r3, [r3, #19]
 80030ae:	2203      	movs	r2, #3
 80030b0:	4293      	cmp	r3, r2
 80030b2:	f040 824e 	bne.w	8003552 <PIN_Setup+0x89a>
					if(config->CLK_Pin == USART2_RTS_Pin.PA1)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	7bdb      	ldrb	r3, [r3, #15]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4293      	cmp	r3, r2
 80030be:	d10f      	bne.n	80030e0 <PIN_Setup+0x428>
						GPIO_Pin_Init(GPIOA, USART2_RTS_Pin.PA1, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80030c0:	2001      	movs	r0, #1
 80030c2:	2402      	movs	r4, #2
 80030c4:	2500      	movs	r5, #0
 80030c6:	2302      	movs	r3, #2
 80030c8:	2200      	movs	r2, #0
 80030ca:	2107      	movs	r1, #7
 80030cc:	9102      	str	r1, [sp, #8]
 80030ce:	9201      	str	r2, [sp, #4]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	462b      	mov	r3, r5
 80030d4:	4622      	mov	r2, r4
 80030d6:	4601      	mov	r1, r0
 80030d8:	4842      	ldr	r0, [pc, #264]	@ (80031e4 <PIN_Setup+0x52c>)
 80030da:	f7fe faef 	bl	80016bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80030de:	e238      	b.n	8003552 <PIN_Setup+0x89a>
					else if(config->CLK_Pin == USART2_RTS_Pin.PD4)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	7bdb      	ldrb	r3, [r3, #15]
 80030e4:	2204      	movs	r2, #4
 80030e6:	4293      	cmp	r3, r2
 80030e8:	f040 8233 	bne.w	8003552 <PIN_Setup+0x89a>
						GPIO_Pin_Init(GPIOD, USART2_RTS_Pin.PD4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80030ec:	2004      	movs	r0, #4
 80030ee:	2402      	movs	r4, #2
 80030f0:	2500      	movs	r5, #0
 80030f2:	2302      	movs	r3, #2
 80030f4:	2200      	movs	r2, #0
 80030f6:	2107      	movs	r1, #7
 80030f8:	9102      	str	r1, [sp, #8]
 80030fa:	9201      	str	r2, [sp, #4]
 80030fc:	9300      	str	r3, [sp, #0]
 80030fe:	462b      	mov	r3, r5
 8003100:	4622      	mov	r2, r4
 8003102:	4601      	mov	r1, r0
 8003104:	4836      	ldr	r0, [pc, #216]	@ (80031e0 <PIN_Setup+0x528>)
 8003106:	f7fe fad9 	bl	80016bc <GPIO_Pin_Init>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800310a:	e222      	b.n	8003552 <PIN_Setup+0x89a>
		else if((config->mode == USART_Mode.SmartCard) ||
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	7b1b      	ldrb	r3, [r3, #12]
 8003110:	2206      	movs	r2, #6
 8003112:	4293      	cmp	r3, r2
 8003114:	d00a      	beq.n	800312c <PIN_Setup+0x474>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	7b1b      	ldrb	r3, [r3, #12]
 800311a:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 800311c:	4293      	cmp	r3, r2
 800311e:	d005      	beq.n	800312c <PIN_Setup+0x474>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	7b1b      	ldrb	r3, [r3, #12]
 8003124:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 8003126:	4293      	cmp	r3, r2
 8003128:	f040 8216 	bne.w	8003558 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART2_TX_Pin.PA2)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7b5b      	ldrb	r3, [r3, #13]
 8003130:	2202      	movs	r2, #2
 8003132:	4293      	cmp	r3, r2
 8003134:	d10f      	bne.n	8003156 <PIN_Setup+0x49e>
				GPIO_Pin_Init(GPIOA, USART2_TX_Pin.PA2, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8003136:	2002      	movs	r0, #2
 8003138:	2402      	movs	r4, #2
 800313a:	2500      	movs	r5, #0
 800313c:	2302      	movs	r3, #2
 800313e:	2200      	movs	r2, #0
 8003140:	2107      	movs	r1, #7
 8003142:	9102      	str	r1, [sp, #8]
 8003144:	9201      	str	r2, [sp, #4]
 8003146:	9300      	str	r3, [sp, #0]
 8003148:	462b      	mov	r3, r5
 800314a:	4622      	mov	r2, r4
 800314c:	4601      	mov	r1, r0
 800314e:	4825      	ldr	r0, [pc, #148]	@ (80031e4 <PIN_Setup+0x52c>)
 8003150:	f7fe fab4 	bl	80016bc <GPIO_Pin_Init>
 8003154:	e013      	b.n	800317e <PIN_Setup+0x4c6>
			else if(config->TX_Pin == USART2_TX_Pin.PD5)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	7b5b      	ldrb	r3, [r3, #13]
 800315a:	2205      	movs	r2, #5
 800315c:	4293      	cmp	r3, r2
 800315e:	d10e      	bne.n	800317e <PIN_Setup+0x4c6>
				GPIO_Pin_Init(GPIOD, USART2_TX_Pin.PD5, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8003160:	2005      	movs	r0, #5
 8003162:	2402      	movs	r4, #2
 8003164:	2500      	movs	r5, #0
 8003166:	2302      	movs	r3, #2
 8003168:	2200      	movs	r2, #0
 800316a:	2107      	movs	r1, #7
 800316c:	9102      	str	r1, [sp, #8]
 800316e:	9201      	str	r2, [sp, #4]
 8003170:	9300      	str	r3, [sp, #0]
 8003172:	462b      	mov	r3, r5
 8003174:	4622      	mov	r2, r4
 8003176:	4601      	mov	r1, r0
 8003178:	4819      	ldr	r0, [pc, #100]	@ (80031e0 <PIN_Setup+0x528>)
 800317a:	f7fe fa9f 	bl	80016bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.SmartCard_Clock))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7b1b      	ldrb	r3, [r3, #12]
 8003182:	2207      	movs	r2, #7
 8003184:	4293      	cmp	r3, r2
 8003186:	f040 81e7 	bne.w	8003558 <PIN_Setup+0x8a0>
				if(config->CLK_Pin == USART2_CLK_Pin.PA4)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	7bdb      	ldrb	r3, [r3, #15]
 800318e:	2204      	movs	r2, #4
 8003190:	4293      	cmp	r3, r2
 8003192:	d10f      	bne.n	80031b4 <PIN_Setup+0x4fc>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PA4, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 8003194:	2004      	movs	r0, #4
 8003196:	2402      	movs	r4, #2
 8003198:	2500      	movs	r5, #0
 800319a:	2302      	movs	r3, #2
 800319c:	2200      	movs	r2, #0
 800319e:	2107      	movs	r1, #7
 80031a0:	9102      	str	r1, [sp, #8]
 80031a2:	9201      	str	r2, [sp, #4]
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	462b      	mov	r3, r5
 80031a8:	4622      	mov	r2, r4
 80031aa:	4601      	mov	r1, r0
 80031ac:	480d      	ldr	r0, [pc, #52]	@ (80031e4 <PIN_Setup+0x52c>)
 80031ae:	f7fe fa85 	bl	80016bc <GPIO_Pin_Init>
}
 80031b2:	e1d1      	b.n	8003558 <PIN_Setup+0x8a0>
				else if(config->CLK_Pin == USART2_CLK_Pin.PD7)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	7bdb      	ldrb	r3, [r3, #15]
 80031b8:	2207      	movs	r2, #7
 80031ba:	4293      	cmp	r3, r2
 80031bc:	f040 81cc 	bne.w	8003558 <PIN_Setup+0x8a0>
					GPIO_Pin_Init(GPIOA, USART2_CLK_Pin.PD7, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_2);
 80031c0:	2007      	movs	r0, #7
 80031c2:	2402      	movs	r4, #2
 80031c4:	2500      	movs	r5, #0
 80031c6:	2302      	movs	r3, #2
 80031c8:	2200      	movs	r2, #0
 80031ca:	2107      	movs	r1, #7
 80031cc:	9102      	str	r1, [sp, #8]
 80031ce:	9201      	str	r2, [sp, #4]
 80031d0:	9300      	str	r3, [sp, #0]
 80031d2:	462b      	mov	r3, r5
 80031d4:	4622      	mov	r2, r4
 80031d6:	4601      	mov	r1, r0
 80031d8:	4802      	ldr	r0, [pc, #8]	@ (80031e4 <PIN_Setup+0x52c>)
 80031da:	f7fe fa6f 	bl	80016bc <GPIO_Pin_Init>
}
 80031de:	e1bb      	b.n	8003558 <PIN_Setup+0x8a0>
 80031e0:	40020c00 	.word	0x40020c00
 80031e4:	40020000 	.word	0x40020000
	else if(config->Port == USART3)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4aaa      	ldr	r2, [pc, #680]	@ (8003498 <PIN_Setup+0x7e0>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	f040 81b2 	bne.w	8003558 <PIN_Setup+0x8a0>
		if((config->mode == USART_Mode.Asynchronous) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	7b1b      	ldrb	r3, [r3, #12]
 80031f8:	2201      	movs	r2, #1
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d00f      	beq.n	800321e <PIN_Setup+0x566>
		   (config->mode == USART_Mode.Synchronous) ||
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	7b1b      	ldrb	r3, [r3, #12]
 8003202:	2202      	movs	r2, #2
		if((config->mode == USART_Mode.Asynchronous) ||
 8003204:	4293      	cmp	r3, r2
 8003206:	d00a      	beq.n	800321e <PIN_Setup+0x566>
		   (config->mode == USART_Mode.IrDA) ||
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	7b1b      	ldrb	r3, [r3, #12]
 800320c:	2204      	movs	r2, #4
		   (config->mode == USART_Mode.Synchronous) ||
 800320e:	4293      	cmp	r3, r2
 8003210:	d005      	beq.n	800321e <PIN_Setup+0x566>
		   (config->mode == USART_Mode.LIN) )
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	7b1b      	ldrb	r3, [r3, #12]
 8003216:	2205      	movs	r2, #5
		   (config->mode == USART_Mode.IrDA) ||
 8003218:	4293      	cmp	r3, r2
 800321a:	f040 8119 	bne.w	8003450 <PIN_Setup+0x798>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	7b5b      	ldrb	r3, [r3, #13]
 8003222:	220b      	movs	r2, #11
 8003224:	4293      	cmp	r3, r2
 8003226:	d10f      	bne.n	8003248 <PIN_Setup+0x590>
 8003228:	200b      	movs	r0, #11
 800322a:	2402      	movs	r4, #2
 800322c:	2500      	movs	r5, #0
 800322e:	2302      	movs	r3, #2
 8003230:	2200      	movs	r2, #0
 8003232:	2107      	movs	r1, #7
 8003234:	9102      	str	r1, [sp, #8]
 8003236:	9201      	str	r2, [sp, #4]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	462b      	mov	r3, r5
 800323c:	4622      	mov	r2, r4
 800323e:	4601      	mov	r1, r0
 8003240:	4896      	ldr	r0, [pc, #600]	@ (800349c <PIN_Setup+0x7e4>)
 8003242:	f7fe fa3b 	bl	80016bc <GPIO_Pin_Init>
 8003246:	e028      	b.n	800329a <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	7b5b      	ldrb	r3, [r3, #13]
 800324c:	220a      	movs	r2, #10
 800324e:	4293      	cmp	r3, r2
 8003250:	d10f      	bne.n	8003272 <PIN_Setup+0x5ba>
 8003252:	200a      	movs	r0, #10
 8003254:	2402      	movs	r4, #2
 8003256:	2500      	movs	r5, #0
 8003258:	2302      	movs	r3, #2
 800325a:	2200      	movs	r2, #0
 800325c:	2107      	movs	r1, #7
 800325e:	9102      	str	r1, [sp, #8]
 8003260:	9201      	str	r2, [sp, #4]
 8003262:	9300      	str	r3, [sp, #0]
 8003264:	462b      	mov	r3, r5
 8003266:	4622      	mov	r2, r4
 8003268:	4601      	mov	r1, r0
 800326a:	488d      	ldr	r0, [pc, #564]	@ (80034a0 <PIN_Setup+0x7e8>)
 800326c:	f7fe fa26 	bl	80016bc <GPIO_Pin_Init>
 8003270:	e013      	b.n	800329a <PIN_Setup+0x5e2>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	7b5b      	ldrb	r3, [r3, #13]
 8003276:	2208      	movs	r2, #8
 8003278:	4293      	cmp	r3, r2
 800327a:	d10e      	bne.n	800329a <PIN_Setup+0x5e2>
 800327c:	2008      	movs	r0, #8
 800327e:	2402      	movs	r4, #2
 8003280:	2500      	movs	r5, #0
 8003282:	2302      	movs	r3, #2
 8003284:	2200      	movs	r2, #0
 8003286:	2107      	movs	r1, #7
 8003288:	9102      	str	r1, [sp, #8]
 800328a:	9201      	str	r2, [sp, #4]
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	462b      	mov	r3, r5
 8003290:	4622      	mov	r2, r4
 8003292:	4601      	mov	r1, r0
 8003294:	4882      	ldr	r0, [pc, #520]	@ (80034a0 <PIN_Setup+0x7e8>)
 8003296:	f7fe fa11 	bl	80016bc <GPIO_Pin_Init>
			if(config->RX_Pin == USART3_RX_Pin.PB10)GPIO_Pin_Init(GPIOA, USART3_RX_Pin.PB10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	7b9b      	ldrb	r3, [r3, #14]
 800329e:	220a      	movs	r2, #10
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d10f      	bne.n	80032c4 <PIN_Setup+0x60c>
 80032a4:	200a      	movs	r0, #10
 80032a6:	2402      	movs	r4, #2
 80032a8:	2500      	movs	r5, #0
 80032aa:	2302      	movs	r3, #2
 80032ac:	2200      	movs	r2, #0
 80032ae:	2107      	movs	r1, #7
 80032b0:	9102      	str	r1, [sp, #8]
 80032b2:	9201      	str	r2, [sp, #4]
 80032b4:	9300      	str	r3, [sp, #0]
 80032b6:	462b      	mov	r3, r5
 80032b8:	4622      	mov	r2, r4
 80032ba:	4601      	mov	r1, r0
 80032bc:	4877      	ldr	r0, [pc, #476]	@ (800349c <PIN_Setup+0x7e4>)
 80032be:	f7fe f9fd 	bl	80016bc <GPIO_Pin_Init>
 80032c2:	e028      	b.n	8003316 <PIN_Setup+0x65e>
			else if(config->RX_Pin == USART3_RX_Pin.PC11)GPIO_Pin_Init(GPIOB, USART3_RX_Pin.PC11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	7b9b      	ldrb	r3, [r3, #14]
 80032c8:	220b      	movs	r2, #11
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d10f      	bne.n	80032ee <PIN_Setup+0x636>
 80032ce:	200b      	movs	r0, #11
 80032d0:	2402      	movs	r4, #2
 80032d2:	2500      	movs	r5, #0
 80032d4:	2302      	movs	r3, #2
 80032d6:	2200      	movs	r2, #0
 80032d8:	2107      	movs	r1, #7
 80032da:	9102      	str	r1, [sp, #8]
 80032dc:	9201      	str	r2, [sp, #4]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	462b      	mov	r3, r5
 80032e2:	4622      	mov	r2, r4
 80032e4:	4601      	mov	r1, r0
 80032e6:	486e      	ldr	r0, [pc, #440]	@ (80034a0 <PIN_Setup+0x7e8>)
 80032e8:	f7fe f9e8 	bl	80016bc <GPIO_Pin_Init>
 80032ec:	e013      	b.n	8003316 <PIN_Setup+0x65e>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	7b5b      	ldrb	r3, [r3, #13]
 80032f2:	2208      	movs	r2, #8
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d10e      	bne.n	8003316 <PIN_Setup+0x65e>
 80032f8:	2008      	movs	r0, #8
 80032fa:	2402      	movs	r4, #2
 80032fc:	2500      	movs	r5, #0
 80032fe:	2302      	movs	r3, #2
 8003300:	2200      	movs	r2, #0
 8003302:	2107      	movs	r1, #7
 8003304:	9102      	str	r1, [sp, #8]
 8003306:	9201      	str	r2, [sp, #4]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	462b      	mov	r3, r5
 800330c:	4622      	mov	r2, r4
 800330e:	4601      	mov	r1, r0
 8003310:	4863      	ldr	r0, [pc, #396]	@ (80034a0 <PIN_Setup+0x7e8>)
 8003312:	f7fe f9d3 	bl	80016bc <GPIO_Pin_Init>
			if((config->mode == USART_Mode.Synchronous))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	7b1b      	ldrb	r3, [r3, #12]
 800331a:	2202      	movs	r2, #2
 800331c:	4293      	cmp	r3, r2
 800331e:	d128      	bne.n	8003372 <PIN_Setup+0x6ba>
				if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	7bdb      	ldrb	r3, [r3, #15]
 8003324:	220c      	movs	r2, #12
 8003326:	4293      	cmp	r3, r2
 8003328:	d10f      	bne.n	800334a <PIN_Setup+0x692>
 800332a:	200c      	movs	r0, #12
 800332c:	2402      	movs	r4, #2
 800332e:	2500      	movs	r5, #0
 8003330:	2302      	movs	r3, #2
 8003332:	2200      	movs	r2, #0
 8003334:	2107      	movs	r1, #7
 8003336:	9102      	str	r1, [sp, #8]
 8003338:	9201      	str	r2, [sp, #4]
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	462b      	mov	r3, r5
 800333e:	4622      	mov	r2, r4
 8003340:	4601      	mov	r1, r0
 8003342:	4857      	ldr	r0, [pc, #348]	@ (80034a0 <PIN_Setup+0x7e8>)
 8003344:	f7fe f9ba 	bl	80016bc <GPIO_Pin_Init>
 8003348:	e013      	b.n	8003372 <PIN_Setup+0x6ba>
				else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	7bdb      	ldrb	r3, [r3, #15]
 800334e:	220a      	movs	r2, #10
 8003350:	4293      	cmp	r3, r2
 8003352:	d10e      	bne.n	8003372 <PIN_Setup+0x6ba>
 8003354:	200a      	movs	r0, #10
 8003356:	2402      	movs	r4, #2
 8003358:	2500      	movs	r5, #0
 800335a:	2302      	movs	r3, #2
 800335c:	2200      	movs	r2, #0
 800335e:	2107      	movs	r1, #7
 8003360:	9102      	str	r1, [sp, #8]
 8003362:	9201      	str	r2, [sp, #4]
 8003364:	9300      	str	r3, [sp, #0]
 8003366:	462b      	mov	r3, r5
 8003368:	4622      	mov	r2, r4
 800336a:	4601      	mov	r1, r0
 800336c:	484d      	ldr	r0, [pc, #308]	@ (80034a4 <PIN_Setup+0x7ec>)
 800336e:	f7fe f9a5 	bl	80016bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	7cdb      	ldrb	r3, [r3, #19]
 8003376:	2200      	movs	r2, #0
 8003378:	4293      	cmp	r3, r2
 800337a:	f000 80ec 	beq.w	8003556 <PIN_Setup+0x89e>
				if((config->hardware_flow == Hardware_Flow.CTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	7cdb      	ldrb	r3, [r3, #19]
 8003382:	2201      	movs	r2, #1
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <PIN_Setup+0x6da>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	7cdb      	ldrb	r3, [r3, #19]
 800338c:	2203      	movs	r2, #3
 800338e:	4293      	cmp	r3, r2
 8003390:	d128      	bne.n	80033e4 <PIN_Setup+0x72c>
					if(config->CLK_Pin == USART3_CTS_Pin.PB13)GPIO_Pin_Init(GPIOB, USART3_CTS_Pin.PB13, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	7bdb      	ldrb	r3, [r3, #15]
 8003396:	2200      	movs	r2, #0
 8003398:	4293      	cmp	r3, r2
 800339a:	d10f      	bne.n	80033bc <PIN_Setup+0x704>
 800339c:	2000      	movs	r0, #0
 800339e:	2402      	movs	r4, #2
 80033a0:	2500      	movs	r5, #0
 80033a2:	2302      	movs	r3, #2
 80033a4:	2200      	movs	r2, #0
 80033a6:	2107      	movs	r1, #7
 80033a8:	9102      	str	r1, [sp, #8]
 80033aa:	9201      	str	r2, [sp, #4]
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	462b      	mov	r3, r5
 80033b0:	4622      	mov	r2, r4
 80033b2:	4601      	mov	r1, r0
 80033b4:	483a      	ldr	r0, [pc, #232]	@ (80034a0 <PIN_Setup+0x7e8>)
 80033b6:	f7fe f981 	bl	80016bc <GPIO_Pin_Init>
 80033ba:	e013      	b.n	80033e4 <PIN_Setup+0x72c>
					else if(config->CLK_Pin == USART3_CTS_Pin.PD11)GPIO_Pin_Init(GPIOD, USART3_CTS_Pin.PD11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	7bdb      	ldrb	r3, [r3, #15]
 80033c0:	2203      	movs	r2, #3
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d10e      	bne.n	80033e4 <PIN_Setup+0x72c>
 80033c6:	2003      	movs	r0, #3
 80033c8:	2402      	movs	r4, #2
 80033ca:	2500      	movs	r5, #0
 80033cc:	2302      	movs	r3, #2
 80033ce:	2200      	movs	r2, #0
 80033d0:	2107      	movs	r1, #7
 80033d2:	9102      	str	r1, [sp, #8]
 80033d4:	9201      	str	r2, [sp, #4]
 80033d6:	9300      	str	r3, [sp, #0]
 80033d8:	462b      	mov	r3, r5
 80033da:	4622      	mov	r2, r4
 80033dc:	4601      	mov	r1, r0
 80033de:	4831      	ldr	r0, [pc, #196]	@ (80034a4 <PIN_Setup+0x7ec>)
 80033e0:	f7fe f96c 	bl	80016bc <GPIO_Pin_Init>
				if((config->hardware_flow == Hardware_Flow.RTS_Enable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	7cdb      	ldrb	r3, [r3, #19]
 80033e8:	2202      	movs	r2, #2
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d005      	beq.n	80033fa <PIN_Setup+0x742>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	7cdb      	ldrb	r3, [r3, #19]
 80033f2:	2203      	movs	r2, #3
 80033f4:	4293      	cmp	r3, r2
 80033f6:	f040 80ae 	bne.w	8003556 <PIN_Setup+0x89e>
					if(config->CLK_Pin == USART3_RTS_Pin.PB14)GPIO_Pin_Init(GPIOB, USART3_RTS_Pin.PB14, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	7bdb      	ldrb	r3, [r3, #15]
 80033fe:	2201      	movs	r2, #1
 8003400:	4293      	cmp	r3, r2
 8003402:	d10f      	bne.n	8003424 <PIN_Setup+0x76c>
 8003404:	2001      	movs	r0, #1
 8003406:	2402      	movs	r4, #2
 8003408:	2500      	movs	r5, #0
 800340a:	2302      	movs	r3, #2
 800340c:	2200      	movs	r2, #0
 800340e:	2107      	movs	r1, #7
 8003410:	9102      	str	r1, [sp, #8]
 8003412:	9201      	str	r2, [sp, #4]
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	462b      	mov	r3, r5
 8003418:	4622      	mov	r2, r4
 800341a:	4601      	mov	r1, r0
 800341c:	4820      	ldr	r0, [pc, #128]	@ (80034a0 <PIN_Setup+0x7e8>)
 800341e:	f7fe f94d 	bl	80016bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8003422:	e098      	b.n	8003556 <PIN_Setup+0x89e>
					else if(config->CLK_Pin == USART3_RTS_Pin.PD12)GPIO_Pin_Init(GPIOD, USART3_RTS_Pin.PD12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	7bdb      	ldrb	r3, [r3, #15]
 8003428:	2204      	movs	r2, #4
 800342a:	4293      	cmp	r3, r2
 800342c:	f040 8093 	bne.w	8003556 <PIN_Setup+0x89e>
 8003430:	2004      	movs	r0, #4
 8003432:	2402      	movs	r4, #2
 8003434:	2500      	movs	r5, #0
 8003436:	2302      	movs	r3, #2
 8003438:	2200      	movs	r2, #0
 800343a:	2107      	movs	r1, #7
 800343c:	9102      	str	r1, [sp, #8]
 800343e:	9201      	str	r2, [sp, #4]
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	462b      	mov	r3, r5
 8003444:	4622      	mov	r2, r4
 8003446:	4601      	mov	r1, r0
 8003448:	4816      	ldr	r0, [pc, #88]	@ (80034a4 <PIN_Setup+0x7ec>)
 800344a:	f7fe f937 	bl	80016bc <GPIO_Pin_Init>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800344e:	e082      	b.n	8003556 <PIN_Setup+0x89e>
		else if((config->mode == USART_Mode.SmartCard) ||
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	7b1b      	ldrb	r3, [r3, #12]
 8003454:	2206      	movs	r2, #6
 8003456:	4293      	cmp	r3, r2
 8003458:	d009      	beq.n	800346e <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	7b1b      	ldrb	r3, [r3, #12]
 800345e:	2207      	movs	r2, #7
		else if((config->mode == USART_Mode.SmartCard) ||
 8003460:	4293      	cmp	r3, r2
 8003462:	d004      	beq.n	800346e <PIN_Setup+0x7b6>
		   (config->mode == USART_Mode.Single_Wire_Half_Duplex) )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7b1b      	ldrb	r3, [r3, #12]
 8003468:	2203      	movs	r2, #3
		   (config->mode == USART_Mode.SmartCard_Clock) ||
 800346a:	4293      	cmp	r3, r2
 800346c:	d174      	bne.n	8003558 <PIN_Setup+0x8a0>
			if(config->TX_Pin == USART3_TX_Pin.PB11)GPIO_Pin_Init(GPIOA, USART3_TX_Pin.PB11, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	7b5b      	ldrb	r3, [r3, #13]
 8003472:	220b      	movs	r2, #11
 8003474:	4293      	cmp	r3, r2
 8003476:	d117      	bne.n	80034a8 <PIN_Setup+0x7f0>
 8003478:	200b      	movs	r0, #11
 800347a:	2402      	movs	r4, #2
 800347c:	2500      	movs	r5, #0
 800347e:	2302      	movs	r3, #2
 8003480:	2200      	movs	r2, #0
 8003482:	2107      	movs	r1, #7
 8003484:	9102      	str	r1, [sp, #8]
 8003486:	9201      	str	r2, [sp, #4]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	462b      	mov	r3, r5
 800348c:	4622      	mov	r2, r4
 800348e:	4601      	mov	r1, r0
 8003490:	4802      	ldr	r0, [pc, #8]	@ (800349c <PIN_Setup+0x7e4>)
 8003492:	f7fe f913 	bl	80016bc <GPIO_Pin_Init>
 8003496:	e030      	b.n	80034fa <PIN_Setup+0x842>
 8003498:	40004800 	.word	0x40004800
 800349c:	40020000 	.word	0x40020000
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40020c00 	.word	0x40020c00
			else if(config->TX_Pin == USART3_TX_Pin.PC10)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PC10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	7b5b      	ldrb	r3, [r3, #13]
 80034ac:	220a      	movs	r2, #10
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d10f      	bne.n	80034d2 <PIN_Setup+0x81a>
 80034b2:	200a      	movs	r0, #10
 80034b4:	2402      	movs	r4, #2
 80034b6:	2500      	movs	r5, #0
 80034b8:	2302      	movs	r3, #2
 80034ba:	2200      	movs	r2, #0
 80034bc:	2107      	movs	r1, #7
 80034be:	9102      	str	r1, [sp, #8]
 80034c0:	9201      	str	r2, [sp, #4]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	462b      	mov	r3, r5
 80034c6:	4622      	mov	r2, r4
 80034c8:	4601      	mov	r1, r0
 80034ca:	4825      	ldr	r0, [pc, #148]	@ (8003560 <PIN_Setup+0x8a8>)
 80034cc:	f7fe f8f6 	bl	80016bc <GPIO_Pin_Init>
 80034d0:	e013      	b.n	80034fa <PIN_Setup+0x842>
			else if(config->TX_Pin == USART3_TX_Pin.PD8)GPIO_Pin_Init(GPIOB, USART3_TX_Pin.PD8, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	7b5b      	ldrb	r3, [r3, #13]
 80034d6:	2208      	movs	r2, #8
 80034d8:	4293      	cmp	r3, r2
 80034da:	d10e      	bne.n	80034fa <PIN_Setup+0x842>
 80034dc:	2008      	movs	r0, #8
 80034de:	2402      	movs	r4, #2
 80034e0:	2500      	movs	r5, #0
 80034e2:	2302      	movs	r3, #2
 80034e4:	2200      	movs	r2, #0
 80034e6:	2107      	movs	r1, #7
 80034e8:	9102      	str	r1, [sp, #8]
 80034ea:	9201      	str	r2, [sp, #4]
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	462b      	mov	r3, r5
 80034f0:	4622      	mov	r2, r4
 80034f2:	4601      	mov	r1, r0
 80034f4:	481a      	ldr	r0, [pc, #104]	@ (8003560 <PIN_Setup+0x8a8>)
 80034f6:	f7fe f8e1 	bl	80016bc <GPIO_Pin_Init>
			if(config->CLK_Pin == USART3_CLK_Pin.PB12)GPIO_Pin_Init(GPIOB, USART3_CLK_Pin.PB12, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7bdb      	ldrb	r3, [r3, #15]
 80034fe:	220c      	movs	r2, #12
 8003500:	4293      	cmp	r3, r2
 8003502:	d10f      	bne.n	8003524 <PIN_Setup+0x86c>
 8003504:	200c      	movs	r0, #12
 8003506:	2402      	movs	r4, #2
 8003508:	2500      	movs	r5, #0
 800350a:	2302      	movs	r3, #2
 800350c:	2200      	movs	r2, #0
 800350e:	2107      	movs	r1, #7
 8003510:	9102      	str	r1, [sp, #8]
 8003512:	9201      	str	r2, [sp, #4]
 8003514:	9300      	str	r3, [sp, #0]
 8003516:	462b      	mov	r3, r5
 8003518:	4622      	mov	r2, r4
 800351a:	4601      	mov	r1, r0
 800351c:	4810      	ldr	r0, [pc, #64]	@ (8003560 <PIN_Setup+0x8a8>)
 800351e:	f7fe f8cd 	bl	80016bc <GPIO_Pin_Init>
}
 8003522:	e019      	b.n	8003558 <PIN_Setup+0x8a0>
			else if(config->CLK_Pin == USART3_CLK_Pin.PD10)GPIO_Pin_Init(GPIOD, USART3_CLK_Pin.PD10, MODE.Alternate_Function, Output_Type.Push_Pull, Speed.High_Speed, Pull.No_Pull_Up_Down, Alternate_Functions.USART_3);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7bdb      	ldrb	r3, [r3, #15]
 8003528:	220a      	movs	r2, #10
 800352a:	4293      	cmp	r3, r2
 800352c:	d114      	bne.n	8003558 <PIN_Setup+0x8a0>
 800352e:	200a      	movs	r0, #10
 8003530:	2402      	movs	r4, #2
 8003532:	2500      	movs	r5, #0
 8003534:	2302      	movs	r3, #2
 8003536:	2200      	movs	r2, #0
 8003538:	2107      	movs	r1, #7
 800353a:	9102      	str	r1, [sp, #8]
 800353c:	9201      	str	r2, [sp, #4]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	462b      	mov	r3, r5
 8003542:	4622      	mov	r2, r4
 8003544:	4601      	mov	r1, r0
 8003546:	4807      	ldr	r0, [pc, #28]	@ (8003564 <PIN_Setup+0x8ac>)
 8003548:	f7fe f8b8 	bl	80016bc <GPIO_Pin_Init>
}
 800354c:	e004      	b.n	8003558 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 800354e:	bf00      	nop
 8003550:	e002      	b.n	8003558 <PIN_Setup+0x8a0>
			if((config->hardware_flow != Hardware_Flow.Disable) || (config->hardware_flow == Hardware_Flow.CTS_RTS_Enable))
 8003552:	bf00      	nop
 8003554:	e000      	b.n	8003558 <PIN_Setup+0x8a0>
			if(config->hardware_flow != Hardware_Flow.Disable)
 8003556:	bf00      	nop
}
 8003558:	bf00      	nop
 800355a:	3708      	adds	r7, #8
 800355c:	46bd      	mov	sp, r7
 800355e:	bdb0      	pop	{r4, r5, r7, pc}
 8003560:	40020400 	.word	0x40020400
 8003564:	40020c00 	.word	0x40020c00

08003568 <USART_Init>:

int8_t USART_Init(USART_Config *config)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08a      	sub	sp, #40	@ 0x28
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	USART_Clock_Enable(config);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fafd 	bl	8002b70 <USART_Clock_Enable>
	PIN_Setup(config);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7ff fb9e 	bl	8002cb8 <PIN_Setup>

//	USART1 -> CR1 |= USART_CR1_UE;

	double brr = (168000000.0/ (16.0 * 2.0 * (double)(config->baudrate)));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	4618      	mov	r0, r3
 8003582:	f7fc ff63 	bl	800044c <__aeabi_ui2d>
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	4b4d      	ldr	r3, [pc, #308]	@ (80036c0 <USART_Init+0x158>)
 800358c:	f7fc ffd8 	bl	8000540 <__aeabi_dmul>
 8003590:	4602      	mov	r2, r0
 8003592:	460b      	mov	r3, r1
 8003594:	a148      	add	r1, pc, #288	@ (adr r1, 80036b8 <USART_Init+0x150>)
 8003596:	e9d1 0100 	ldrd	r0, r1, [r1]
 800359a:	f7fd f8fb 	bl	8000794 <__aeabi_ddiv>
 800359e:	4602      	mov	r2, r0
 80035a0:	460b      	mov	r3, r1
 80035a2:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double div_frac, mantissa;
	separateFractionAndIntegral(brr, &div_frac, &mantissa);
 80035a6:	f107 0208 	add.w	r2, r7, #8
 80035aa:	f107 0310 	add.w	r3, r7, #16
 80035ae:	4611      	mov	r1, r2
 80035b0:	4618      	mov	r0, r3
 80035b2:	ed97 0b08 	vldr	d0, [r7, #32]
 80035b6:	f7ff fa94 	bl	8002ae2 <separateFractionAndIntegral>

	int div_frac_1 = (int)(ceil(div_frac*16.0));
 80035ba:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	4b40      	ldr	r3, [pc, #256]	@ (80036c4 <USART_Init+0x15c>)
 80035c4:	f7fc ffbc 	bl	8000540 <__aeabi_dmul>
 80035c8:	4602      	mov	r2, r0
 80035ca:	460b      	mov	r3, r1
 80035cc:	ec43 2b17 	vmov	d7, r2, r3
 80035d0:	eeb0 0a47 	vmov.f32	s0, s14
 80035d4:	eef0 0a67 	vmov.f32	s1, s15
 80035d8:	f000 f8ee 	bl	80037b8 <ceil>
 80035dc:	ec53 2b10 	vmov	r2, r3, d0
 80035e0:	4610      	mov	r0, r2
 80035e2:	4619      	mov	r1, r3
 80035e4:	f7fd fa46 	bl	8000a74 <__aeabi_d2iz>
 80035e8:	4603      	mov	r3, r0
 80035ea:	61fb      	str	r3, [r7, #28]
	int mantissa_1 = (int)(ceil(mantissa));
 80035ec:	ed97 7b02 	vldr	d7, [r7, #8]
 80035f0:	eeb0 0a47 	vmov.f32	s0, s14
 80035f4:	eef0 0a67 	vmov.f32	s1, s15
 80035f8:	f000 f8de 	bl	80037b8 <ceil>
 80035fc:	ec53 2b10 	vmov	r2, r3, d0
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f7fd fa36 	bl	8000a74 <__aeabi_d2iz>
 8003608:	4603      	mov	r3, r0
 800360a:	61bb      	str	r3, [r7, #24]

	config->Port-> CR1 |= USART_CR1_UE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800361a:	60da      	str	r2, [r3, #12]
	config->Port->BRR = (mantissa_1<<4)|(div_frac_1);
 800361c:	69bb      	ldr	r3, [r7, #24]
 800361e:	011a      	lsls	r2, r3, #4
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	431a      	orrs	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	609a      	str	r2, [r3, #8]
	config->Port->CR1 |= config->parity; //Parity
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	68da      	ldr	r2, [r3, #12]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	7d9b      	ldrb	r3, [r3, #22]
 8003634:	4619      	mov	r1, r3
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	60da      	str	r2, [r3, #12]
	config->Port->CR1 |= config->interrupt; //interrupt
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	68da      	ldr	r2, [r3, #12]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	7c9b      	ldrb	r3, [r3, #18]
 8003648:	4619      	mov	r1, r3
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	60da      	str	r2, [r3, #12]
	config->Port->CR2 |= config->stop_bits;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	691a      	ldr	r2, [r3, #16]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	7d1b      	ldrb	r3, [r3, #20]
 800365c:	4619      	mov	r1, r3
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	430a      	orrs	r2, r1
 8003664:	611a      	str	r2, [r3, #16]

	if(config->mode == USART_Mode.Single_Wire_Half_Duplex) config -> Port -> CR3 |= USART_CR3_HDSEL;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	7b1b      	ldrb	r3, [r3, #12]
 800366a:	2203      	movs	r2, #3
 800366c:	4293      	cmp	r3, r2
 800366e:	d107      	bne.n	8003680 <USART_Init+0x118>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	695a      	ldr	r2, [r3, #20]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 0208 	orr.w	r2, r2, #8
 800367e:	615a      	str	r2, [r3, #20]
	if(config->mode == USART_Mode.LIN) config -> Port -> CR2 |= USART_CR2_LINEN;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	7b1b      	ldrb	r3, [r3, #12]
 8003684:	2205      	movs	r2, #5
 8003686:	4293      	cmp	r3, r2
 8003688:	d107      	bne.n	800369a <USART_Init+0x132>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	691a      	ldr	r2, [r3, #16]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003698:	611a      	str	r2, [r3, #16]


	config->Port->CR1 |= USART_CR1_RE | USART_CR1_TE  ;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68da      	ldr	r2, [r3, #12]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 020c 	orr.w	r2, r2, #12
 80036a8:	60da      	str	r2, [r3, #12]

	return 1;
 80036aa:	2301      	movs	r3, #1
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3728      	adds	r7, #40	@ 0x28
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd80      	pop	{r7, pc}
 80036b4:	f3af 8000 	nop.w
 80036b8:	00000000 	.word	0x00000000
 80036bc:	41a406f4 	.word	0x41a406f4
 80036c0:	40400000 	.word	0x40400000
 80036c4:	40300000 	.word	0x40300000

080036c8 <__libc_init_array>:
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	4d0d      	ldr	r5, [pc, #52]	@ (8003700 <__libc_init_array+0x38>)
 80036cc:	4c0d      	ldr	r4, [pc, #52]	@ (8003704 <__libc_init_array+0x3c>)
 80036ce:	1b64      	subs	r4, r4, r5
 80036d0:	10a4      	asrs	r4, r4, #2
 80036d2:	2600      	movs	r6, #0
 80036d4:	42a6      	cmp	r6, r4
 80036d6:	d109      	bne.n	80036ec <__libc_init_array+0x24>
 80036d8:	4d0b      	ldr	r5, [pc, #44]	@ (8003708 <__libc_init_array+0x40>)
 80036da:	4c0c      	ldr	r4, [pc, #48]	@ (800370c <__libc_init_array+0x44>)
 80036dc:	f001 f8c4 	bl	8004868 <_init>
 80036e0:	1b64      	subs	r4, r4, r5
 80036e2:	10a4      	asrs	r4, r4, #2
 80036e4:	2600      	movs	r6, #0
 80036e6:	42a6      	cmp	r6, r4
 80036e8:	d105      	bne.n	80036f6 <__libc_init_array+0x2e>
 80036ea:	bd70      	pop	{r4, r5, r6, pc}
 80036ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80036f0:	4798      	blx	r3
 80036f2:	3601      	adds	r6, #1
 80036f4:	e7ee      	b.n	80036d4 <__libc_init_array+0xc>
 80036f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80036fa:	4798      	blx	r3
 80036fc:	3601      	adds	r6, #1
 80036fe:	e7f2      	b.n	80036e6 <__libc_init_array+0x1e>
 8003700:	08004a70 	.word	0x08004a70
 8003704:	08004a70 	.word	0x08004a70
 8003708:	08004a70 	.word	0x08004a70
 800370c:	08004a74 	.word	0x08004a74

08003710 <sin>:
 8003710:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003712:	ec53 2b10 	vmov	r2, r3, d0
 8003716:	4826      	ldr	r0, [pc, #152]	@ (80037b0 <sin+0xa0>)
 8003718:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800371c:	4281      	cmp	r1, r0
 800371e:	d807      	bhi.n	8003730 <sin+0x20>
 8003720:	ed9f 1b21 	vldr	d1, [pc, #132]	@ 80037a8 <sin+0x98>
 8003724:	2000      	movs	r0, #0
 8003726:	b005      	add	sp, #20
 8003728:	f85d eb04 	ldr.w	lr, [sp], #4
 800372c:	f000 b988 	b.w	8003a40 <__kernel_sin>
 8003730:	4820      	ldr	r0, [pc, #128]	@ (80037b4 <sin+0xa4>)
 8003732:	4281      	cmp	r1, r0
 8003734:	d908      	bls.n	8003748 <sin+0x38>
 8003736:	4610      	mov	r0, r2
 8003738:	4619      	mov	r1, r3
 800373a:	f7fc fd49 	bl	80001d0 <__aeabi_dsub>
 800373e:	ec41 0b10 	vmov	d0, r0, r1
 8003742:	b005      	add	sp, #20
 8003744:	f85d fb04 	ldr.w	pc, [sp], #4
 8003748:	4668      	mov	r0, sp
 800374a:	f000 fa35 	bl	8003bb8 <__ieee754_rem_pio2>
 800374e:	f000 0003 	and.w	r0, r0, #3
 8003752:	2801      	cmp	r0, #1
 8003754:	d00c      	beq.n	8003770 <sin+0x60>
 8003756:	2802      	cmp	r0, #2
 8003758:	d011      	beq.n	800377e <sin+0x6e>
 800375a:	b9e8      	cbnz	r0, 8003798 <sin+0x88>
 800375c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003760:	ed9d 0b00 	vldr	d0, [sp]
 8003764:	2001      	movs	r0, #1
 8003766:	f000 f96b 	bl	8003a40 <__kernel_sin>
 800376a:	ec51 0b10 	vmov	r0, r1, d0
 800376e:	e7e6      	b.n	800373e <sin+0x2e>
 8003770:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003774:	ed9d 0b00 	vldr	d0, [sp]
 8003778:	f000 f89a 	bl	80038b0 <__kernel_cos>
 800377c:	e7f5      	b.n	800376a <sin+0x5a>
 800377e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003782:	ed9d 0b00 	vldr	d0, [sp]
 8003786:	2001      	movs	r0, #1
 8003788:	f000 f95a 	bl	8003a40 <__kernel_sin>
 800378c:	ec53 2b10 	vmov	r2, r3, d0
 8003790:	4610      	mov	r0, r2
 8003792:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 8003796:	e7d2      	b.n	800373e <sin+0x2e>
 8003798:	ed9d 1b02 	vldr	d1, [sp, #8]
 800379c:	ed9d 0b00 	vldr	d0, [sp]
 80037a0:	f000 f886 	bl	80038b0 <__kernel_cos>
 80037a4:	e7f2      	b.n	800378c <sin+0x7c>
 80037a6:	bf00      	nop
	...
 80037b0:	3fe921fb 	.word	0x3fe921fb
 80037b4:	7fefffff 	.word	0x7fefffff

080037b8 <ceil>:
 80037b8:	ec51 0b10 	vmov	r0, r1, d0
 80037bc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80037c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037c4:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 80037c8:	2e13      	cmp	r6, #19
 80037ca:	460c      	mov	r4, r1
 80037cc:	4605      	mov	r5, r0
 80037ce:	4680      	mov	r8, r0
 80037d0:	dc2e      	bgt.n	8003830 <ceil+0x78>
 80037d2:	2e00      	cmp	r6, #0
 80037d4:	da11      	bge.n	80037fa <ceil+0x42>
 80037d6:	a332      	add	r3, pc, #200	@ (adr r3, 80038a0 <ceil+0xe8>)
 80037d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037dc:	f7fc fcfa 	bl	80001d4 <__adddf3>
 80037e0:	2200      	movs	r2, #0
 80037e2:	2300      	movs	r3, #0
 80037e4:	f7fd f93c 	bl	8000a60 <__aeabi_dcmpgt>
 80037e8:	b120      	cbz	r0, 80037f4 <ceil+0x3c>
 80037ea:	2c00      	cmp	r4, #0
 80037ec:	db4f      	blt.n	800388e <ceil+0xd6>
 80037ee:	4325      	orrs	r5, r4
 80037f0:	d151      	bne.n	8003896 <ceil+0xde>
 80037f2:	462c      	mov	r4, r5
 80037f4:	4621      	mov	r1, r4
 80037f6:	4628      	mov	r0, r5
 80037f8:	e023      	b.n	8003842 <ceil+0x8a>
 80037fa:	4f2b      	ldr	r7, [pc, #172]	@ (80038a8 <ceil+0xf0>)
 80037fc:	4137      	asrs	r7, r6
 80037fe:	ea01 0307 	and.w	r3, r1, r7
 8003802:	4303      	orrs	r3, r0
 8003804:	d01d      	beq.n	8003842 <ceil+0x8a>
 8003806:	a326      	add	r3, pc, #152	@ (adr r3, 80038a0 <ceil+0xe8>)
 8003808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380c:	f7fc fce2 	bl	80001d4 <__adddf3>
 8003810:	2200      	movs	r2, #0
 8003812:	2300      	movs	r3, #0
 8003814:	f7fd f924 	bl	8000a60 <__aeabi_dcmpgt>
 8003818:	2800      	cmp	r0, #0
 800381a:	d0eb      	beq.n	80037f4 <ceil+0x3c>
 800381c:	2c00      	cmp	r4, #0
 800381e:	bfc2      	ittt	gt
 8003820:	f44f 1380 	movgt.w	r3, #1048576	@ 0x100000
 8003824:	4133      	asrgt	r3, r6
 8003826:	18e4      	addgt	r4, r4, r3
 8003828:	ea24 0407 	bic.w	r4, r4, r7
 800382c:	2500      	movs	r5, #0
 800382e:	e7e1      	b.n	80037f4 <ceil+0x3c>
 8003830:	2e33      	cmp	r6, #51	@ 0x33
 8003832:	dd0a      	ble.n	800384a <ceil+0x92>
 8003834:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8003838:	d103      	bne.n	8003842 <ceil+0x8a>
 800383a:	4602      	mov	r2, r0
 800383c:	460b      	mov	r3, r1
 800383e:	f7fc fcc9 	bl	80001d4 <__adddf3>
 8003842:	ec41 0b10 	vmov	d0, r0, r1
 8003846:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800384a:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 800384e:	f04f 37ff 	mov.w	r7, #4294967295
 8003852:	40df      	lsrs	r7, r3
 8003854:	4238      	tst	r0, r7
 8003856:	d0f4      	beq.n	8003842 <ceil+0x8a>
 8003858:	a311      	add	r3, pc, #68	@ (adr r3, 80038a0 <ceil+0xe8>)
 800385a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385e:	f7fc fcb9 	bl	80001d4 <__adddf3>
 8003862:	2200      	movs	r2, #0
 8003864:	2300      	movs	r3, #0
 8003866:	f7fd f8fb 	bl	8000a60 <__aeabi_dcmpgt>
 800386a:	2800      	cmp	r0, #0
 800386c:	d0c2      	beq.n	80037f4 <ceil+0x3c>
 800386e:	2c00      	cmp	r4, #0
 8003870:	dd0a      	ble.n	8003888 <ceil+0xd0>
 8003872:	2e14      	cmp	r6, #20
 8003874:	d101      	bne.n	800387a <ceil+0xc2>
 8003876:	3401      	adds	r4, #1
 8003878:	e006      	b.n	8003888 <ceil+0xd0>
 800387a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 800387e:	2301      	movs	r3, #1
 8003880:	40b3      	lsls	r3, r6
 8003882:	441d      	add	r5, r3
 8003884:	45a8      	cmp	r8, r5
 8003886:	d8f6      	bhi.n	8003876 <ceil+0xbe>
 8003888:	ea25 0507 	bic.w	r5, r5, r7
 800388c:	e7b2      	b.n	80037f4 <ceil+0x3c>
 800388e:	2500      	movs	r5, #0
 8003890:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8003894:	e7ae      	b.n	80037f4 <ceil+0x3c>
 8003896:	4c05      	ldr	r4, [pc, #20]	@ (80038ac <ceil+0xf4>)
 8003898:	2500      	movs	r5, #0
 800389a:	e7ab      	b.n	80037f4 <ceil+0x3c>
 800389c:	f3af 8000 	nop.w
 80038a0:	8800759c 	.word	0x8800759c
 80038a4:	7e37e43c 	.word	0x7e37e43c
 80038a8:	000fffff 	.word	0x000fffff
 80038ac:	3ff00000 	.word	0x3ff00000

080038b0 <__kernel_cos>:
 80038b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038b4:	ec57 6b10 	vmov	r6, r7, d0
 80038b8:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80038bc:	f1b8 5f79 	cmp.w	r8, #1044381696	@ 0x3e400000
 80038c0:	ed8d 1b00 	vstr	d1, [sp]
 80038c4:	d206      	bcs.n	80038d4 <__kernel_cos+0x24>
 80038c6:	4630      	mov	r0, r6
 80038c8:	4639      	mov	r1, r7
 80038ca:	f7fd f8d3 	bl	8000a74 <__aeabi_d2iz>
 80038ce:	2800      	cmp	r0, #0
 80038d0:	f000 8088 	beq.w	80039e4 <__kernel_cos+0x134>
 80038d4:	4632      	mov	r2, r6
 80038d6:	463b      	mov	r3, r7
 80038d8:	4630      	mov	r0, r6
 80038da:	4639      	mov	r1, r7
 80038dc:	f7fc fe30 	bl	8000540 <__aeabi_dmul>
 80038e0:	4b51      	ldr	r3, [pc, #324]	@ (8003a28 <__kernel_cos+0x178>)
 80038e2:	2200      	movs	r2, #0
 80038e4:	4604      	mov	r4, r0
 80038e6:	460d      	mov	r5, r1
 80038e8:	f7fc fe2a 	bl	8000540 <__aeabi_dmul>
 80038ec:	a340      	add	r3, pc, #256	@ (adr r3, 80039f0 <__kernel_cos+0x140>)
 80038ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038f2:	4682      	mov	sl, r0
 80038f4:	468b      	mov	fp, r1
 80038f6:	4620      	mov	r0, r4
 80038f8:	4629      	mov	r1, r5
 80038fa:	f7fc fe21 	bl	8000540 <__aeabi_dmul>
 80038fe:	a33e      	add	r3, pc, #248	@ (adr r3, 80039f8 <__kernel_cos+0x148>)
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f7fc fc66 	bl	80001d4 <__adddf3>
 8003908:	4622      	mov	r2, r4
 800390a:	462b      	mov	r3, r5
 800390c:	f7fc fe18 	bl	8000540 <__aeabi_dmul>
 8003910:	a33b      	add	r3, pc, #236	@ (adr r3, 8003a00 <__kernel_cos+0x150>)
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	f7fc fc5b 	bl	80001d0 <__aeabi_dsub>
 800391a:	4622      	mov	r2, r4
 800391c:	462b      	mov	r3, r5
 800391e:	f7fc fe0f 	bl	8000540 <__aeabi_dmul>
 8003922:	a339      	add	r3, pc, #228	@ (adr r3, 8003a08 <__kernel_cos+0x158>)
 8003924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003928:	f7fc fc54 	bl	80001d4 <__adddf3>
 800392c:	4622      	mov	r2, r4
 800392e:	462b      	mov	r3, r5
 8003930:	f7fc fe06 	bl	8000540 <__aeabi_dmul>
 8003934:	a336      	add	r3, pc, #216	@ (adr r3, 8003a10 <__kernel_cos+0x160>)
 8003936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800393a:	f7fc fc49 	bl	80001d0 <__aeabi_dsub>
 800393e:	4622      	mov	r2, r4
 8003940:	462b      	mov	r3, r5
 8003942:	f7fc fdfd 	bl	8000540 <__aeabi_dmul>
 8003946:	a334      	add	r3, pc, #208	@ (adr r3, 8003a18 <__kernel_cos+0x168>)
 8003948:	e9d3 2300 	ldrd	r2, r3, [r3]
 800394c:	f7fc fc42 	bl	80001d4 <__adddf3>
 8003950:	4622      	mov	r2, r4
 8003952:	462b      	mov	r3, r5
 8003954:	f7fc fdf4 	bl	8000540 <__aeabi_dmul>
 8003958:	4622      	mov	r2, r4
 800395a:	462b      	mov	r3, r5
 800395c:	f7fc fdf0 	bl	8000540 <__aeabi_dmul>
 8003960:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003964:	4604      	mov	r4, r0
 8003966:	460d      	mov	r5, r1
 8003968:	4630      	mov	r0, r6
 800396a:	4639      	mov	r1, r7
 800396c:	f7fc fde8 	bl	8000540 <__aeabi_dmul>
 8003970:	460b      	mov	r3, r1
 8003972:	4602      	mov	r2, r0
 8003974:	4629      	mov	r1, r5
 8003976:	4620      	mov	r0, r4
 8003978:	f7fc fc2a 	bl	80001d0 <__aeabi_dsub>
 800397c:	4b2b      	ldr	r3, [pc, #172]	@ (8003a2c <__kernel_cos+0x17c>)
 800397e:	4598      	cmp	r8, r3
 8003980:	4606      	mov	r6, r0
 8003982:	460f      	mov	r7, r1
 8003984:	d810      	bhi.n	80039a8 <__kernel_cos+0xf8>
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4650      	mov	r0, sl
 800398c:	4659      	mov	r1, fp
 800398e:	f7fc fc1f 	bl	80001d0 <__aeabi_dsub>
 8003992:	460b      	mov	r3, r1
 8003994:	4926      	ldr	r1, [pc, #152]	@ (8003a30 <__kernel_cos+0x180>)
 8003996:	4602      	mov	r2, r0
 8003998:	2000      	movs	r0, #0
 800399a:	f7fc fc19 	bl	80001d0 <__aeabi_dsub>
 800399e:	ec41 0b10 	vmov	d0, r0, r1
 80039a2:	b003      	add	sp, #12
 80039a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039a8:	4b22      	ldr	r3, [pc, #136]	@ (8003a34 <__kernel_cos+0x184>)
 80039aa:	4921      	ldr	r1, [pc, #132]	@ (8003a30 <__kernel_cos+0x180>)
 80039ac:	4598      	cmp	r8, r3
 80039ae:	bf8c      	ite	hi
 80039b0:	4d21      	ldrhi	r5, [pc, #132]	@ (8003a38 <__kernel_cos+0x188>)
 80039b2:	f5a8 1500 	subls.w	r5, r8, #2097152	@ 0x200000
 80039b6:	2400      	movs	r4, #0
 80039b8:	4622      	mov	r2, r4
 80039ba:	462b      	mov	r3, r5
 80039bc:	2000      	movs	r0, #0
 80039be:	f7fc fc07 	bl	80001d0 <__aeabi_dsub>
 80039c2:	4622      	mov	r2, r4
 80039c4:	4680      	mov	r8, r0
 80039c6:	4689      	mov	r9, r1
 80039c8:	462b      	mov	r3, r5
 80039ca:	4650      	mov	r0, sl
 80039cc:	4659      	mov	r1, fp
 80039ce:	f7fc fbff 	bl	80001d0 <__aeabi_dsub>
 80039d2:	4632      	mov	r2, r6
 80039d4:	463b      	mov	r3, r7
 80039d6:	f7fc fbfb 	bl	80001d0 <__aeabi_dsub>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4640      	mov	r0, r8
 80039e0:	4649      	mov	r1, r9
 80039e2:	e7da      	b.n	800399a <__kernel_cos+0xea>
 80039e4:	ed9f 0b0e 	vldr	d0, [pc, #56]	@ 8003a20 <__kernel_cos+0x170>
 80039e8:	e7db      	b.n	80039a2 <__kernel_cos+0xf2>
 80039ea:	bf00      	nop
 80039ec:	f3af 8000 	nop.w
 80039f0:	be8838d4 	.word	0xbe8838d4
 80039f4:	bda8fae9 	.word	0xbda8fae9
 80039f8:	bdb4b1c4 	.word	0xbdb4b1c4
 80039fc:	3e21ee9e 	.word	0x3e21ee9e
 8003a00:	809c52ad 	.word	0x809c52ad
 8003a04:	3e927e4f 	.word	0x3e927e4f
 8003a08:	19cb1590 	.word	0x19cb1590
 8003a0c:	3efa01a0 	.word	0x3efa01a0
 8003a10:	16c15177 	.word	0x16c15177
 8003a14:	3f56c16c 	.word	0x3f56c16c
 8003a18:	5555554c 	.word	0x5555554c
 8003a1c:	3fa55555 	.word	0x3fa55555
 8003a20:	00000000 	.word	0x00000000
 8003a24:	3ff00000 	.word	0x3ff00000
 8003a28:	3fe00000 	.word	0x3fe00000
 8003a2c:	3fd33332 	.word	0x3fd33332
 8003a30:	3ff00000 	.word	0x3ff00000
 8003a34:	3fe90000 	.word	0x3fe90000
 8003a38:	3fd20000 	.word	0x3fd20000
 8003a3c:	00000000 	.word	0x00000000

08003a40 <__kernel_sin>:
 8003a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a44:	ec55 4b10 	vmov	r4, r5, d0
 8003a48:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8003a4c:	b085      	sub	sp, #20
 8003a4e:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003a52:	ed8d 1b02 	vstr	d1, [sp, #8]
 8003a56:	4680      	mov	r8, r0
 8003a58:	d205      	bcs.n	8003a66 <__kernel_sin+0x26>
 8003a5a:	4620      	mov	r0, r4
 8003a5c:	4629      	mov	r1, r5
 8003a5e:	f7fd f809 	bl	8000a74 <__aeabi_d2iz>
 8003a62:	2800      	cmp	r0, #0
 8003a64:	d052      	beq.n	8003b0c <__kernel_sin+0xcc>
 8003a66:	4622      	mov	r2, r4
 8003a68:	462b      	mov	r3, r5
 8003a6a:	4620      	mov	r0, r4
 8003a6c:	4629      	mov	r1, r5
 8003a6e:	f7fc fd67 	bl	8000540 <__aeabi_dmul>
 8003a72:	4682      	mov	sl, r0
 8003a74:	468b      	mov	fp, r1
 8003a76:	4602      	mov	r2, r0
 8003a78:	460b      	mov	r3, r1
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	4629      	mov	r1, r5
 8003a7e:	f7fc fd5f 	bl	8000540 <__aeabi_dmul>
 8003a82:	a342      	add	r3, pc, #264	@ (adr r3, 8003b8c <__kernel_sin+0x14c>)
 8003a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a88:	e9cd 0100 	strd	r0, r1, [sp]
 8003a8c:	4650      	mov	r0, sl
 8003a8e:	4659      	mov	r1, fp
 8003a90:	f7fc fd56 	bl	8000540 <__aeabi_dmul>
 8003a94:	a33f      	add	r3, pc, #252	@ (adr r3, 8003b94 <__kernel_sin+0x154>)
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	f7fc fb99 	bl	80001d0 <__aeabi_dsub>
 8003a9e:	4652      	mov	r2, sl
 8003aa0:	465b      	mov	r3, fp
 8003aa2:	f7fc fd4d 	bl	8000540 <__aeabi_dmul>
 8003aa6:	a33d      	add	r3, pc, #244	@ (adr r3, 8003b9c <__kernel_sin+0x15c>)
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f7fc fb92 	bl	80001d4 <__adddf3>
 8003ab0:	4652      	mov	r2, sl
 8003ab2:	465b      	mov	r3, fp
 8003ab4:	f7fc fd44 	bl	8000540 <__aeabi_dmul>
 8003ab8:	a33a      	add	r3, pc, #232	@ (adr r3, 8003ba4 <__kernel_sin+0x164>)
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f7fc fb87 	bl	80001d0 <__aeabi_dsub>
 8003ac2:	4652      	mov	r2, sl
 8003ac4:	465b      	mov	r3, fp
 8003ac6:	f7fc fd3b 	bl	8000540 <__aeabi_dmul>
 8003aca:	a338      	add	r3, pc, #224	@ (adr r3, 8003bac <__kernel_sin+0x16c>)
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f7fc fb80 	bl	80001d4 <__adddf3>
 8003ad4:	4606      	mov	r6, r0
 8003ad6:	460f      	mov	r7, r1
 8003ad8:	f1b8 0f00 	cmp.w	r8, #0
 8003adc:	d11b      	bne.n	8003b16 <__kernel_sin+0xd6>
 8003ade:	4602      	mov	r2, r0
 8003ae0:	460b      	mov	r3, r1
 8003ae2:	4650      	mov	r0, sl
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	f7fc fd2b 	bl	8000540 <__aeabi_dmul>
 8003aea:	a325      	add	r3, pc, #148	@ (adr r3, 8003b80 <__kernel_sin+0x140>)
 8003aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af0:	f7fc fb6e 	bl	80001d0 <__aeabi_dsub>
 8003af4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003af8:	f7fc fd22 	bl	8000540 <__aeabi_dmul>
 8003afc:	4602      	mov	r2, r0
 8003afe:	460b      	mov	r3, r1
 8003b00:	4620      	mov	r0, r4
 8003b02:	4629      	mov	r1, r5
 8003b04:	f7fc fb66 	bl	80001d4 <__adddf3>
 8003b08:	4604      	mov	r4, r0
 8003b0a:	460d      	mov	r5, r1
 8003b0c:	ec45 4b10 	vmov	d0, r4, r5
 8003b10:	b005      	add	sp, #20
 8003b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003b88 <__kernel_sin+0x148>)
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	f7fc fd0f 	bl	8000540 <__aeabi_dmul>
 8003b22:	4632      	mov	r2, r6
 8003b24:	4680      	mov	r8, r0
 8003b26:	4689      	mov	r9, r1
 8003b28:	463b      	mov	r3, r7
 8003b2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b2e:	f7fc fd07 	bl	8000540 <__aeabi_dmul>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4640      	mov	r0, r8
 8003b38:	4649      	mov	r1, r9
 8003b3a:	f7fc fb49 	bl	80001d0 <__aeabi_dsub>
 8003b3e:	4652      	mov	r2, sl
 8003b40:	465b      	mov	r3, fp
 8003b42:	f7fc fcfd 	bl	8000540 <__aeabi_dmul>
 8003b46:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003b4a:	f7fc fb41 	bl	80001d0 <__aeabi_dsub>
 8003b4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8003b80 <__kernel_sin+0x140>)
 8003b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b54:	4606      	mov	r6, r0
 8003b56:	460f      	mov	r7, r1
 8003b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003b5c:	f7fc fcf0 	bl	8000540 <__aeabi_dmul>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	4630      	mov	r0, r6
 8003b66:	4639      	mov	r1, r7
 8003b68:	f7fc fb34 	bl	80001d4 <__adddf3>
 8003b6c:	4602      	mov	r2, r0
 8003b6e:	460b      	mov	r3, r1
 8003b70:	4620      	mov	r0, r4
 8003b72:	4629      	mov	r1, r5
 8003b74:	f7fc fb2c 	bl	80001d0 <__aeabi_dsub>
 8003b78:	e7c6      	b.n	8003b08 <__kernel_sin+0xc8>
 8003b7a:	bf00      	nop
 8003b7c:	f3af 8000 	nop.w
 8003b80:	55555549 	.word	0x55555549
 8003b84:	3fc55555 	.word	0x3fc55555
 8003b88:	3fe00000 	.word	0x3fe00000
 8003b8c:	5acfd57c 	.word	0x5acfd57c
 8003b90:	3de5d93a 	.word	0x3de5d93a
 8003b94:	8a2b9ceb 	.word	0x8a2b9ceb
 8003b98:	3e5ae5e6 	.word	0x3e5ae5e6
 8003b9c:	57b1fe7d 	.word	0x57b1fe7d
 8003ba0:	3ec71de3 	.word	0x3ec71de3
 8003ba4:	19c161d5 	.word	0x19c161d5
 8003ba8:	3f2a01a0 	.word	0x3f2a01a0
 8003bac:	1110f8a6 	.word	0x1110f8a6
 8003bb0:	3f811111 	.word	0x3f811111
 8003bb4:	00000000 	.word	0x00000000

08003bb8 <__ieee754_rem_pio2>:
 8003bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bbc:	ec57 6b10 	vmov	r6, r7, d0
 8003bc0:	4bc5      	ldr	r3, [pc, #788]	@ (8003ed8 <__ieee754_rem_pio2+0x320>)
 8003bc2:	b08d      	sub	sp, #52	@ 0x34
 8003bc4:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8003bc8:	4598      	cmp	r8, r3
 8003bca:	4604      	mov	r4, r0
 8003bcc:	9704      	str	r7, [sp, #16]
 8003bce:	d807      	bhi.n	8003be0 <__ieee754_rem_pio2+0x28>
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	ed80 0b00 	vstr	d0, [r0]
 8003bd8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003bdc:	2500      	movs	r5, #0
 8003bde:	e028      	b.n	8003c32 <__ieee754_rem_pio2+0x7a>
 8003be0:	4bbe      	ldr	r3, [pc, #760]	@ (8003edc <__ieee754_rem_pio2+0x324>)
 8003be2:	4598      	cmp	r8, r3
 8003be4:	d878      	bhi.n	8003cd8 <__ieee754_rem_pio2+0x120>
 8003be6:	9b04      	ldr	r3, [sp, #16]
 8003be8:	4dbd      	ldr	r5, [pc, #756]	@ (8003ee0 <__ieee754_rem_pio2+0x328>)
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	4630      	mov	r0, r6
 8003bee:	a3ac      	add	r3, pc, #688	@ (adr r3, 8003ea0 <__ieee754_rem_pio2+0x2e8>)
 8003bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf4:	4639      	mov	r1, r7
 8003bf6:	dd38      	ble.n	8003c6a <__ieee754_rem_pio2+0xb2>
 8003bf8:	f7fc faea 	bl	80001d0 <__aeabi_dsub>
 8003bfc:	45a8      	cmp	r8, r5
 8003bfe:	4606      	mov	r6, r0
 8003c00:	460f      	mov	r7, r1
 8003c02:	d01a      	beq.n	8003c3a <__ieee754_rem_pio2+0x82>
 8003c04:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003ea8 <__ieee754_rem_pio2+0x2f0>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f7fc fae1 	bl	80001d0 <__aeabi_dsub>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	460b      	mov	r3, r1
 8003c12:	4680      	mov	r8, r0
 8003c14:	4689      	mov	r9, r1
 8003c16:	4630      	mov	r0, r6
 8003c18:	4639      	mov	r1, r7
 8003c1a:	f7fc fad9 	bl	80001d0 <__aeabi_dsub>
 8003c1e:	a3a2      	add	r3, pc, #648	@ (adr r3, 8003ea8 <__ieee754_rem_pio2+0x2f0>)
 8003c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c24:	f7fc fad4 	bl	80001d0 <__aeabi_dsub>
 8003c28:	e9c4 8900 	strd	r8, r9, [r4]
 8003c2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003c30:	2501      	movs	r5, #1
 8003c32:	4628      	mov	r0, r5
 8003c34:	b00d      	add	sp, #52	@ 0x34
 8003c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c3a:	a39d      	add	r3, pc, #628	@ (adr r3, 8003eb0 <__ieee754_rem_pio2+0x2f8>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fac6 	bl	80001d0 <__aeabi_dsub>
 8003c44:	a39c      	add	r3, pc, #624	@ (adr r3, 8003eb8 <__ieee754_rem_pio2+0x300>)
 8003c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4a:	4606      	mov	r6, r0
 8003c4c:	460f      	mov	r7, r1
 8003c4e:	f7fc fabf 	bl	80001d0 <__aeabi_dsub>
 8003c52:	4602      	mov	r2, r0
 8003c54:	460b      	mov	r3, r1
 8003c56:	4680      	mov	r8, r0
 8003c58:	4689      	mov	r9, r1
 8003c5a:	4630      	mov	r0, r6
 8003c5c:	4639      	mov	r1, r7
 8003c5e:	f7fc fab7 	bl	80001d0 <__aeabi_dsub>
 8003c62:	a395      	add	r3, pc, #596	@ (adr r3, 8003eb8 <__ieee754_rem_pio2+0x300>)
 8003c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c68:	e7dc      	b.n	8003c24 <__ieee754_rem_pio2+0x6c>
 8003c6a:	f7fc fab3 	bl	80001d4 <__adddf3>
 8003c6e:	45a8      	cmp	r8, r5
 8003c70:	4606      	mov	r6, r0
 8003c72:	460f      	mov	r7, r1
 8003c74:	d018      	beq.n	8003ca8 <__ieee754_rem_pio2+0xf0>
 8003c76:	a38c      	add	r3, pc, #560	@ (adr r3, 8003ea8 <__ieee754_rem_pio2+0x2f0>)
 8003c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7c:	f7fc faaa 	bl	80001d4 <__adddf3>
 8003c80:	4602      	mov	r2, r0
 8003c82:	460b      	mov	r3, r1
 8003c84:	4680      	mov	r8, r0
 8003c86:	4689      	mov	r9, r1
 8003c88:	4630      	mov	r0, r6
 8003c8a:	4639      	mov	r1, r7
 8003c8c:	f7fc faa0 	bl	80001d0 <__aeabi_dsub>
 8003c90:	a385      	add	r3, pc, #532	@ (adr r3, 8003ea8 <__ieee754_rem_pio2+0x2f0>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f7fc fa9d 	bl	80001d4 <__adddf3>
 8003c9a:	f04f 35ff 	mov.w	r5, #4294967295
 8003c9e:	e9c4 8900 	strd	r8, r9, [r4]
 8003ca2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003ca6:	e7c4      	b.n	8003c32 <__ieee754_rem_pio2+0x7a>
 8003ca8:	a381      	add	r3, pc, #516	@ (adr r3, 8003eb0 <__ieee754_rem_pio2+0x2f8>)
 8003caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cae:	f7fc fa91 	bl	80001d4 <__adddf3>
 8003cb2:	a381      	add	r3, pc, #516	@ (adr r3, 8003eb8 <__ieee754_rem_pio2+0x300>)
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	4606      	mov	r6, r0
 8003cba:	460f      	mov	r7, r1
 8003cbc:	f7fc fa8a 	bl	80001d4 <__adddf3>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	460b      	mov	r3, r1
 8003cc4:	4680      	mov	r8, r0
 8003cc6:	4689      	mov	r9, r1
 8003cc8:	4630      	mov	r0, r6
 8003cca:	4639      	mov	r1, r7
 8003ccc:	f7fc fa80 	bl	80001d0 <__aeabi_dsub>
 8003cd0:	a379      	add	r3, pc, #484	@ (adr r3, 8003eb8 <__ieee754_rem_pio2+0x300>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	e7de      	b.n	8003c96 <__ieee754_rem_pio2+0xde>
 8003cd8:	4b82      	ldr	r3, [pc, #520]	@ (8003ee4 <__ieee754_rem_pio2+0x32c>)
 8003cda:	4598      	cmp	r8, r3
 8003cdc:	f200 80d1 	bhi.w	8003e82 <__ieee754_rem_pio2+0x2ca>
 8003ce0:	f000 f966 	bl	8003fb0 <fabs>
 8003ce4:	ec57 6b10 	vmov	r6, r7, d0
 8003ce8:	a375      	add	r3, pc, #468	@ (adr r3, 8003ec0 <__ieee754_rem_pio2+0x308>)
 8003cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cee:	4630      	mov	r0, r6
 8003cf0:	4639      	mov	r1, r7
 8003cf2:	f7fc fc25 	bl	8000540 <__aeabi_dmul>
 8003cf6:	4b7c      	ldr	r3, [pc, #496]	@ (8003ee8 <__ieee754_rem_pio2+0x330>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f7fc fa6b 	bl	80001d4 <__adddf3>
 8003cfe:	f7fc feb9 	bl	8000a74 <__aeabi_d2iz>
 8003d02:	4605      	mov	r5, r0
 8003d04:	f7fc fbb2 	bl	800046c <__aeabi_i2d>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003d10:	a363      	add	r3, pc, #396	@ (adr r3, 8003ea0 <__ieee754_rem_pio2+0x2e8>)
 8003d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d16:	f7fc fc13 	bl	8000540 <__aeabi_dmul>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	460b      	mov	r3, r1
 8003d1e:	4630      	mov	r0, r6
 8003d20:	4639      	mov	r1, r7
 8003d22:	f7fc fa55 	bl	80001d0 <__aeabi_dsub>
 8003d26:	a360      	add	r3, pc, #384	@ (adr r3, 8003ea8 <__ieee754_rem_pio2+0x2f0>)
 8003d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d2c:	4682      	mov	sl, r0
 8003d2e:	468b      	mov	fp, r1
 8003d30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d34:	f7fc fc04 	bl	8000540 <__aeabi_dmul>
 8003d38:	2d1f      	cmp	r5, #31
 8003d3a:	4606      	mov	r6, r0
 8003d3c:	460f      	mov	r7, r1
 8003d3e:	dc0c      	bgt.n	8003d5a <__ieee754_rem_pio2+0x1a2>
 8003d40:	4b6a      	ldr	r3, [pc, #424]	@ (8003eec <__ieee754_rem_pio2+0x334>)
 8003d42:	1e6a      	subs	r2, r5, #1
 8003d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d48:	4543      	cmp	r3, r8
 8003d4a:	d006      	beq.n	8003d5a <__ieee754_rem_pio2+0x1a2>
 8003d4c:	4632      	mov	r2, r6
 8003d4e:	463b      	mov	r3, r7
 8003d50:	4650      	mov	r0, sl
 8003d52:	4659      	mov	r1, fp
 8003d54:	f7fc fa3c 	bl	80001d0 <__aeabi_dsub>
 8003d58:	e00e      	b.n	8003d78 <__ieee754_rem_pio2+0x1c0>
 8003d5a:	463b      	mov	r3, r7
 8003d5c:	4632      	mov	r2, r6
 8003d5e:	4650      	mov	r0, sl
 8003d60:	4659      	mov	r1, fp
 8003d62:	f7fc fa35 	bl	80001d0 <__aeabi_dsub>
 8003d66:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003d6a:	9305      	str	r3, [sp, #20]
 8003d6c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d70:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8003d74:	2b10      	cmp	r3, #16
 8003d76:	dc02      	bgt.n	8003d7e <__ieee754_rem_pio2+0x1c6>
 8003d78:	e9c4 0100 	strd	r0, r1, [r4]
 8003d7c:	e039      	b.n	8003df2 <__ieee754_rem_pio2+0x23a>
 8003d7e:	a34c      	add	r3, pc, #304	@ (adr r3, 8003eb0 <__ieee754_rem_pio2+0x2f8>)
 8003d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d88:	f7fc fbda 	bl	8000540 <__aeabi_dmul>
 8003d8c:	4606      	mov	r6, r0
 8003d8e:	460f      	mov	r7, r1
 8003d90:	4602      	mov	r2, r0
 8003d92:	460b      	mov	r3, r1
 8003d94:	4650      	mov	r0, sl
 8003d96:	4659      	mov	r1, fp
 8003d98:	f7fc fa1a 	bl	80001d0 <__aeabi_dsub>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4680      	mov	r8, r0
 8003da2:	4689      	mov	r9, r1
 8003da4:	4650      	mov	r0, sl
 8003da6:	4659      	mov	r1, fp
 8003da8:	f7fc fa12 	bl	80001d0 <__aeabi_dsub>
 8003dac:	4632      	mov	r2, r6
 8003dae:	463b      	mov	r3, r7
 8003db0:	f7fc fa0e 	bl	80001d0 <__aeabi_dsub>
 8003db4:	a340      	add	r3, pc, #256	@ (adr r3, 8003eb8 <__ieee754_rem_pio2+0x300>)
 8003db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dba:	4606      	mov	r6, r0
 8003dbc:	460f      	mov	r7, r1
 8003dbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003dc2:	f7fc fbbd 	bl	8000540 <__aeabi_dmul>
 8003dc6:	4632      	mov	r2, r6
 8003dc8:	463b      	mov	r3, r7
 8003dca:	f7fc fa01 	bl	80001d0 <__aeabi_dsub>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	460b      	mov	r3, r1
 8003dd2:	4606      	mov	r6, r0
 8003dd4:	460f      	mov	r7, r1
 8003dd6:	4640      	mov	r0, r8
 8003dd8:	4649      	mov	r1, r9
 8003dda:	f7fc f9f9 	bl	80001d0 <__aeabi_dsub>
 8003dde:	9a05      	ldr	r2, [sp, #20]
 8003de0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b31      	cmp	r3, #49	@ 0x31
 8003de8:	dc20      	bgt.n	8003e2c <__ieee754_rem_pio2+0x274>
 8003dea:	e9c4 0100 	strd	r0, r1, [r4]
 8003dee:	46c2      	mov	sl, r8
 8003df0:	46cb      	mov	fp, r9
 8003df2:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003df6:	4650      	mov	r0, sl
 8003df8:	4642      	mov	r2, r8
 8003dfa:	464b      	mov	r3, r9
 8003dfc:	4659      	mov	r1, fp
 8003dfe:	f7fc f9e7 	bl	80001d0 <__aeabi_dsub>
 8003e02:	463b      	mov	r3, r7
 8003e04:	4632      	mov	r2, r6
 8003e06:	f7fc f9e3 	bl	80001d0 <__aeabi_dsub>
 8003e0a:	9b04      	ldr	r3, [sp, #16]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e12:	f6bf af0e 	bge.w	8003c32 <__ieee754_rem_pio2+0x7a>
 8003e16:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8003e1a:	6063      	str	r3, [r4, #4]
 8003e1c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003e20:	f8c4 8000 	str.w	r8, [r4]
 8003e24:	60a0      	str	r0, [r4, #8]
 8003e26:	60e3      	str	r3, [r4, #12]
 8003e28:	426d      	negs	r5, r5
 8003e2a:	e702      	b.n	8003c32 <__ieee754_rem_pio2+0x7a>
 8003e2c:	a326      	add	r3, pc, #152	@ (adr r3, 8003ec8 <__ieee754_rem_pio2+0x310>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e36:	f7fc fb83 	bl	8000540 <__aeabi_dmul>
 8003e3a:	4606      	mov	r6, r0
 8003e3c:	460f      	mov	r7, r1
 8003e3e:	4602      	mov	r2, r0
 8003e40:	460b      	mov	r3, r1
 8003e42:	4640      	mov	r0, r8
 8003e44:	4649      	mov	r1, r9
 8003e46:	f7fc f9c3 	bl	80001d0 <__aeabi_dsub>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	460b      	mov	r3, r1
 8003e4e:	4682      	mov	sl, r0
 8003e50:	468b      	mov	fp, r1
 8003e52:	4640      	mov	r0, r8
 8003e54:	4649      	mov	r1, r9
 8003e56:	f7fc f9bb 	bl	80001d0 <__aeabi_dsub>
 8003e5a:	4632      	mov	r2, r6
 8003e5c:	463b      	mov	r3, r7
 8003e5e:	f7fc f9b7 	bl	80001d0 <__aeabi_dsub>
 8003e62:	a31b      	add	r3, pc, #108	@ (adr r3, 8003ed0 <__ieee754_rem_pio2+0x318>)
 8003e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e68:	4606      	mov	r6, r0
 8003e6a:	460f      	mov	r7, r1
 8003e6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e70:	f7fc fb66 	bl	8000540 <__aeabi_dmul>
 8003e74:	4632      	mov	r2, r6
 8003e76:	463b      	mov	r3, r7
 8003e78:	f7fc f9aa 	bl	80001d0 <__aeabi_dsub>
 8003e7c:	4606      	mov	r6, r0
 8003e7e:	460f      	mov	r7, r1
 8003e80:	e764      	b.n	8003d4c <__ieee754_rem_pio2+0x194>
 8003e82:	4b1b      	ldr	r3, [pc, #108]	@ (8003ef0 <__ieee754_rem_pio2+0x338>)
 8003e84:	4598      	cmp	r8, r3
 8003e86:	d935      	bls.n	8003ef4 <__ieee754_rem_pio2+0x33c>
 8003e88:	4632      	mov	r2, r6
 8003e8a:	463b      	mov	r3, r7
 8003e8c:	4630      	mov	r0, r6
 8003e8e:	4639      	mov	r1, r7
 8003e90:	f7fc f99e 	bl	80001d0 <__aeabi_dsub>
 8003e94:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003e98:	e9c4 0100 	strd	r0, r1, [r4]
 8003e9c:	e69e      	b.n	8003bdc <__ieee754_rem_pio2+0x24>
 8003e9e:	bf00      	nop
 8003ea0:	54400000 	.word	0x54400000
 8003ea4:	3ff921fb 	.word	0x3ff921fb
 8003ea8:	1a626331 	.word	0x1a626331
 8003eac:	3dd0b461 	.word	0x3dd0b461
 8003eb0:	1a600000 	.word	0x1a600000
 8003eb4:	3dd0b461 	.word	0x3dd0b461
 8003eb8:	2e037073 	.word	0x2e037073
 8003ebc:	3ba3198a 	.word	0x3ba3198a
 8003ec0:	6dc9c883 	.word	0x6dc9c883
 8003ec4:	3fe45f30 	.word	0x3fe45f30
 8003ec8:	2e000000 	.word	0x2e000000
 8003ecc:	3ba3198a 	.word	0x3ba3198a
 8003ed0:	252049c1 	.word	0x252049c1
 8003ed4:	397b839a 	.word	0x397b839a
 8003ed8:	3fe921fb 	.word	0x3fe921fb
 8003edc:	4002d97b 	.word	0x4002d97b
 8003ee0:	3ff921fb 	.word	0x3ff921fb
 8003ee4:	413921fb 	.word	0x413921fb
 8003ee8:	3fe00000 	.word	0x3fe00000
 8003eec:	08004898 	.word	0x08004898
 8003ef0:	7fefffff 	.word	0x7fefffff
 8003ef4:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003ef8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8003efc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003f00:	4630      	mov	r0, r6
 8003f02:	460f      	mov	r7, r1
 8003f04:	f7fc fdb6 	bl	8000a74 <__aeabi_d2iz>
 8003f08:	f7fc fab0 	bl	800046c <__aeabi_i2d>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	460b      	mov	r3, r1
 8003f10:	4630      	mov	r0, r6
 8003f12:	4639      	mov	r1, r7
 8003f14:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003f18:	f7fc f95a 	bl	80001d0 <__aeabi_dsub>
 8003f1c:	4b22      	ldr	r3, [pc, #136]	@ (8003fa8 <__ieee754_rem_pio2+0x3f0>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f7fc fb0e 	bl	8000540 <__aeabi_dmul>
 8003f24:	460f      	mov	r7, r1
 8003f26:	4606      	mov	r6, r0
 8003f28:	f7fc fda4 	bl	8000a74 <__aeabi_d2iz>
 8003f2c:	f7fc fa9e 	bl	800046c <__aeabi_i2d>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4630      	mov	r0, r6
 8003f36:	4639      	mov	r1, r7
 8003f38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003f3c:	f7fc f948 	bl	80001d0 <__aeabi_dsub>
 8003f40:	4b19      	ldr	r3, [pc, #100]	@ (8003fa8 <__ieee754_rem_pio2+0x3f0>)
 8003f42:	2200      	movs	r2, #0
 8003f44:	f7fc fafc 	bl	8000540 <__aeabi_dmul>
 8003f48:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8003f4c:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8003f50:	f04f 0803 	mov.w	r8, #3
 8003f54:	2600      	movs	r6, #0
 8003f56:	2700      	movs	r7, #0
 8003f58:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003f5c:	4632      	mov	r2, r6
 8003f5e:	463b      	mov	r3, r7
 8003f60:	46c2      	mov	sl, r8
 8003f62:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f66:	f7fc fd53 	bl	8000a10 <__aeabi_dcmpeq>
 8003f6a:	2800      	cmp	r0, #0
 8003f6c:	d1f4      	bne.n	8003f58 <__ieee754_rem_pio2+0x3a0>
 8003f6e:	4b0f      	ldr	r3, [pc, #60]	@ (8003fac <__ieee754_rem_pio2+0x3f4>)
 8003f70:	9301      	str	r3, [sp, #4]
 8003f72:	2302      	movs	r3, #2
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	462a      	mov	r2, r5
 8003f78:	4653      	mov	r3, sl
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	a806      	add	r0, sp, #24
 8003f7e:	f000 f81f 	bl	8003fc0 <__kernel_rem_pio2>
 8003f82:	9b04      	ldr	r3, [sp, #16]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	4605      	mov	r5, r0
 8003f88:	f6bf ae53 	bge.w	8003c32 <__ieee754_rem_pio2+0x7a>
 8003f8c:	e9d4 2100 	ldrd	r2, r1, [r4]
 8003f90:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003f94:	e9c4 2300 	strd	r2, r3, [r4]
 8003f98:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8003f9c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8003fa0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003fa4:	e740      	b.n	8003e28 <__ieee754_rem_pio2+0x270>
 8003fa6:	bf00      	nop
 8003fa8:	41700000 	.word	0x41700000
 8003fac:	08004918 	.word	0x08004918

08003fb0 <fabs>:
 8003fb0:	ec51 0b10 	vmov	r0, r1, d0
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003fba:	ec43 2b10 	vmov	d0, r2, r3
 8003fbe:	4770      	bx	lr

08003fc0 <__kernel_rem_pio2>:
 8003fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc4:	ed2d 8b02 	vpush	{d8}
 8003fc8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8003fcc:	f112 0f14 	cmn.w	r2, #20
 8003fd0:	9306      	str	r3, [sp, #24]
 8003fd2:	9104      	str	r1, [sp, #16]
 8003fd4:	4bbe      	ldr	r3, [pc, #760]	@ (80042d0 <__kernel_rem_pio2+0x310>)
 8003fd6:	99a4      	ldr	r1, [sp, #656]	@ 0x290
 8003fd8:	9008      	str	r0, [sp, #32]
 8003fda:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	9b06      	ldr	r3, [sp, #24]
 8003fe2:	f103 33ff 	add.w	r3, r3, #4294967295
 8003fe6:	bfa8      	it	ge
 8003fe8:	1ed4      	subge	r4, r2, #3
 8003fea:	9305      	str	r3, [sp, #20]
 8003fec:	bfb2      	itee	lt
 8003fee:	2400      	movlt	r4, #0
 8003ff0:	2318      	movge	r3, #24
 8003ff2:	fb94 f4f3 	sdivge	r4, r4, r3
 8003ff6:	f06f 0317 	mvn.w	r3, #23
 8003ffa:	fb04 3303 	mla	r3, r4, r3, r3
 8003ffe:	eb03 0b02 	add.w	fp, r3, r2
 8004002:	9b00      	ldr	r3, [sp, #0]
 8004004:	9a05      	ldr	r2, [sp, #20]
 8004006:	ed9f 8bae 	vldr	d8, [pc, #696]	@ 80042c0 <__kernel_rem_pio2+0x300>
 800400a:	eb03 0802 	add.w	r8, r3, r2
 800400e:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 8004010:	1aa7      	subs	r7, r4, r2
 8004012:	ae20      	add	r6, sp, #128	@ 0x80
 8004014:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004018:	2500      	movs	r5, #0
 800401a:	4545      	cmp	r5, r8
 800401c:	dd13      	ble.n	8004046 <__kernel_rem_pio2+0x86>
 800401e:	9b06      	ldr	r3, [sp, #24]
 8004020:	aa20      	add	r2, sp, #128	@ 0x80
 8004022:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004026:	f50d 7ae0 	add.w	sl, sp, #448	@ 0x1c0
 800402a:	f04f 0800 	mov.w	r8, #0
 800402e:	9b00      	ldr	r3, [sp, #0]
 8004030:	4598      	cmp	r8, r3
 8004032:	dc31      	bgt.n	8004098 <__kernel_rem_pio2+0xd8>
 8004034:	ed9f 7ba2 	vldr	d7, [pc, #648]	@ 80042c0 <__kernel_rem_pio2+0x300>
 8004038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800403c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004040:	462f      	mov	r7, r5
 8004042:	2600      	movs	r6, #0
 8004044:	e01b      	b.n	800407e <__kernel_rem_pio2+0xbe>
 8004046:	42ef      	cmn	r7, r5
 8004048:	d407      	bmi.n	800405a <__kernel_rem_pio2+0x9a>
 800404a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800404e:	f7fc fa0d 	bl	800046c <__aeabi_i2d>
 8004052:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004056:	3501      	adds	r5, #1
 8004058:	e7df      	b.n	800401a <__kernel_rem_pio2+0x5a>
 800405a:	ec51 0b18 	vmov	r0, r1, d8
 800405e:	e7f8      	b.n	8004052 <__kernel_rem_pio2+0x92>
 8004060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004064:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004068:	f7fc fa6a 	bl	8000540 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004074:	f7fc f8ae 	bl	80001d4 <__adddf3>
 8004078:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800407c:	3601      	adds	r6, #1
 800407e:	9b05      	ldr	r3, [sp, #20]
 8004080:	429e      	cmp	r6, r3
 8004082:	f1a7 0708 	sub.w	r7, r7, #8
 8004086:	ddeb      	ble.n	8004060 <__kernel_rem_pio2+0xa0>
 8004088:	ed9d 7b02 	vldr	d7, [sp, #8]
 800408c:	f108 0801 	add.w	r8, r8, #1
 8004090:	ecaa 7b02 	vstmia	sl!, {d7}
 8004094:	3508      	adds	r5, #8
 8004096:	e7ca      	b.n	800402e <__kernel_rem_pio2+0x6e>
 8004098:	9b00      	ldr	r3, [sp, #0]
 800409a:	f8dd 8000 	ldr.w	r8, [sp]
 800409e:	aa0c      	add	r2, sp, #48	@ 0x30
 80040a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80040a4:	930a      	str	r3, [sp, #40]	@ 0x28
 80040a6:	9ba5      	ldr	r3, [sp, #660]	@ 0x294
 80040a8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80040ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80040ae:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 80040b2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80040b4:	ab98      	add	r3, sp, #608	@ 0x260
 80040b6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80040ba:	ed13 7b28 	vldr	d7, [r3, #-160]	@ 0xffffff60
 80040be:	ed8d 7b02 	vstr	d7, [sp, #8]
 80040c2:	ac0c      	add	r4, sp, #48	@ 0x30
 80040c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80040c6:	eb03 05c8 	add.w	r5, r3, r8, lsl #3
 80040ca:	46a1      	mov	r9, r4
 80040cc:	46c2      	mov	sl, r8
 80040ce:	f1ba 0f00 	cmp.w	sl, #0
 80040d2:	f1a5 0508 	sub.w	r5, r5, #8
 80040d6:	dc77      	bgt.n	80041c8 <__kernel_rem_pio2+0x208>
 80040d8:	4658      	mov	r0, fp
 80040da:	ed9d 0b02 	vldr	d0, [sp, #8]
 80040de:	f000 fac7 	bl	8004670 <scalbn>
 80040e2:	ec57 6b10 	vmov	r6, r7, d0
 80040e6:	2200      	movs	r2, #0
 80040e8:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80040ec:	4630      	mov	r0, r6
 80040ee:	4639      	mov	r1, r7
 80040f0:	f7fc fa26 	bl	8000540 <__aeabi_dmul>
 80040f4:	ec41 0b10 	vmov	d0, r0, r1
 80040f8:	f000 fb3a 	bl	8004770 <floor>
 80040fc:	4b75      	ldr	r3, [pc, #468]	@ (80042d4 <__kernel_rem_pio2+0x314>)
 80040fe:	ec51 0b10 	vmov	r0, r1, d0
 8004102:	2200      	movs	r2, #0
 8004104:	f7fc fa1c 	bl	8000540 <__aeabi_dmul>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4630      	mov	r0, r6
 800410e:	4639      	mov	r1, r7
 8004110:	f7fc f85e 	bl	80001d0 <__aeabi_dsub>
 8004114:	460f      	mov	r7, r1
 8004116:	4606      	mov	r6, r0
 8004118:	f7fc fcac 	bl	8000a74 <__aeabi_d2iz>
 800411c:	9002      	str	r0, [sp, #8]
 800411e:	f7fc f9a5 	bl	800046c <__aeabi_i2d>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4630      	mov	r0, r6
 8004128:	4639      	mov	r1, r7
 800412a:	f7fc f851 	bl	80001d0 <__aeabi_dsub>
 800412e:	f1bb 0f00 	cmp.w	fp, #0
 8004132:	4606      	mov	r6, r0
 8004134:	460f      	mov	r7, r1
 8004136:	dd6c      	ble.n	8004212 <__kernel_rem_pio2+0x252>
 8004138:	f108 31ff 	add.w	r1, r8, #4294967295
 800413c:	ab0c      	add	r3, sp, #48	@ 0x30
 800413e:	9d02      	ldr	r5, [sp, #8]
 8004140:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004144:	f1cb 0018 	rsb	r0, fp, #24
 8004148:	fa43 f200 	asr.w	r2, r3, r0
 800414c:	4415      	add	r5, r2
 800414e:	4082      	lsls	r2, r0
 8004150:	1a9b      	subs	r3, r3, r2
 8004152:	aa0c      	add	r2, sp, #48	@ 0x30
 8004154:	9502      	str	r5, [sp, #8]
 8004156:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800415a:	f1cb 0217 	rsb	r2, fp, #23
 800415e:	fa43 f902 	asr.w	r9, r3, r2
 8004162:	f1b9 0f00 	cmp.w	r9, #0
 8004166:	dd64      	ble.n	8004232 <__kernel_rem_pio2+0x272>
 8004168:	9b02      	ldr	r3, [sp, #8]
 800416a:	2200      	movs	r2, #0
 800416c:	3301      	adds	r3, #1
 800416e:	9302      	str	r3, [sp, #8]
 8004170:	4615      	mov	r5, r2
 8004172:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004176:	4590      	cmp	r8, r2
 8004178:	f300 80b8 	bgt.w	80042ec <__kernel_rem_pio2+0x32c>
 800417c:	f1bb 0f00 	cmp.w	fp, #0
 8004180:	dd07      	ble.n	8004192 <__kernel_rem_pio2+0x1d2>
 8004182:	f1bb 0f01 	cmp.w	fp, #1
 8004186:	f000 80bf 	beq.w	8004308 <__kernel_rem_pio2+0x348>
 800418a:	f1bb 0f02 	cmp.w	fp, #2
 800418e:	f000 80c6 	beq.w	800431e <__kernel_rem_pio2+0x35e>
 8004192:	f1b9 0f02 	cmp.w	r9, #2
 8004196:	d14c      	bne.n	8004232 <__kernel_rem_pio2+0x272>
 8004198:	4632      	mov	r2, r6
 800419a:	463b      	mov	r3, r7
 800419c:	494e      	ldr	r1, [pc, #312]	@ (80042d8 <__kernel_rem_pio2+0x318>)
 800419e:	2000      	movs	r0, #0
 80041a0:	f7fc f816 	bl	80001d0 <__aeabi_dsub>
 80041a4:	4606      	mov	r6, r0
 80041a6:	460f      	mov	r7, r1
 80041a8:	2d00      	cmp	r5, #0
 80041aa:	d042      	beq.n	8004232 <__kernel_rem_pio2+0x272>
 80041ac:	4658      	mov	r0, fp
 80041ae:	ed9f 0b46 	vldr	d0, [pc, #280]	@ 80042c8 <__kernel_rem_pio2+0x308>
 80041b2:	f000 fa5d 	bl	8004670 <scalbn>
 80041b6:	4630      	mov	r0, r6
 80041b8:	4639      	mov	r1, r7
 80041ba:	ec53 2b10 	vmov	r2, r3, d0
 80041be:	f7fc f807 	bl	80001d0 <__aeabi_dsub>
 80041c2:	4606      	mov	r6, r0
 80041c4:	460f      	mov	r7, r1
 80041c6:	e034      	b.n	8004232 <__kernel_rem_pio2+0x272>
 80041c8:	4b44      	ldr	r3, [pc, #272]	@ (80042dc <__kernel_rem_pio2+0x31c>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041d0:	f7fc f9b6 	bl	8000540 <__aeabi_dmul>
 80041d4:	f7fc fc4e 	bl	8000a74 <__aeabi_d2iz>
 80041d8:	f7fc f948 	bl	800046c <__aeabi_i2d>
 80041dc:	4b40      	ldr	r3, [pc, #256]	@ (80042e0 <__kernel_rem_pio2+0x320>)
 80041de:	2200      	movs	r2, #0
 80041e0:	4606      	mov	r6, r0
 80041e2:	460f      	mov	r7, r1
 80041e4:	f7fc f9ac 	bl	8000540 <__aeabi_dmul>
 80041e8:	4602      	mov	r2, r0
 80041ea:	460b      	mov	r3, r1
 80041ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80041f0:	f7fb ffee 	bl	80001d0 <__aeabi_dsub>
 80041f4:	f7fc fc3e 	bl	8000a74 <__aeabi_d2iz>
 80041f8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80041fc:	f849 0b04 	str.w	r0, [r9], #4
 8004200:	4639      	mov	r1, r7
 8004202:	4630      	mov	r0, r6
 8004204:	f7fb ffe6 	bl	80001d4 <__adddf3>
 8004208:	f10a 3aff 	add.w	sl, sl, #4294967295
 800420c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004210:	e75d      	b.n	80040ce <__kernel_rem_pio2+0x10e>
 8004212:	d107      	bne.n	8004224 <__kernel_rem_pio2+0x264>
 8004214:	f108 33ff 	add.w	r3, r8, #4294967295
 8004218:	aa0c      	add	r2, sp, #48	@ 0x30
 800421a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800421e:	ea4f 59e3 	mov.w	r9, r3, asr #23
 8004222:	e79e      	b.n	8004162 <__kernel_rem_pio2+0x1a2>
 8004224:	4b2f      	ldr	r3, [pc, #188]	@ (80042e4 <__kernel_rem_pio2+0x324>)
 8004226:	2200      	movs	r2, #0
 8004228:	f7fc fc10 	bl	8000a4c <__aeabi_dcmpge>
 800422c:	2800      	cmp	r0, #0
 800422e:	d143      	bne.n	80042b8 <__kernel_rem_pio2+0x2f8>
 8004230:	4681      	mov	r9, r0
 8004232:	2200      	movs	r2, #0
 8004234:	2300      	movs	r3, #0
 8004236:	4630      	mov	r0, r6
 8004238:	4639      	mov	r1, r7
 800423a:	f7fc fbe9 	bl	8000a10 <__aeabi_dcmpeq>
 800423e:	2800      	cmp	r0, #0
 8004240:	f000 80bf 	beq.w	80043c2 <__kernel_rem_pio2+0x402>
 8004244:	f108 33ff 	add.w	r3, r8, #4294967295
 8004248:	2200      	movs	r2, #0
 800424a:	9900      	ldr	r1, [sp, #0]
 800424c:	428b      	cmp	r3, r1
 800424e:	da6e      	bge.n	800432e <__kernel_rem_pio2+0x36e>
 8004250:	2a00      	cmp	r2, #0
 8004252:	f000 8089 	beq.w	8004368 <__kernel_rem_pio2+0x3a8>
 8004256:	f108 38ff 	add.w	r8, r8, #4294967295
 800425a:	ab0c      	add	r3, sp, #48	@ 0x30
 800425c:	f1ab 0b18 	sub.w	fp, fp, #24
 8004260:	f853 3028 	ldr.w	r3, [r3, r8, lsl #2]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d0f6      	beq.n	8004256 <__kernel_rem_pio2+0x296>
 8004268:	4658      	mov	r0, fp
 800426a:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 80042c8 <__kernel_rem_pio2+0x308>
 800426e:	f000 f9ff 	bl	8004670 <scalbn>
 8004272:	f108 0301 	add.w	r3, r8, #1
 8004276:	00da      	lsls	r2, r3, #3
 8004278:	9205      	str	r2, [sp, #20]
 800427a:	ec55 4b10 	vmov	r4, r5, d0
 800427e:	aa70      	add	r2, sp, #448	@ 0x1c0
 8004280:	f8df b058 	ldr.w	fp, [pc, #88]	@ 80042dc <__kernel_rem_pio2+0x31c>
 8004284:	eb02 07c3 	add.w	r7, r2, r3, lsl #3
 8004288:	4646      	mov	r6, r8
 800428a:	f04f 0a00 	mov.w	sl, #0
 800428e:	2e00      	cmp	r6, #0
 8004290:	f280 80cf 	bge.w	8004432 <__kernel_rem_pio2+0x472>
 8004294:	4644      	mov	r4, r8
 8004296:	2c00      	cmp	r4, #0
 8004298:	f2c0 80fd 	blt.w	8004496 <__kernel_rem_pio2+0x4d6>
 800429c:	4b12      	ldr	r3, [pc, #72]	@ (80042e8 <__kernel_rem_pio2+0x328>)
 800429e:	461f      	mov	r7, r3
 80042a0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80042a2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80042a6:	9306      	str	r3, [sp, #24]
 80042a8:	f04f 0a00 	mov.w	sl, #0
 80042ac:	f04f 0b00 	mov.w	fp, #0
 80042b0:	2600      	movs	r6, #0
 80042b2:	eba8 0504 	sub.w	r5, r8, r4
 80042b6:	e0e2      	b.n	800447e <__kernel_rem_pio2+0x4be>
 80042b8:	f04f 0902 	mov.w	r9, #2
 80042bc:	e754      	b.n	8004168 <__kernel_rem_pio2+0x1a8>
 80042be:	bf00      	nop
	...
 80042cc:	3ff00000 	.word	0x3ff00000
 80042d0:	08004a60 	.word	0x08004a60
 80042d4:	40200000 	.word	0x40200000
 80042d8:	3ff00000 	.word	0x3ff00000
 80042dc:	3e700000 	.word	0x3e700000
 80042e0:	41700000 	.word	0x41700000
 80042e4:	3fe00000 	.word	0x3fe00000
 80042e8:	08004a20 	.word	0x08004a20
 80042ec:	f854 3b04 	ldr.w	r3, [r4], #4
 80042f0:	b945      	cbnz	r5, 8004304 <__kernel_rem_pio2+0x344>
 80042f2:	b123      	cbz	r3, 80042fe <__kernel_rem_pio2+0x33e>
 80042f4:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80042f8:	f844 3c04 	str.w	r3, [r4, #-4]
 80042fc:	2301      	movs	r3, #1
 80042fe:	3201      	adds	r2, #1
 8004300:	461d      	mov	r5, r3
 8004302:	e738      	b.n	8004176 <__kernel_rem_pio2+0x1b6>
 8004304:	1acb      	subs	r3, r1, r3
 8004306:	e7f7      	b.n	80042f8 <__kernel_rem_pio2+0x338>
 8004308:	f108 32ff 	add.w	r2, r8, #4294967295
 800430c:	ab0c      	add	r3, sp, #48	@ 0x30
 800430e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004312:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004316:	a90c      	add	r1, sp, #48	@ 0x30
 8004318:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800431c:	e739      	b.n	8004192 <__kernel_rem_pio2+0x1d2>
 800431e:	f108 32ff 	add.w	r2, r8, #4294967295
 8004322:	ab0c      	add	r3, sp, #48	@ 0x30
 8004324:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004328:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800432c:	e7f3      	b.n	8004316 <__kernel_rem_pio2+0x356>
 800432e:	a90c      	add	r1, sp, #48	@ 0x30
 8004330:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004334:	3b01      	subs	r3, #1
 8004336:	430a      	orrs	r2, r1
 8004338:	e787      	b.n	800424a <__kernel_rem_pio2+0x28a>
 800433a:	3401      	adds	r4, #1
 800433c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8004340:	2a00      	cmp	r2, #0
 8004342:	d0fa      	beq.n	800433a <__kernel_rem_pio2+0x37a>
 8004344:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004346:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800434a:	eb0d 0503 	add.w	r5, sp, r3
 800434e:	9b06      	ldr	r3, [sp, #24]
 8004350:	aa20      	add	r2, sp, #128	@ 0x80
 8004352:	4443      	add	r3, r8
 8004354:	f108 0701 	add.w	r7, r8, #1
 8004358:	3d98      	subs	r5, #152	@ 0x98
 800435a:	eb02 06c3 	add.w	r6, r2, r3, lsl #3
 800435e:	4444      	add	r4, r8
 8004360:	42bc      	cmp	r4, r7
 8004362:	da04      	bge.n	800436e <__kernel_rem_pio2+0x3ae>
 8004364:	46a0      	mov	r8, r4
 8004366:	e6a2      	b.n	80040ae <__kernel_rem_pio2+0xee>
 8004368:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800436a:	2401      	movs	r4, #1
 800436c:	e7e6      	b.n	800433c <__kernel_rem_pio2+0x37c>
 800436e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004370:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8004374:	f7fc f87a 	bl	800046c <__aeabi_i2d>
 8004378:	ed9f 7bb1 	vldr	d7, [pc, #708]	@ 8004640 <__kernel_rem_pio2+0x680>
 800437c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004384:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004388:	46b2      	mov	sl, r6
 800438a:	f04f 0800 	mov.w	r8, #0
 800438e:	9b05      	ldr	r3, [sp, #20]
 8004390:	4598      	cmp	r8, r3
 8004392:	dd05      	ble.n	80043a0 <__kernel_rem_pio2+0x3e0>
 8004394:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004398:	3701      	adds	r7, #1
 800439a:	eca5 7b02 	vstmia	r5!, {d7}
 800439e:	e7df      	b.n	8004360 <__kernel_rem_pio2+0x3a0>
 80043a0:	e97a 2302 	ldrd	r2, r3, [sl, #-8]!
 80043a4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80043a8:	f7fc f8ca 	bl	8000540 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80043b4:	f7fb ff0e 	bl	80001d4 <__adddf3>
 80043b8:	f108 0801 	add.w	r8, r8, #1
 80043bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80043c0:	e7e5      	b.n	800438e <__kernel_rem_pio2+0x3ce>
 80043c2:	f1cb 0000 	rsb	r0, fp, #0
 80043c6:	ec47 6b10 	vmov	d0, r6, r7
 80043ca:	f000 f951 	bl	8004670 <scalbn>
 80043ce:	ec55 4b10 	vmov	r4, r5, d0
 80043d2:	4b9d      	ldr	r3, [pc, #628]	@ (8004648 <__kernel_rem_pio2+0x688>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	4620      	mov	r0, r4
 80043d8:	4629      	mov	r1, r5
 80043da:	f7fc fb37 	bl	8000a4c <__aeabi_dcmpge>
 80043de:	b300      	cbz	r0, 8004422 <__kernel_rem_pio2+0x462>
 80043e0:	4b9a      	ldr	r3, [pc, #616]	@ (800464c <__kernel_rem_pio2+0x68c>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	4620      	mov	r0, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7fc f8aa 	bl	8000540 <__aeabi_dmul>
 80043ec:	f7fc fb42 	bl	8000a74 <__aeabi_d2iz>
 80043f0:	4606      	mov	r6, r0
 80043f2:	f7fc f83b 	bl	800046c <__aeabi_i2d>
 80043f6:	4b94      	ldr	r3, [pc, #592]	@ (8004648 <__kernel_rem_pio2+0x688>)
 80043f8:	2200      	movs	r2, #0
 80043fa:	f7fc f8a1 	bl	8000540 <__aeabi_dmul>
 80043fe:	460b      	mov	r3, r1
 8004400:	4602      	mov	r2, r0
 8004402:	4629      	mov	r1, r5
 8004404:	4620      	mov	r0, r4
 8004406:	f7fb fee3 	bl	80001d0 <__aeabi_dsub>
 800440a:	f7fc fb33 	bl	8000a74 <__aeabi_d2iz>
 800440e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004410:	f10b 0b18 	add.w	fp, fp, #24
 8004414:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004418:	f108 0801 	add.w	r8, r8, #1
 800441c:	f843 6028 	str.w	r6, [r3, r8, lsl #2]
 8004420:	e722      	b.n	8004268 <__kernel_rem_pio2+0x2a8>
 8004422:	4620      	mov	r0, r4
 8004424:	4629      	mov	r1, r5
 8004426:	f7fc fb25 	bl	8000a74 <__aeabi_d2iz>
 800442a:	ab0c      	add	r3, sp, #48	@ 0x30
 800442c:	f843 0028 	str.w	r0, [r3, r8, lsl #2]
 8004430:	e71a      	b.n	8004268 <__kernel_rem_pio2+0x2a8>
 8004432:	ab0c      	add	r3, sp, #48	@ 0x30
 8004434:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004438:	f7fc f818 	bl	800046c <__aeabi_i2d>
 800443c:	4622      	mov	r2, r4
 800443e:	462b      	mov	r3, r5
 8004440:	f7fc f87e 	bl	8000540 <__aeabi_dmul>
 8004444:	4652      	mov	r2, sl
 8004446:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800444a:	465b      	mov	r3, fp
 800444c:	4620      	mov	r0, r4
 800444e:	4629      	mov	r1, r5
 8004450:	f7fc f876 	bl	8000540 <__aeabi_dmul>
 8004454:	3e01      	subs	r6, #1
 8004456:	4604      	mov	r4, r0
 8004458:	460d      	mov	r5, r1
 800445a:	e718      	b.n	800428e <__kernel_rem_pio2+0x2ce>
 800445c:	9906      	ldr	r1, [sp, #24]
 800445e:	e8f1 2302 	ldrd	r2, r3, [r1], #8
 8004462:	9106      	str	r1, [sp, #24]
 8004464:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 8004468:	f7fc f86a 	bl	8000540 <__aeabi_dmul>
 800446c:	4602      	mov	r2, r0
 800446e:	460b      	mov	r3, r1
 8004470:	4650      	mov	r0, sl
 8004472:	4659      	mov	r1, fp
 8004474:	f7fb feae 	bl	80001d4 <__adddf3>
 8004478:	3601      	adds	r6, #1
 800447a:	4682      	mov	sl, r0
 800447c:	468b      	mov	fp, r1
 800447e:	9b00      	ldr	r3, [sp, #0]
 8004480:	429e      	cmp	r6, r3
 8004482:	dc01      	bgt.n	8004488 <__kernel_rem_pio2+0x4c8>
 8004484:	42b5      	cmp	r5, r6
 8004486:	dae9      	bge.n	800445c <__kernel_rem_pio2+0x49c>
 8004488:	ab48      	add	r3, sp, #288	@ 0x120
 800448a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800448e:	e9c5 ab00 	strd	sl, fp, [r5]
 8004492:	3c01      	subs	r4, #1
 8004494:	e6ff      	b.n	8004296 <__kernel_rem_pio2+0x2d6>
 8004496:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 8004498:	2b02      	cmp	r3, #2
 800449a:	dc0b      	bgt.n	80044b4 <__kernel_rem_pio2+0x4f4>
 800449c:	2b00      	cmp	r3, #0
 800449e:	dc39      	bgt.n	8004514 <__kernel_rem_pio2+0x554>
 80044a0:	d05d      	beq.n	800455e <__kernel_rem_pio2+0x59e>
 80044a2:	9b02      	ldr	r3, [sp, #8]
 80044a4:	f003 0007 	and.w	r0, r3, #7
 80044a8:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80044ac:	ecbd 8b02 	vpop	{d8}
 80044b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044b4:	9ba4      	ldr	r3, [sp, #656]	@ 0x290
 80044b6:	2b03      	cmp	r3, #3
 80044b8:	d1f3      	bne.n	80044a2 <__kernel_rem_pio2+0x4e2>
 80044ba:	9b05      	ldr	r3, [sp, #20]
 80044bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80044c0:	eb0d 0403 	add.w	r4, sp, r3
 80044c4:	f5a4 74a4 	sub.w	r4, r4, #328	@ 0x148
 80044c8:	4625      	mov	r5, r4
 80044ca:	46c2      	mov	sl, r8
 80044cc:	f1ba 0f00 	cmp.w	sl, #0
 80044d0:	f1a5 0508 	sub.w	r5, r5, #8
 80044d4:	dc6b      	bgt.n	80045ae <__kernel_rem_pio2+0x5ee>
 80044d6:	4645      	mov	r5, r8
 80044d8:	2d01      	cmp	r5, #1
 80044da:	f1a4 0408 	sub.w	r4, r4, #8
 80044de:	f300 8087 	bgt.w	80045f0 <__kernel_rem_pio2+0x630>
 80044e2:	9c05      	ldr	r4, [sp, #20]
 80044e4:	ab48      	add	r3, sp, #288	@ 0x120
 80044e6:	441c      	add	r4, r3
 80044e8:	2000      	movs	r0, #0
 80044ea:	2100      	movs	r1, #0
 80044ec:	f1b8 0f01 	cmp.w	r8, #1
 80044f0:	f300 809c 	bgt.w	800462c <__kernel_rem_pio2+0x66c>
 80044f4:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80044f8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80044fc:	f1b9 0f00 	cmp.w	r9, #0
 8004500:	f040 80a6 	bne.w	8004650 <__kernel_rem_pio2+0x690>
 8004504:	9b04      	ldr	r3, [sp, #16]
 8004506:	e9c3 7800 	strd	r7, r8, [r3]
 800450a:	e9c3 5602 	strd	r5, r6, [r3, #8]
 800450e:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004512:	e7c6      	b.n	80044a2 <__kernel_rem_pio2+0x4e2>
 8004514:	9d05      	ldr	r5, [sp, #20]
 8004516:	ab48      	add	r3, sp, #288	@ 0x120
 8004518:	441d      	add	r5, r3
 800451a:	4644      	mov	r4, r8
 800451c:	2000      	movs	r0, #0
 800451e:	2100      	movs	r1, #0
 8004520:	2c00      	cmp	r4, #0
 8004522:	da35      	bge.n	8004590 <__kernel_rem_pio2+0x5d0>
 8004524:	f1b9 0f00 	cmp.w	r9, #0
 8004528:	d038      	beq.n	800459c <__kernel_rem_pio2+0x5dc>
 800452a:	4602      	mov	r2, r0
 800452c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004530:	9c04      	ldr	r4, [sp, #16]
 8004532:	e9c4 2300 	strd	r2, r3, [r4]
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800453e:	f7fb fe47 	bl	80001d0 <__aeabi_dsub>
 8004542:	ad4a      	add	r5, sp, #296	@ 0x128
 8004544:	2401      	movs	r4, #1
 8004546:	45a0      	cmp	r8, r4
 8004548:	da2b      	bge.n	80045a2 <__kernel_rem_pio2+0x5e2>
 800454a:	f1b9 0f00 	cmp.w	r9, #0
 800454e:	d002      	beq.n	8004556 <__kernel_rem_pio2+0x596>
 8004550:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004554:	4619      	mov	r1, r3
 8004556:	9b04      	ldr	r3, [sp, #16]
 8004558:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800455c:	e7a1      	b.n	80044a2 <__kernel_rem_pio2+0x4e2>
 800455e:	9c05      	ldr	r4, [sp, #20]
 8004560:	ab48      	add	r3, sp, #288	@ 0x120
 8004562:	441c      	add	r4, r3
 8004564:	2000      	movs	r0, #0
 8004566:	2100      	movs	r1, #0
 8004568:	f1b8 0f00 	cmp.w	r8, #0
 800456c:	da09      	bge.n	8004582 <__kernel_rem_pio2+0x5c2>
 800456e:	f1b9 0f00 	cmp.w	r9, #0
 8004572:	d002      	beq.n	800457a <__kernel_rem_pio2+0x5ba>
 8004574:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004578:	4619      	mov	r1, r3
 800457a:	9b04      	ldr	r3, [sp, #16]
 800457c:	e9c3 0100 	strd	r0, r1, [r3]
 8004580:	e78f      	b.n	80044a2 <__kernel_rem_pio2+0x4e2>
 8004582:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004586:	f7fb fe25 	bl	80001d4 <__adddf3>
 800458a:	f108 38ff 	add.w	r8, r8, #4294967295
 800458e:	e7eb      	b.n	8004568 <__kernel_rem_pio2+0x5a8>
 8004590:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8004594:	f7fb fe1e 	bl	80001d4 <__adddf3>
 8004598:	3c01      	subs	r4, #1
 800459a:	e7c1      	b.n	8004520 <__kernel_rem_pio2+0x560>
 800459c:	4602      	mov	r2, r0
 800459e:	460b      	mov	r3, r1
 80045a0:	e7c6      	b.n	8004530 <__kernel_rem_pio2+0x570>
 80045a2:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80045a6:	f7fb fe15 	bl	80001d4 <__adddf3>
 80045aa:	3401      	adds	r4, #1
 80045ac:	e7cb      	b.n	8004546 <__kernel_rem_pio2+0x586>
 80045ae:	ed95 7b00 	vldr	d7, [r5]
 80045b2:	ed8d 7b00 	vstr	d7, [sp]
 80045b6:	ed95 7b02 	vldr	d7, [r5, #8]
 80045ba:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045be:	ec53 2b17 	vmov	r2, r3, d7
 80045c2:	ed8d 7b06 	vstr	d7, [sp, #24]
 80045c6:	f7fb fe05 	bl	80001d4 <__adddf3>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4606      	mov	r6, r0
 80045d0:	460f      	mov	r7, r1
 80045d2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80045d6:	f7fb fdfb 	bl	80001d0 <__aeabi_dsub>
 80045da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045de:	f7fb fdf9 	bl	80001d4 <__adddf3>
 80045e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045e6:	e9c5 0102 	strd	r0, r1, [r5, #8]
 80045ea:	e9c5 6700 	strd	r6, r7, [r5]
 80045ee:	e76d      	b.n	80044cc <__kernel_rem_pio2+0x50c>
 80045f0:	ed94 7b00 	vldr	d7, [r4]
 80045f4:	e9d4 ab02 	ldrd	sl, fp, [r4, #8]
 80045f8:	ec51 0b17 	vmov	r0, r1, d7
 80045fc:	4652      	mov	r2, sl
 80045fe:	465b      	mov	r3, fp
 8004600:	ed8d 7b00 	vstr	d7, [sp]
 8004604:	f7fb fde6 	bl	80001d4 <__adddf3>
 8004608:	4602      	mov	r2, r0
 800460a:	460b      	mov	r3, r1
 800460c:	4606      	mov	r6, r0
 800460e:	460f      	mov	r7, r1
 8004610:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004614:	f7fb fddc 	bl	80001d0 <__aeabi_dsub>
 8004618:	4652      	mov	r2, sl
 800461a:	465b      	mov	r3, fp
 800461c:	f7fb fdda 	bl	80001d4 <__adddf3>
 8004620:	3d01      	subs	r5, #1
 8004622:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004626:	e9c4 6700 	strd	r6, r7, [r4]
 800462a:	e755      	b.n	80044d8 <__kernel_rem_pio2+0x518>
 800462c:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004630:	f7fb fdd0 	bl	80001d4 <__adddf3>
 8004634:	f108 38ff 	add.w	r8, r8, #4294967295
 8004638:	e758      	b.n	80044ec <__kernel_rem_pio2+0x52c>
 800463a:	bf00      	nop
 800463c:	f3af 8000 	nop.w
	...
 8004648:	41700000 	.word	0x41700000
 800464c:	3e700000 	.word	0x3e700000
 8004650:	9b04      	ldr	r3, [sp, #16]
 8004652:	9a04      	ldr	r2, [sp, #16]
 8004654:	601f      	str	r7, [r3, #0]
 8004656:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800465a:	605c      	str	r4, [r3, #4]
 800465c:	609d      	str	r5, [r3, #8]
 800465e:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004662:	60d3      	str	r3, [r2, #12]
 8004664:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004668:	6110      	str	r0, [r2, #16]
 800466a:	6153      	str	r3, [r2, #20]
 800466c:	e719      	b.n	80044a2 <__kernel_rem_pio2+0x4e2>
 800466e:	bf00      	nop

08004670 <scalbn>:
 8004670:	b570      	push	{r4, r5, r6, lr}
 8004672:	ec55 4b10 	vmov	r4, r5, d0
 8004676:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800467a:	4606      	mov	r6, r0
 800467c:	462b      	mov	r3, r5
 800467e:	b991      	cbnz	r1, 80046a6 <scalbn+0x36>
 8004680:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8004684:	4323      	orrs	r3, r4
 8004686:	d03d      	beq.n	8004704 <scalbn+0x94>
 8004688:	4b35      	ldr	r3, [pc, #212]	@ (8004760 <scalbn+0xf0>)
 800468a:	4620      	mov	r0, r4
 800468c:	4629      	mov	r1, r5
 800468e:	2200      	movs	r2, #0
 8004690:	f7fb ff56 	bl	8000540 <__aeabi_dmul>
 8004694:	4b33      	ldr	r3, [pc, #204]	@ (8004764 <scalbn+0xf4>)
 8004696:	429e      	cmp	r6, r3
 8004698:	4604      	mov	r4, r0
 800469a:	460d      	mov	r5, r1
 800469c:	da0f      	bge.n	80046be <scalbn+0x4e>
 800469e:	a328      	add	r3, pc, #160	@ (adr r3, 8004740 <scalbn+0xd0>)
 80046a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a4:	e01e      	b.n	80046e4 <scalbn+0x74>
 80046a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80046aa:	4291      	cmp	r1, r2
 80046ac:	d10b      	bne.n	80046c6 <scalbn+0x56>
 80046ae:	4622      	mov	r2, r4
 80046b0:	4620      	mov	r0, r4
 80046b2:	4629      	mov	r1, r5
 80046b4:	f7fb fd8e 	bl	80001d4 <__adddf3>
 80046b8:	4604      	mov	r4, r0
 80046ba:	460d      	mov	r5, r1
 80046bc:	e022      	b.n	8004704 <scalbn+0x94>
 80046be:	460b      	mov	r3, r1
 80046c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80046c4:	3936      	subs	r1, #54	@ 0x36
 80046c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80046ca:	4296      	cmp	r6, r2
 80046cc:	dd0d      	ble.n	80046ea <scalbn+0x7a>
 80046ce:	2d00      	cmp	r5, #0
 80046d0:	a11d      	add	r1, pc, #116	@ (adr r1, 8004748 <scalbn+0xd8>)
 80046d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046d6:	da02      	bge.n	80046de <scalbn+0x6e>
 80046d8:	a11d      	add	r1, pc, #116	@ (adr r1, 8004750 <scalbn+0xe0>)
 80046da:	e9d1 0100 	ldrd	r0, r1, [r1]
 80046de:	a31a      	add	r3, pc, #104	@ (adr r3, 8004748 <scalbn+0xd8>)
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f7fb ff2c 	bl	8000540 <__aeabi_dmul>
 80046e8:	e7e6      	b.n	80046b8 <scalbn+0x48>
 80046ea:	1872      	adds	r2, r6, r1
 80046ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80046f0:	428a      	cmp	r2, r1
 80046f2:	dcec      	bgt.n	80046ce <scalbn+0x5e>
 80046f4:	2a00      	cmp	r2, #0
 80046f6:	dd08      	ble.n	800470a <scalbn+0x9a>
 80046f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80046fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004700:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004704:	ec45 4b10 	vmov	d0, r4, r5
 8004708:	bd70      	pop	{r4, r5, r6, pc}
 800470a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800470e:	da08      	bge.n	8004722 <scalbn+0xb2>
 8004710:	2d00      	cmp	r5, #0
 8004712:	a10b      	add	r1, pc, #44	@ (adr r1, 8004740 <scalbn+0xd0>)
 8004714:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004718:	dac1      	bge.n	800469e <scalbn+0x2e>
 800471a:	a10f      	add	r1, pc, #60	@ (adr r1, 8004758 <scalbn+0xe8>)
 800471c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004720:	e7bd      	b.n	800469e <scalbn+0x2e>
 8004722:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004726:	3236      	adds	r2, #54	@ 0x36
 8004728:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800472c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004730:	4620      	mov	r0, r4
 8004732:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <scalbn+0xf8>)
 8004734:	4629      	mov	r1, r5
 8004736:	2200      	movs	r2, #0
 8004738:	e7d4      	b.n	80046e4 <scalbn+0x74>
 800473a:	bf00      	nop
 800473c:	f3af 8000 	nop.w
 8004740:	c2f8f359 	.word	0xc2f8f359
 8004744:	01a56e1f 	.word	0x01a56e1f
 8004748:	8800759c 	.word	0x8800759c
 800474c:	7e37e43c 	.word	0x7e37e43c
 8004750:	8800759c 	.word	0x8800759c
 8004754:	fe37e43c 	.word	0xfe37e43c
 8004758:	c2f8f359 	.word	0xc2f8f359
 800475c:	81a56e1f 	.word	0x81a56e1f
 8004760:	43500000 	.word	0x43500000
 8004764:	ffff3cb0 	.word	0xffff3cb0
 8004768:	3c900000 	.word	0x3c900000
 800476c:	00000000 	.word	0x00000000

08004770 <floor>:
 8004770:	ec51 0b10 	vmov	r0, r1, d0
 8004774:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800477c:	f2a3 36ff 	subw	r6, r3, #1023	@ 0x3ff
 8004780:	2e13      	cmp	r6, #19
 8004782:	460c      	mov	r4, r1
 8004784:	4605      	mov	r5, r0
 8004786:	4680      	mov	r8, r0
 8004788:	dc34      	bgt.n	80047f4 <floor+0x84>
 800478a:	2e00      	cmp	r6, #0
 800478c:	da17      	bge.n	80047be <floor+0x4e>
 800478e:	a332      	add	r3, pc, #200	@ (adr r3, 8004858 <floor+0xe8>)
 8004790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004794:	f7fb fd1e 	bl	80001d4 <__adddf3>
 8004798:	2200      	movs	r2, #0
 800479a:	2300      	movs	r3, #0
 800479c:	f7fc f960 	bl	8000a60 <__aeabi_dcmpgt>
 80047a0:	b150      	cbz	r0, 80047b8 <floor+0x48>
 80047a2:	2c00      	cmp	r4, #0
 80047a4:	da55      	bge.n	8004852 <floor+0xe2>
 80047a6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80047aa:	432c      	orrs	r4, r5
 80047ac:	2500      	movs	r5, #0
 80047ae:	42ac      	cmp	r4, r5
 80047b0:	4c2b      	ldr	r4, [pc, #172]	@ (8004860 <floor+0xf0>)
 80047b2:	bf08      	it	eq
 80047b4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80047b8:	4621      	mov	r1, r4
 80047ba:	4628      	mov	r0, r5
 80047bc:	e023      	b.n	8004806 <floor+0x96>
 80047be:	4f29      	ldr	r7, [pc, #164]	@ (8004864 <floor+0xf4>)
 80047c0:	4137      	asrs	r7, r6
 80047c2:	ea01 0307 	and.w	r3, r1, r7
 80047c6:	4303      	orrs	r3, r0
 80047c8:	d01d      	beq.n	8004806 <floor+0x96>
 80047ca:	a323      	add	r3, pc, #140	@ (adr r3, 8004858 <floor+0xe8>)
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	f7fb fd00 	bl	80001d4 <__adddf3>
 80047d4:	2200      	movs	r2, #0
 80047d6:	2300      	movs	r3, #0
 80047d8:	f7fc f942 	bl	8000a60 <__aeabi_dcmpgt>
 80047dc:	2800      	cmp	r0, #0
 80047de:	d0eb      	beq.n	80047b8 <floor+0x48>
 80047e0:	2c00      	cmp	r4, #0
 80047e2:	bfbe      	ittt	lt
 80047e4:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80047e8:	4133      	asrlt	r3, r6
 80047ea:	18e4      	addlt	r4, r4, r3
 80047ec:	ea24 0407 	bic.w	r4, r4, r7
 80047f0:	2500      	movs	r5, #0
 80047f2:	e7e1      	b.n	80047b8 <floor+0x48>
 80047f4:	2e33      	cmp	r6, #51	@ 0x33
 80047f6:	dd0a      	ble.n	800480e <floor+0x9e>
 80047f8:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80047fc:	d103      	bne.n	8004806 <floor+0x96>
 80047fe:	4602      	mov	r2, r0
 8004800:	460b      	mov	r3, r1
 8004802:	f7fb fce7 	bl	80001d4 <__adddf3>
 8004806:	ec41 0b10 	vmov	d0, r0, r1
 800480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800480e:	f2a3 4313 	subw	r3, r3, #1043	@ 0x413
 8004812:	f04f 37ff 	mov.w	r7, #4294967295
 8004816:	40df      	lsrs	r7, r3
 8004818:	4207      	tst	r7, r0
 800481a:	d0f4      	beq.n	8004806 <floor+0x96>
 800481c:	a30e      	add	r3, pc, #56	@ (adr r3, 8004858 <floor+0xe8>)
 800481e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004822:	f7fb fcd7 	bl	80001d4 <__adddf3>
 8004826:	2200      	movs	r2, #0
 8004828:	2300      	movs	r3, #0
 800482a:	f7fc f919 	bl	8000a60 <__aeabi_dcmpgt>
 800482e:	2800      	cmp	r0, #0
 8004830:	d0c2      	beq.n	80047b8 <floor+0x48>
 8004832:	2c00      	cmp	r4, #0
 8004834:	da0a      	bge.n	800484c <floor+0xdc>
 8004836:	2e14      	cmp	r6, #20
 8004838:	d101      	bne.n	800483e <floor+0xce>
 800483a:	3401      	adds	r4, #1
 800483c:	e006      	b.n	800484c <floor+0xdc>
 800483e:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004842:	2301      	movs	r3, #1
 8004844:	40b3      	lsls	r3, r6
 8004846:	441d      	add	r5, r3
 8004848:	4545      	cmp	r5, r8
 800484a:	d3f6      	bcc.n	800483a <floor+0xca>
 800484c:	ea25 0507 	bic.w	r5, r5, r7
 8004850:	e7b2      	b.n	80047b8 <floor+0x48>
 8004852:	2500      	movs	r5, #0
 8004854:	462c      	mov	r4, r5
 8004856:	e7af      	b.n	80047b8 <floor+0x48>
 8004858:	8800759c 	.word	0x8800759c
 800485c:	7e37e43c 	.word	0x7e37e43c
 8004860:	bff00000 	.word	0xbff00000
 8004864:	000fffff 	.word	0x000fffff

08004868 <_init>:
 8004868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486a:	bf00      	nop
 800486c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486e:	bc08      	pop	{r3}
 8004870:	469e      	mov	lr, r3
 8004872:	4770      	bx	lr

08004874 <_fini>:
 8004874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004876:	bf00      	nop
 8004878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800487a:	bc08      	pop	{r3}
 800487c:	469e      	mov	lr, r3
 800487e:	4770      	bx	lr
