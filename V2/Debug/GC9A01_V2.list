
GC9A01_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003828  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000a054  080039b0  080039b0  000049b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da04  0800da04  0000f004  2**0
                  CONTENTS
  4 .ARM          00000000  0800da04  0800da04  0000f004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da04  0800da04  0000f004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da04  0800da04  0000ea04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800da08  0800da08  0000ea08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  0800da0c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f004  2**0
                  CONTENTS
 10 .bss          00000220  20000004  20000004  0000f004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000224  20000224  0000f004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00007bb8  00000000  00000000  0000f034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000dc6  00000000  00000000  00016bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000330  00000000  00000000  000179b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000265  00000000  00000000  00017ce8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000e61  00000000  00000000  00017f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005801  00000000  00000000  00018dae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f37d  00000000  00000000  0001e5af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000ad92c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000c0c  00000000  00000000  000ad970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000051  00000000  00000000  000ae57c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003998 	.word	0x08003998

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08003998 	.word	0x08003998

080001c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80001d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001d6:	2b00      	cmp	r3, #0
 80001d8:	db0b      	blt.n	80001f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	f003 021f 	and.w	r2, r3, #31
 80001e0:	4907      	ldr	r1, [pc, #28]	@ (8000200 <__NVIC_EnableIRQ+0x38>)
 80001e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001e6:	095b      	lsrs	r3, r3, #5
 80001e8:	2001      	movs	r0, #1
 80001ea:	fa00 f202 	lsl.w	r2, r0, r2
 80001ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	e000e100 	.word	0xe000e100

08000204 <DMA1_Stream0_IRQHandler>:
DMA_Flags_Typedef DMA2_Stream6_Flag;
DMA_Flags_Typedef DMA2_Stream7_Flag;


void DMA1_Stream0_IRQHandler(void)
{
 8000204:	b480      	push	{r7}
 8000206:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF0)
 8000208:	4b29      	ldr	r3, [pc, #164]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	f003 0301 	and.w	r3, r3, #1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d009      	beq.n	8000228 <DMA1_Stream0_IRQHandler+0x24>
	{
		DMA1_Stream0_Flag.Fifo_Error_Flag = true;
 8000214:	4b27      	ldr	r3, [pc, #156]	@ (80002b4 <DMA1_Stream0_IRQHandler+0xb0>)
 8000216:	2201      	movs	r2, #1
 8000218:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF0;
 800021a:	4b25      	ldr	r3, [pc, #148]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800021c:	689b      	ldr	r3, [r3, #8]
 800021e:	4a24      	ldr	r2, [pc, #144]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 8000220:	f043 0301 	orr.w	r3, r3, #1
 8000224:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF0)
	{
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 8000226:	e03e      	b.n	80002a6 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF0)
 8000228:	4b21      	ldr	r3, [pc, #132]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f003 0304 	and.w	r3, r3, #4
 8000230:	2b00      	cmp	r3, #0
 8000232:	d009      	beq.n	8000248 <DMA1_Stream0_IRQHandler+0x44>
		DMA1_Stream0_Flag.Direct_Mode_Error_Flag = true;
 8000234:	4b1f      	ldr	r3, [pc, #124]	@ (80002b4 <DMA1_Stream0_IRQHandler+0xb0>)
 8000236:	2201      	movs	r2, #1
 8000238:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 800023a:	4b1d      	ldr	r3, [pc, #116]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800023c:	689b      	ldr	r3, [r3, #8]
 800023e:	4a1c      	ldr	r2, [pc, #112]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 8000240:	f043 0304 	orr.w	r3, r3, #4
 8000244:	6093      	str	r3, [r2, #8]
}
 8000246:	e02e      	b.n	80002a6 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF0)
 8000248:	4b19      	ldr	r3, [pc, #100]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f003 0308 	and.w	r3, r3, #8
 8000250:	2b00      	cmp	r3, #0
 8000252:	d009      	beq.n	8000268 <DMA1_Stream0_IRQHandler+0x64>
		DMA1_Stream0_Flag.Transfer_Error_Flag = true;
 8000254:	4b17      	ldr	r3, [pc, #92]	@ (80002b4 <DMA1_Stream0_IRQHandler+0xb0>)
 8000256:	2201      	movs	r2, #1
 8000258:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF0;
 800025a:	4b15      	ldr	r3, [pc, #84]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800025c:	689b      	ldr	r3, [r3, #8]
 800025e:	4a14      	ldr	r2, [pc, #80]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 8000260:	f043 0308 	orr.w	r3, r3, #8
 8000264:	6093      	str	r3, [r2, #8]
}
 8000266:	e01e      	b.n	80002a6 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF0)
 8000268:	4b11      	ldr	r3, [pc, #68]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800026a:	681b      	ldr	r3, [r3, #0]
 800026c:	f003 0310 	and.w	r3, r3, #16
 8000270:	2b00      	cmp	r3, #0
 8000272:	d009      	beq.n	8000288 <DMA1_Stream0_IRQHandler+0x84>
		DMA1_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000274:	4b0f      	ldr	r3, [pc, #60]	@ (80002b4 <DMA1_Stream0_IRQHandler+0xb0>)
 8000276:	2201      	movs	r2, #1
 8000278:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF0;
 800027a:	4b0d      	ldr	r3, [pc, #52]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800027c:	689b      	ldr	r3, [r3, #8]
 800027e:	4a0c      	ldr	r2, [pc, #48]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 8000280:	f043 0310 	orr.w	r3, r3, #16
 8000284:	6093      	str	r3, [r2, #8]
}
 8000286:	e00e      	b.n	80002a6 <DMA1_Stream0_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF0)
 8000288:	4b09      	ldr	r3, [pc, #36]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	f003 0320 	and.w	r3, r3, #32
 8000290:	2b00      	cmp	r3, #0
 8000292:	d008      	beq.n	80002a6 <DMA1_Stream0_IRQHandler+0xa2>
		DMA1_Stream0_Flag.Transfer_Complete_Flag = true;
 8000294:	4b07      	ldr	r3, [pc, #28]	@ (80002b4 <DMA1_Stream0_IRQHandler+0xb0>)
 8000296:	2201      	movs	r2, #1
 8000298:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800029a:	4b05      	ldr	r3, [pc, #20]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	4a04      	ldr	r2, [pc, #16]	@ (80002b0 <DMA1_Stream0_IRQHandler+0xac>)
 80002a0:	f043 0320 	orr.w	r3, r3, #32
 80002a4:	6093      	str	r3, [r2, #8]
}
 80002a6:	bf00      	nop
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr
 80002b0:	40026000 	.word	0x40026000
 80002b4:	20000020 	.word	0x20000020

080002b8 <DMA1_Stream1_IRQHandler>:

void DMA1_Stream1_IRQHandler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF1)
 80002bc:	4b29      	ldr	r3, [pc, #164]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d009      	beq.n	80002dc <DMA1_Stream1_IRQHandler+0x24>
	{
		DMA1_Stream1_Flag.Fifo_Error_Flag = true;
 80002c8:	4b27      	ldr	r3, [pc, #156]	@ (8000368 <DMA1_Stream1_IRQHandler+0xb0>)
 80002ca:	2201      	movs	r2, #1
 80002cc:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF1;
 80002ce:	4b25      	ldr	r3, [pc, #148]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 80002d0:	689b      	ldr	r3, [r3, #8]
 80002d2:	4a24      	ldr	r2, [pc, #144]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 80002d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002d8:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF1)
	{
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 80002da:	e03e      	b.n	800035a <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF1)
 80002dc:	4b21      	ldr	r3, [pc, #132]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d009      	beq.n	80002fc <DMA1_Stream1_IRQHandler+0x44>
		DMA1_Stream1_Flag.Direct_Mode_Error_Flag = true;
 80002e8:	4b1f      	ldr	r3, [pc, #124]	@ (8000368 <DMA1_Stream1_IRQHandler+0xb0>)
 80002ea:	2201      	movs	r2, #1
 80002ec:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 80002ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 80002f0:	689b      	ldr	r3, [r3, #8]
 80002f2:	4a1c      	ldr	r2, [pc, #112]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 80002f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002f8:	6093      	str	r3, [r2, #8]
}
 80002fa:	e02e      	b.n	800035a <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF1)
 80002fc:	4b19      	ldr	r3, [pc, #100]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000304:	2b00      	cmp	r3, #0
 8000306:	d009      	beq.n	800031c <DMA1_Stream1_IRQHandler+0x64>
		DMA1_Stream1_Flag.Transfer_Error_Flag = true;
 8000308:	4b17      	ldr	r3, [pc, #92]	@ (8000368 <DMA1_Stream1_IRQHandler+0xb0>)
 800030a:	2201      	movs	r2, #1
 800030c:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF1;
 800030e:	4b15      	ldr	r3, [pc, #84]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	4a14      	ldr	r2, [pc, #80]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 8000314:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000318:	6093      	str	r3, [r2, #8]
}
 800031a:	e01e      	b.n	800035a <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF1)
 800031c:	4b11      	ldr	r3, [pc, #68]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000324:	2b00      	cmp	r3, #0
 8000326:	d009      	beq.n	800033c <DMA1_Stream1_IRQHandler+0x84>
		DMA1_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 8000328:	4b0f      	ldr	r3, [pc, #60]	@ (8000368 <DMA1_Stream1_IRQHandler+0xb0>)
 800032a:	2201      	movs	r2, #1
 800032c:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF1;
 800032e:	4b0d      	ldr	r3, [pc, #52]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 8000330:	689b      	ldr	r3, [r3, #8]
 8000332:	4a0c      	ldr	r2, [pc, #48]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 8000334:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000338:	6093      	str	r3, [r2, #8]
}
 800033a:	e00e      	b.n	800035a <DMA1_Stream1_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF1)
 800033c:	4b09      	ldr	r3, [pc, #36]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000344:	2b00      	cmp	r3, #0
 8000346:	d008      	beq.n	800035a <DMA1_Stream1_IRQHandler+0xa2>
		DMA1_Stream1_Flag.Transfer_Complete_Flag = true;
 8000348:	4b07      	ldr	r3, [pc, #28]	@ (8000368 <DMA1_Stream1_IRQHandler+0xb0>)
 800034a:	2201      	movs	r2, #1
 800034c:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF1;
 800034e:	4b05      	ldr	r3, [pc, #20]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 8000350:	689b      	ldr	r3, [r3, #8]
 8000352:	4a04      	ldr	r2, [pc, #16]	@ (8000364 <DMA1_Stream1_IRQHandler+0xac>)
 8000354:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000358:	6093      	str	r3, [r2, #8]
}
 800035a:	bf00      	nop
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40026000 	.word	0x40026000
 8000368:	20000028 	.word	0x20000028

0800036c <DMA1_Stream2_IRQHandler>:

void DMA1_Stream2_IRQHandler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF2)
 8000370:	4b29      	ldr	r3, [pc, #164]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000378:	2b00      	cmp	r3, #0
 800037a:	d009      	beq.n	8000390 <DMA1_Stream2_IRQHandler+0x24>
	{
		DMA1_Stream2_Flag.Fifo_Error_Flag = true;
 800037c:	4b27      	ldr	r3, [pc, #156]	@ (800041c <DMA1_Stream2_IRQHandler+0xb0>)
 800037e:	2201      	movs	r2, #1
 8000380:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000382:	4b25      	ldr	r3, [pc, #148]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	4a24      	ldr	r2, [pc, #144]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 8000388:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800038c:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF2)
	{
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 800038e:	e03e      	b.n	800040e <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF2)
 8000390:	4b21      	ldr	r3, [pc, #132]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000398:	2b00      	cmp	r3, #0
 800039a:	d009      	beq.n	80003b0 <DMA1_Stream2_IRQHandler+0x44>
		DMA1_Stream2_Flag.Direct_Mode_Error_Flag = true;
 800039c:	4b1f      	ldr	r3, [pc, #124]	@ (800041c <DMA1_Stream2_IRQHandler+0xb0>)
 800039e:	2201      	movs	r2, #1
 80003a0:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 80003a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4a1c      	ldr	r2, [pc, #112]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80003ac:	6093      	str	r3, [r2, #8]
}
 80003ae:	e02e      	b.n	800040e <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF2)
 80003b0:	4b19      	ldr	r3, [pc, #100]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d009      	beq.n	80003d0 <DMA1_Stream2_IRQHandler+0x64>
		DMA1_Stream2_Flag.Transfer_Error_Flag = true;
 80003bc:	4b17      	ldr	r3, [pc, #92]	@ (800041c <DMA1_Stream2_IRQHandler+0xb0>)
 80003be:	2201      	movs	r2, #1
 80003c0:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF2;
 80003c2:	4b15      	ldr	r3, [pc, #84]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	4a14      	ldr	r2, [pc, #80]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80003cc:	6093      	str	r3, [r2, #8]
}
 80003ce:	e01e      	b.n	800040e <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF2)
 80003d0:	4b11      	ldr	r3, [pc, #68]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d009      	beq.n	80003f0 <DMA1_Stream2_IRQHandler+0x84>
		DMA1_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 80003dc:	4b0f      	ldr	r3, [pc, #60]	@ (800041c <DMA1_Stream2_IRQHandler+0xb0>)
 80003de:	2201      	movs	r2, #1
 80003e0:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF2;
 80003e2:	4b0d      	ldr	r3, [pc, #52]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	4a0c      	ldr	r2, [pc, #48]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80003ec:	6093      	str	r3, [r2, #8]
}
 80003ee:	e00e      	b.n	800040e <DMA1_Stream2_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF2)
 80003f0:	4b09      	ldr	r3, [pc, #36]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d008      	beq.n	800040e <DMA1_Stream2_IRQHandler+0xa2>
		DMA1_Stream2_Flag.Transfer_Complete_Flag = true;
 80003fc:	4b07      	ldr	r3, [pc, #28]	@ (800041c <DMA1_Stream2_IRQHandler+0xb0>)
 80003fe:	2201      	movs	r2, #1
 8000400:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF2;
 8000402:	4b05      	ldr	r3, [pc, #20]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 8000404:	689b      	ldr	r3, [r3, #8]
 8000406:	4a04      	ldr	r2, [pc, #16]	@ (8000418 <DMA1_Stream2_IRQHandler+0xac>)
 8000408:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800040c:	6093      	str	r3, [r2, #8]
}
 800040e:	bf00      	nop
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	40026000 	.word	0x40026000
 800041c:	20000030 	.word	0x20000030

08000420 <DMA1_Stream3_IRQHandler>:

void DMA1_Stream3_IRQHandler(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	if(DMA1 -> LISR & DMA_LISR_FEIF3)
 8000424:	4b29      	ldr	r3, [pc, #164]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000426:	681b      	ldr	r3, [r3, #0]
 8000428:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800042c:	2b00      	cmp	r3, #0
 800042e:	d009      	beq.n	8000444 <DMA1_Stream3_IRQHandler+0x24>
	{
		DMA1_Stream3_Flag.Fifo_Error_Flag = true;
 8000430:	4b27      	ldr	r3, [pc, #156]	@ (80004d0 <DMA1_Stream3_IRQHandler+0xb0>)
 8000432:	2201      	movs	r2, #1
 8000434:	711a      	strb	r2, [r3, #4]
		DMA1 -> LIFCR |= DMA_LIFCR_CFEIF3;
 8000436:	4b25      	ldr	r3, [pc, #148]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000438:	689b      	ldr	r3, [r3, #8]
 800043a:	4a24      	ldr	r2, [pc, #144]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 800043c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000440:	6093      	str	r3, [r2, #8]
	else if(DMA1 -> LISR & DMA_LISR_TCIF3)
	{
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 8000442:	e03e      	b.n	80004c2 <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_DMEIF3)
 8000444:	4b21      	ldr	r3, [pc, #132]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800044c:	2b00      	cmp	r3, #0
 800044e:	d009      	beq.n	8000464 <DMA1_Stream3_IRQHandler+0x44>
		DMA1_Stream3_Flag.Direct_Mode_Error_Flag = true;
 8000450:	4b1f      	ldr	r3, [pc, #124]	@ (80004d0 <DMA1_Stream3_IRQHandler+0xb0>)
 8000452:	2201      	movs	r2, #1
 8000454:	70da      	strb	r2, [r3, #3]
		DMA1 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 8000456:	4b1d      	ldr	r3, [pc, #116]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000458:	689b      	ldr	r3, [r3, #8]
 800045a:	4a1c      	ldr	r2, [pc, #112]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 800045c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000460:	6093      	str	r3, [r2, #8]
}
 8000462:	e02e      	b.n	80004c2 <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TEIF3)
 8000464:	4b19      	ldr	r3, [pc, #100]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800046c:	2b00      	cmp	r3, #0
 800046e:	d009      	beq.n	8000484 <DMA1_Stream3_IRQHandler+0x64>
		DMA1_Stream3_Flag.Transfer_Error_Flag = true;
 8000470:	4b17      	ldr	r3, [pc, #92]	@ (80004d0 <DMA1_Stream3_IRQHandler+0xb0>)
 8000472:	2201      	movs	r2, #1
 8000474:	709a      	strb	r2, [r3, #2]
		DMA1 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000476:	4b15      	ldr	r3, [pc, #84]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000478:	689b      	ldr	r3, [r3, #8]
 800047a:	4a14      	ldr	r2, [pc, #80]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 800047c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000480:	6093      	str	r3, [r2, #8]
}
 8000482:	e01e      	b.n	80004c2 <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_HTIF3)
 8000484:	4b11      	ldr	r3, [pc, #68]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d009      	beq.n	80004a4 <DMA1_Stream3_IRQHandler+0x84>
		DMA1_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8000490:	4b0f      	ldr	r3, [pc, #60]	@ (80004d0 <DMA1_Stream3_IRQHandler+0xb0>)
 8000492:	2201      	movs	r2, #1
 8000494:	705a      	strb	r2, [r3, #1]
		DMA1 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000496:	4b0d      	ldr	r3, [pc, #52]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 8000498:	689b      	ldr	r3, [r3, #8]
 800049a:	4a0c      	ldr	r2, [pc, #48]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 800049c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80004a0:	6093      	str	r3, [r2, #8]
}
 80004a2:	e00e      	b.n	80004c2 <DMA1_Stream3_IRQHandler+0xa2>
	else if(DMA1 -> LISR & DMA_LISR_TCIF3)
 80004a4:	4b09      	ldr	r3, [pc, #36]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d008      	beq.n	80004c2 <DMA1_Stream3_IRQHandler+0xa2>
		DMA1_Stream3_Flag.Transfer_Complete_Flag = true;
 80004b0:	4b07      	ldr	r3, [pc, #28]	@ (80004d0 <DMA1_Stream3_IRQHandler+0xb0>)
 80004b2:	2201      	movs	r2, #1
 80004b4:	701a      	strb	r2, [r3, #0]
		DMA1 -> LIFCR |= DMA_LIFCR_CTCIF3;
 80004b6:	4b05      	ldr	r3, [pc, #20]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 80004b8:	689b      	ldr	r3, [r3, #8]
 80004ba:	4a04      	ldr	r2, [pc, #16]	@ (80004cc <DMA1_Stream3_IRQHandler+0xac>)
 80004bc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80004c0:	6093      	str	r3, [r2, #8]
}
 80004c2:	bf00      	nop
 80004c4:	46bd      	mov	sp, r7
 80004c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ca:	4770      	bx	lr
 80004cc:	40026000 	.word	0x40026000
 80004d0:	20000038 	.word	0x20000038

080004d4 <DMA1_Stream4_IRQHandler>:

void DMA1_Stream4_IRQHandler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF4)
 80004d8:	4b29      	ldr	r3, [pc, #164]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 80004da:	685b      	ldr	r3, [r3, #4]
 80004dc:	f003 0301 	and.w	r3, r3, #1
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d009      	beq.n	80004f8 <DMA1_Stream4_IRQHandler+0x24>
	{
		DMA1_Stream4_Flag.Fifo_Error_Flag = true;
 80004e4:	4b27      	ldr	r3, [pc, #156]	@ (8000584 <DMA1_Stream4_IRQHandler+0xb0>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF4;
 80004ea:	4b25      	ldr	r3, [pc, #148]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 80004ec:	68db      	ldr	r3, [r3, #12]
 80004ee:	4a24      	ldr	r2, [pc, #144]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF4)
	{
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 80004f6:	e03e      	b.n	8000576 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF4)
 80004f8:	4b21      	ldr	r3, [pc, #132]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 80004fa:	685b      	ldr	r3, [r3, #4]
 80004fc:	f003 0304 	and.w	r3, r3, #4
 8000500:	2b00      	cmp	r3, #0
 8000502:	d009      	beq.n	8000518 <DMA1_Stream4_IRQHandler+0x44>
		DMA1_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8000504:	4b1f      	ldr	r3, [pc, #124]	@ (8000584 <DMA1_Stream4_IRQHandler+0xb0>)
 8000506:	2201      	movs	r2, #1
 8000508:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 800050a:	4b1d      	ldr	r3, [pc, #116]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 800050c:	68db      	ldr	r3, [r3, #12]
 800050e:	4a1c      	ldr	r2, [pc, #112]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	60d3      	str	r3, [r2, #12]
}
 8000516:	e02e      	b.n	8000576 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF4)
 8000518:	4b19      	ldr	r3, [pc, #100]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 800051a:	685b      	ldr	r3, [r3, #4]
 800051c:	f003 0308 	and.w	r3, r3, #8
 8000520:	2b00      	cmp	r3, #0
 8000522:	d009      	beq.n	8000538 <DMA1_Stream4_IRQHandler+0x64>
		DMA1_Stream4_Flag.Transfer_Error_Flag = true;
 8000524:	4b17      	ldr	r3, [pc, #92]	@ (8000584 <DMA1_Stream4_IRQHandler+0xb0>)
 8000526:	2201      	movs	r2, #1
 8000528:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF4;
 800052a:	4b15      	ldr	r3, [pc, #84]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 800052c:	68db      	ldr	r3, [r3, #12]
 800052e:	4a14      	ldr	r2, [pc, #80]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 8000530:	f043 0308 	orr.w	r3, r3, #8
 8000534:	60d3      	str	r3, [r2, #12]
}
 8000536:	e01e      	b.n	8000576 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF4)
 8000538:	4b11      	ldr	r3, [pc, #68]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 800053a:	685b      	ldr	r3, [r3, #4]
 800053c:	f003 0310 	and.w	r3, r3, #16
 8000540:	2b00      	cmp	r3, #0
 8000542:	d009      	beq.n	8000558 <DMA1_Stream4_IRQHandler+0x84>
		DMA1_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8000544:	4b0f      	ldr	r3, [pc, #60]	@ (8000584 <DMA1_Stream4_IRQHandler+0xb0>)
 8000546:	2201      	movs	r2, #1
 8000548:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF4;
 800054a:	4b0d      	ldr	r3, [pc, #52]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 800054c:	68db      	ldr	r3, [r3, #12]
 800054e:	4a0c      	ldr	r2, [pc, #48]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 8000550:	f043 0310 	orr.w	r3, r3, #16
 8000554:	60d3      	str	r3, [r2, #12]
}
 8000556:	e00e      	b.n	8000576 <DMA1_Stream4_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF4)
 8000558:	4b09      	ldr	r3, [pc, #36]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 800055a:	685b      	ldr	r3, [r3, #4]
 800055c:	f003 0320 	and.w	r3, r3, #32
 8000560:	2b00      	cmp	r3, #0
 8000562:	d008      	beq.n	8000576 <DMA1_Stream4_IRQHandler+0xa2>
		DMA1_Stream4_Flag.Transfer_Complete_Flag = true;
 8000564:	4b07      	ldr	r3, [pc, #28]	@ (8000584 <DMA1_Stream4_IRQHandler+0xb0>)
 8000566:	2201      	movs	r2, #1
 8000568:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF4;
 800056a:	4b05      	ldr	r3, [pc, #20]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 800056c:	68db      	ldr	r3, [r3, #12]
 800056e:	4a04      	ldr	r2, [pc, #16]	@ (8000580 <DMA1_Stream4_IRQHandler+0xac>)
 8000570:	f043 0320 	orr.w	r3, r3, #32
 8000574:	60d3      	str	r3, [r2, #12]
}
 8000576:	bf00      	nop
 8000578:	46bd      	mov	sp, r7
 800057a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057e:	4770      	bx	lr
 8000580:	40026000 	.word	0x40026000
 8000584:	20000040 	.word	0x20000040

08000588 <DMA1_Stream5_IRQHandler>:

void DMA1_Stream5_IRQHandler(void)
{
 8000588:	b480      	push	{r7}
 800058a:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF5)
 800058c:	4b29      	ldr	r3, [pc, #164]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 800058e:	685b      	ldr	r3, [r3, #4]
 8000590:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000594:	2b00      	cmp	r3, #0
 8000596:	d009      	beq.n	80005ac <DMA1_Stream5_IRQHandler+0x24>
	{
		DMA1_Stream5_Flag.Fifo_Error_Flag = true;
 8000598:	4b27      	ldr	r3, [pc, #156]	@ (8000638 <DMA1_Stream5_IRQHandler+0xb0>)
 800059a:	2201      	movs	r2, #1
 800059c:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF5;
 800059e:	4b25      	ldr	r3, [pc, #148]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	4a24      	ldr	r2, [pc, #144]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005a8:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF5)
	{
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 80005aa:	e03e      	b.n	800062a <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF5)
 80005ac:	4b21      	ldr	r3, [pc, #132]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005ae:	685b      	ldr	r3, [r3, #4]
 80005b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d009      	beq.n	80005cc <DMA1_Stream5_IRQHandler+0x44>
		DMA1_Stream5_Flag.Direct_Mode_Error_Flag = true;
 80005b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000638 <DMA1_Stream5_IRQHandler+0xb0>)
 80005ba:	2201      	movs	r2, #1
 80005bc:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 80005be:	4b1d      	ldr	r3, [pc, #116]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005c0:	68db      	ldr	r3, [r3, #12]
 80005c2:	4a1c      	ldr	r2, [pc, #112]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80005c8:	60d3      	str	r3, [r2, #12]
}
 80005ca:	e02e      	b.n	800062a <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF5)
 80005cc:	4b19      	ldr	r3, [pc, #100]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005ce:	685b      	ldr	r3, [r3, #4]
 80005d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d009      	beq.n	80005ec <DMA1_Stream5_IRQHandler+0x64>
		DMA1_Stream5_Flag.Transfer_Error_Flag = true;
 80005d8:	4b17      	ldr	r3, [pc, #92]	@ (8000638 <DMA1_Stream5_IRQHandler+0xb0>)
 80005da:	2201      	movs	r2, #1
 80005dc:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF5;
 80005de:	4b15      	ldr	r3, [pc, #84]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005e4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80005e8:	60d3      	str	r3, [r2, #12]
}
 80005ea:	e01e      	b.n	800062a <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF5)
 80005ec:	4b11      	ldr	r3, [pc, #68]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d009      	beq.n	800060c <DMA1_Stream5_IRQHandler+0x84>
		DMA1_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 80005f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000638 <DMA1_Stream5_IRQHandler+0xb0>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF5;
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 8000600:	68db      	ldr	r3, [r3, #12]
 8000602:	4a0c      	ldr	r2, [pc, #48]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 8000604:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000608:	60d3      	str	r3, [r2, #12]
}
 800060a:	e00e      	b.n	800062a <DMA1_Stream5_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF5)
 800060c:	4b09      	ldr	r3, [pc, #36]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 800060e:	685b      	ldr	r3, [r3, #4]
 8000610:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000614:	2b00      	cmp	r3, #0
 8000616:	d008      	beq.n	800062a <DMA1_Stream5_IRQHandler+0xa2>
		DMA1_Stream5_Flag.Transfer_Complete_Flag = true;
 8000618:	4b07      	ldr	r3, [pc, #28]	@ (8000638 <DMA1_Stream5_IRQHandler+0xb0>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF5;
 800061e:	4b05      	ldr	r3, [pc, #20]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 8000620:	68db      	ldr	r3, [r3, #12]
 8000622:	4a04      	ldr	r2, [pc, #16]	@ (8000634 <DMA1_Stream5_IRQHandler+0xac>)
 8000624:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000628:	60d3      	str	r3, [r2, #12]
}
 800062a:	bf00      	nop
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr
 8000634:	40026000 	.word	0x40026000
 8000638:	20000048 	.word	0x20000048

0800063c <DMA1_Stream6_IRQHandler>:

void DMA1_Stream6_IRQHandler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF6)
 8000640:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000648:	2b00      	cmp	r3, #0
 800064a:	d009      	beq.n	8000660 <DMA1_Stream6_IRQHandler+0x24>
	{
		DMA1_Stream6_Flag.Fifo_Error_Flag = true;
 800064c:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <DMA1_Stream6_IRQHandler+0xb0>)
 800064e:	2201      	movs	r2, #1
 8000650:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000652:	4b25      	ldr	r3, [pc, #148]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000654:	68db      	ldr	r3, [r3, #12]
 8000656:	4a24      	ldr	r2, [pc, #144]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800065c:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF6)
	{
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 800065e:	e03e      	b.n	80006de <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF6)
 8000660:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000662:	685b      	ldr	r3, [r3, #4]
 8000664:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000668:	2b00      	cmp	r3, #0
 800066a:	d009      	beq.n	8000680 <DMA1_Stream6_IRQHandler+0x44>
		DMA1_Stream6_Flag.Direct_Mode_Error_Flag = true;
 800066c:	4b1f      	ldr	r3, [pc, #124]	@ (80006ec <DMA1_Stream6_IRQHandler+0xb0>)
 800066e:	2201      	movs	r2, #1
 8000670:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000672:	4b1d      	ldr	r3, [pc, #116]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000674:	68db      	ldr	r3, [r3, #12]
 8000676:	4a1c      	ldr	r2, [pc, #112]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000678:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800067c:	60d3      	str	r3, [r2, #12]
}
 800067e:	e02e      	b.n	80006de <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF6)
 8000680:	4b19      	ldr	r3, [pc, #100]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000688:	2b00      	cmp	r3, #0
 800068a:	d009      	beq.n	80006a0 <DMA1_Stream6_IRQHandler+0x64>
		DMA1_Stream6_Flag.Transfer_Error_Flag = true;
 800068c:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <DMA1_Stream6_IRQHandler+0xb0>)
 800068e:	2201      	movs	r2, #1
 8000690:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000692:	4b15      	ldr	r3, [pc, #84]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000694:	68db      	ldr	r3, [r3, #12]
 8000696:	4a14      	ldr	r2, [pc, #80]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 8000698:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800069c:	60d3      	str	r3, [r2, #12]
}
 800069e:	e01e      	b.n	80006de <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF6)
 80006a0:	4b11      	ldr	r3, [pc, #68]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d009      	beq.n	80006c0 <DMA1_Stream6_IRQHandler+0x84>
		DMA1_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 80006ac:	4b0f      	ldr	r3, [pc, #60]	@ (80006ec <DMA1_Stream6_IRQHandler+0xb0>)
 80006ae:	2201      	movs	r2, #1
 80006b0:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF6;
 80006b2:	4b0d      	ldr	r3, [pc, #52]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 80006b4:	68db      	ldr	r3, [r3, #12]
 80006b6:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 80006b8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006bc:	60d3      	str	r3, [r2, #12]
}
 80006be:	e00e      	b.n	80006de <DMA1_Stream6_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF6)
 80006c0:	4b09      	ldr	r3, [pc, #36]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 80006c2:	685b      	ldr	r3, [r3, #4]
 80006c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d008      	beq.n	80006de <DMA1_Stream6_IRQHandler+0xa2>
		DMA1_Stream6_Flag.Transfer_Complete_Flag = true;
 80006cc:	4b07      	ldr	r3, [pc, #28]	@ (80006ec <DMA1_Stream6_IRQHandler+0xb0>)
 80006ce:	2201      	movs	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF6;
 80006d2:	4b05      	ldr	r3, [pc, #20]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 80006d4:	68db      	ldr	r3, [r3, #12]
 80006d6:	4a04      	ldr	r2, [pc, #16]	@ (80006e8 <DMA1_Stream6_IRQHandler+0xac>)
 80006d8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80006dc:	60d3      	str	r3, [r2, #12]
}
 80006de:	bf00      	nop
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40026000 	.word	0x40026000
 80006ec:	20000050 	.word	0x20000050

080006f0 <DMA1_Stream7_IRQHandler>:

void DMA1_Stream7_IRQHandler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	if(DMA1 -> HISR & DMA_HISR_FEIF7)
 80006f4:	4b29      	ldr	r3, [pc, #164]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d009      	beq.n	8000714 <DMA1_Stream7_IRQHandler+0x24>
	{
		DMA1_Stream7_Flag.Fifo_Error_Flag = true;
 8000700:	4b27      	ldr	r3, [pc, #156]	@ (80007a0 <DMA1_Stream7_IRQHandler+0xb0>)
 8000702:	2201      	movs	r2, #1
 8000704:	711a      	strb	r2, [r3, #4]
		DMA1 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000706:	4b25      	ldr	r3, [pc, #148]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000708:	68db      	ldr	r3, [r3, #12]
 800070a:	4a24      	ldr	r2, [pc, #144]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 800070c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000710:	60d3      	str	r3, [r2, #12]
	else if(DMA1 -> HISR & DMA_HISR_TCIF7)
	{
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 8000712:	e03e      	b.n	8000792 <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_DMEIF7)
 8000714:	4b21      	ldr	r3, [pc, #132]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800071c:	2b00      	cmp	r3, #0
 800071e:	d009      	beq.n	8000734 <DMA1_Stream7_IRQHandler+0x44>
		DMA1_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000720:	4b1f      	ldr	r3, [pc, #124]	@ (80007a0 <DMA1_Stream7_IRQHandler+0xb0>)
 8000722:	2201      	movs	r2, #1
 8000724:	70da      	strb	r2, [r3, #3]
		DMA1 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000726:	4b1d      	ldr	r3, [pc, #116]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	4a1c      	ldr	r2, [pc, #112]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 800072c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000730:	60d3      	str	r3, [r2, #12]
}
 8000732:	e02e      	b.n	8000792 <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TEIF7)
 8000734:	4b19      	ldr	r3, [pc, #100]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800073c:	2b00      	cmp	r3, #0
 800073e:	d009      	beq.n	8000754 <DMA1_Stream7_IRQHandler+0x64>
		DMA1_Stream7_Flag.Transfer_Error_Flag = true;
 8000740:	4b17      	ldr	r3, [pc, #92]	@ (80007a0 <DMA1_Stream7_IRQHandler+0xb0>)
 8000742:	2201      	movs	r2, #1
 8000744:	709a      	strb	r2, [r3, #2]
		DMA1 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000746:	4b15      	ldr	r3, [pc, #84]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000748:	68db      	ldr	r3, [r3, #12]
 800074a:	4a14      	ldr	r2, [pc, #80]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 800074c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000750:	60d3      	str	r3, [r2, #12]
}
 8000752:	e01e      	b.n	8000792 <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_HTIF7)
 8000754:	4b11      	ldr	r3, [pc, #68]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000756:	685b      	ldr	r3, [r3, #4]
 8000758:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800075c:	2b00      	cmp	r3, #0
 800075e:	d009      	beq.n	8000774 <DMA1_Stream7_IRQHandler+0x84>
		DMA1_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000760:	4b0f      	ldr	r3, [pc, #60]	@ (80007a0 <DMA1_Stream7_IRQHandler+0xb0>)
 8000762:	2201      	movs	r2, #1
 8000764:	705a      	strb	r2, [r3, #1]
		DMA1 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	4a0c      	ldr	r2, [pc, #48]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 800076c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000770:	60d3      	str	r3, [r2, #12]
}
 8000772:	e00e      	b.n	8000792 <DMA1_Stream7_IRQHandler+0xa2>
	else if(DMA1 -> HISR & DMA_HISR_TCIF7)
 8000774:	4b09      	ldr	r3, [pc, #36]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000776:	685b      	ldr	r3, [r3, #4]
 8000778:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800077c:	2b00      	cmp	r3, #0
 800077e:	d008      	beq.n	8000792 <DMA1_Stream7_IRQHandler+0xa2>
		DMA1_Stream7_Flag.Transfer_Complete_Flag = true;
 8000780:	4b07      	ldr	r3, [pc, #28]	@ (80007a0 <DMA1_Stream7_IRQHandler+0xb0>)
 8000782:	2201      	movs	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
		DMA1 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000786:	4b05      	ldr	r3, [pc, #20]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 8000788:	68db      	ldr	r3, [r3, #12]
 800078a:	4a04      	ldr	r2, [pc, #16]	@ (800079c <DMA1_Stream7_IRQHandler+0xac>)
 800078c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000790:	60d3      	str	r3, [r2, #12]
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr
 800079c:	40026000 	.word	0x40026000
 80007a0:	20000058 	.word	0x20000058

080007a4 <DMA2_Stream0_IRQHandler>:


void DMA2_Stream0_IRQHandler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF0)
 80007a8:	4b29      	ldr	r3, [pc, #164]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f003 0301 	and.w	r3, r3, #1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d009      	beq.n	80007c8 <DMA2_Stream0_IRQHandler+0x24>
	{
		DMA2_Stream0_Flag.Fifo_Error_Flag = true;
 80007b4:	4b27      	ldr	r3, [pc, #156]	@ (8000854 <DMA2_Stream0_IRQHandler+0xb0>)
 80007b6:	2201      	movs	r2, #1
 80007b8:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF0;
 80007ba:	4b25      	ldr	r3, [pc, #148]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007bc:	689b      	ldr	r3, [r3, #8]
 80007be:	4a24      	ldr	r2, [pc, #144]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF0)
	{
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
	}
}
 80007c6:	e03e      	b.n	8000846 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF0)
 80007c8:	4b21      	ldr	r3, [pc, #132]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f003 0304 	and.w	r3, r3, #4
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d009      	beq.n	80007e8 <DMA2_Stream0_IRQHandler+0x44>
		DMA2_Stream0_Flag.Direct_Mode_Error_Flag = true;
 80007d4:	4b1f      	ldr	r3, [pc, #124]	@ (8000854 <DMA2_Stream0_IRQHandler+0xb0>)
 80007d6:	2201      	movs	r2, #1
 80007d8:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF0;
 80007da:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007dc:	689b      	ldr	r3, [r3, #8]
 80007de:	4a1c      	ldr	r2, [pc, #112]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6093      	str	r3, [r2, #8]
}
 80007e6:	e02e      	b.n	8000846 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF0)
 80007e8:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 0308 	and.w	r3, r3, #8
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d009      	beq.n	8000808 <DMA2_Stream0_IRQHandler+0x64>
		DMA2_Stream0_Flag.Transfer_Error_Flag = true;
 80007f4:	4b17      	ldr	r3, [pc, #92]	@ (8000854 <DMA2_Stream0_IRQHandler+0xb0>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF0;
 80007fa:	4b15      	ldr	r3, [pc, #84]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 80007fc:	689b      	ldr	r3, [r3, #8]
 80007fe:	4a14      	ldr	r2, [pc, #80]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 8000800:	f043 0308 	orr.w	r3, r3, #8
 8000804:	6093      	str	r3, [r2, #8]
}
 8000806:	e01e      	b.n	8000846 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF0)
 8000808:	4b11      	ldr	r3, [pc, #68]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f003 0310 	and.w	r3, r3, #16
 8000810:	2b00      	cmp	r3, #0
 8000812:	d009      	beq.n	8000828 <DMA2_Stream0_IRQHandler+0x84>
		DMA2_Stream0_Flag.Half_Transfer_Complete_Flag = true;
 8000814:	4b0f      	ldr	r3, [pc, #60]	@ (8000854 <DMA2_Stream0_IRQHandler+0xb0>)
 8000816:	2201      	movs	r2, #1
 8000818:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF0;
 800081a:	4b0d      	ldr	r3, [pc, #52]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	4a0c      	ldr	r2, [pc, #48]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 8000820:	f043 0310 	orr.w	r3, r3, #16
 8000824:	6093      	str	r3, [r2, #8]
}
 8000826:	e00e      	b.n	8000846 <DMA2_Stream0_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF0)
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f003 0320 	and.w	r3, r3, #32
 8000830:	2b00      	cmp	r3, #0
 8000832:	d008      	beq.n	8000846 <DMA2_Stream0_IRQHandler+0xa2>
		DMA2_Stream0_Flag.Transfer_Complete_Flag = true;
 8000834:	4b07      	ldr	r3, [pc, #28]	@ (8000854 <DMA2_Stream0_IRQHandler+0xb0>)
 8000836:	2201      	movs	r2, #1
 8000838:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 800083c:	689b      	ldr	r3, [r3, #8]
 800083e:	4a04      	ldr	r2, [pc, #16]	@ (8000850 <DMA2_Stream0_IRQHandler+0xac>)
 8000840:	f043 0320 	orr.w	r3, r3, #32
 8000844:	6093      	str	r3, [r2, #8]
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	40026400 	.word	0x40026400
 8000854:	20000060 	.word	0x20000060

08000858 <DMA2_Stream1_IRQHandler>:

void DMA2_Stream1_IRQHandler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF1)
 800085c:	4b29      	ldr	r3, [pc, #164]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000864:	2b00      	cmp	r3, #0
 8000866:	d009      	beq.n	800087c <DMA2_Stream1_IRQHandler+0x24>
	{
		DMA2_Stream1_Flag.Fifo_Error_Flag = true;
 8000868:	4b27      	ldr	r3, [pc, #156]	@ (8000908 <DMA2_Stream1_IRQHandler+0xb0>)
 800086a:	2201      	movs	r2, #1
 800086c:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF1;
 800086e:	4b25      	ldr	r3, [pc, #148]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	4a24      	ldr	r2, [pc, #144]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000878:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF1)
	{
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
	}
}
 800087a:	e03e      	b.n	80008fa <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF1)
 800087c:	4b21      	ldr	r3, [pc, #132]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000884:	2b00      	cmp	r3, #0
 8000886:	d009      	beq.n	800089c <DMA2_Stream1_IRQHandler+0x44>
		DMA2_Stream1_Flag.Direct_Mode_Error_Flag = true;
 8000888:	4b1f      	ldr	r3, [pc, #124]	@ (8000908 <DMA2_Stream1_IRQHandler+0xb0>)
 800088a:	2201      	movs	r2, #1
 800088c:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF1;
 800088e:	4b1d      	ldr	r3, [pc, #116]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 8000890:	689b      	ldr	r3, [r3, #8]
 8000892:	4a1c      	ldr	r2, [pc, #112]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 8000894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000898:	6093      	str	r3, [r2, #8]
}
 800089a:	e02e      	b.n	80008fa <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF1)
 800089c:	4b19      	ldr	r3, [pc, #100]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d009      	beq.n	80008bc <DMA2_Stream1_IRQHandler+0x64>
		DMA2_Stream1_Flag.Transfer_Error_Flag = true;
 80008a8:	4b17      	ldr	r3, [pc, #92]	@ (8000908 <DMA2_Stream1_IRQHandler+0xb0>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF1;
 80008ae:	4b15      	ldr	r3, [pc, #84]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008b0:	689b      	ldr	r3, [r3, #8]
 80008b2:	4a14      	ldr	r2, [pc, #80]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008b4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008b8:	6093      	str	r3, [r2, #8]
}
 80008ba:	e01e      	b.n	80008fa <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF1)
 80008bc:	4b11      	ldr	r3, [pc, #68]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d009      	beq.n	80008dc <DMA2_Stream1_IRQHandler+0x84>
		DMA2_Stream1_Flag.Half_Transfer_Complete_Flag = true;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	@ (8000908 <DMA2_Stream1_IRQHandler+0xb0>)
 80008ca:	2201      	movs	r2, #1
 80008cc:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF1;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008d8:	6093      	str	r3, [r2, #8]
}
 80008da:	e00e      	b.n	80008fa <DMA2_Stream1_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF1)
 80008dc:	4b09      	ldr	r3, [pc, #36]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d008      	beq.n	80008fa <DMA2_Stream1_IRQHandler+0xa2>
		DMA2_Stream1_Flag.Transfer_Complete_Flag = true;
 80008e8:	4b07      	ldr	r3, [pc, #28]	@ (8000908 <DMA2_Stream1_IRQHandler+0xb0>)
 80008ea:	2201      	movs	r2, #1
 80008ec:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF1;
 80008ee:	4b05      	ldr	r3, [pc, #20]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008f0:	689b      	ldr	r3, [r3, #8]
 80008f2:	4a04      	ldr	r2, [pc, #16]	@ (8000904 <DMA2_Stream1_IRQHandler+0xac>)
 80008f4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80008f8:	6093      	str	r3, [r2, #8]
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	40026400 	.word	0x40026400
 8000908:	20000068 	.word	0x20000068

0800090c <DMA2_Stream2_IRQHandler>:

void DMA2_Stream2_IRQHandler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF2)
 8000910:	4b29      	ldr	r3, [pc, #164]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000918:	2b00      	cmp	r3, #0
 800091a:	d009      	beq.n	8000930 <DMA2_Stream2_IRQHandler+0x24>
	{
		DMA2_Stream2_Flag.Fifo_Error_Flag = true;
 800091c:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <DMA2_Stream2_IRQHandler+0xb0>)
 800091e:	2201      	movs	r2, #1
 8000920:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF2;
 8000922:	4b25      	ldr	r3, [pc, #148]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000924:	689b      	ldr	r3, [r3, #8]
 8000926:	4a24      	ldr	r2, [pc, #144]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800092c:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF2)
	{
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
	}
}
 800092e:	e03e      	b.n	80009ae <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF2)
 8000930:	4b21      	ldr	r3, [pc, #132]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000938:	2b00      	cmp	r3, #0
 800093a:	d009      	beq.n	8000950 <DMA2_Stream2_IRQHandler+0x44>
		DMA2_Stream2_Flag.Direct_Mode_Error_Flag = true;
 800093c:	4b1f      	ldr	r3, [pc, #124]	@ (80009bc <DMA2_Stream2_IRQHandler+0xb0>)
 800093e:	2201      	movs	r2, #1
 8000940:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF2;
 8000942:	4b1d      	ldr	r3, [pc, #116]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000944:	689b      	ldr	r3, [r3, #8]
 8000946:	4a1c      	ldr	r2, [pc, #112]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800094c:	6093      	str	r3, [r2, #8]
}
 800094e:	e02e      	b.n	80009ae <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF2)
 8000950:	4b19      	ldr	r3, [pc, #100]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000958:	2b00      	cmp	r3, #0
 800095a:	d009      	beq.n	8000970 <DMA2_Stream2_IRQHandler+0x64>
		DMA2_Stream2_Flag.Transfer_Error_Flag = true;
 800095c:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <DMA2_Stream2_IRQHandler+0xb0>)
 800095e:	2201      	movs	r2, #1
 8000960:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF2;
 8000962:	4b15      	ldr	r3, [pc, #84]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	4a14      	ldr	r2, [pc, #80]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000968:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800096c:	6093      	str	r3, [r2, #8]
}
 800096e:	e01e      	b.n	80009ae <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF2)
 8000970:	4b11      	ldr	r3, [pc, #68]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000978:	2b00      	cmp	r3, #0
 800097a:	d009      	beq.n	8000990 <DMA2_Stream2_IRQHandler+0x84>
		DMA2_Stream2_Flag.Half_Transfer_Complete_Flag = true;
 800097c:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <DMA2_Stream2_IRQHandler+0xb0>)
 800097e:	2201      	movs	r2, #1
 8000980:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF2;
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	4a0c      	ldr	r2, [pc, #48]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000988:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800098c:	6093      	str	r3, [r2, #8]
}
 800098e:	e00e      	b.n	80009ae <DMA2_Stream2_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF2)
 8000990:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000998:	2b00      	cmp	r3, #0
 800099a:	d008      	beq.n	80009ae <DMA2_Stream2_IRQHandler+0xa2>
		DMA2_Stream2_Flag.Transfer_Complete_Flag = true;
 800099c:	4b07      	ldr	r3, [pc, #28]	@ (80009bc <DMA2_Stream2_IRQHandler+0xb0>)
 800099e:	2201      	movs	r2, #1
 80009a0:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF2;
 80009a2:	4b05      	ldr	r3, [pc, #20]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <DMA2_Stream2_IRQHandler+0xac>)
 80009a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80009ac:	6093      	str	r3, [r2, #8]
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr
 80009b8:	40026400 	.word	0x40026400
 80009bc:	20000070 	.word	0x20000070

080009c0 <DMA2_Stream3_IRQHandler>:

void DMA2_Stream3_IRQHandler(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
	if(DMA2 -> LISR & DMA_LISR_FEIF3)
 80009c4:	4b29      	ldr	r3, [pc, #164]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d009      	beq.n	80009e4 <DMA2_Stream3_IRQHandler+0x24>
	{
		DMA2_Stream3_Flag.Fifo_Error_Flag = true;
 80009d0:	4b27      	ldr	r3, [pc, #156]	@ (8000a70 <DMA2_Stream3_IRQHandler+0xb0>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	711a      	strb	r2, [r3, #4]
		DMA2 -> LIFCR |= DMA_LIFCR_CFEIF3;
 80009d6:	4b25      	ldr	r3, [pc, #148]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 80009d8:	689b      	ldr	r3, [r3, #8]
 80009da:	4a24      	ldr	r2, [pc, #144]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 80009dc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80009e0:	6093      	str	r3, [r2, #8]
	else if(DMA2 -> LISR & DMA_LISR_TCIF3)
	{
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
	}
}
 80009e2:	e03e      	b.n	8000a62 <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_DMEIF3)
 80009e4:	4b21      	ldr	r3, [pc, #132]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d009      	beq.n	8000a04 <DMA2_Stream3_IRQHandler+0x44>
		DMA2_Stream3_Flag.Direct_Mode_Error_Flag = true;
 80009f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a70 <DMA2_Stream3_IRQHandler+0xb0>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	70da      	strb	r2, [r3, #3]
		DMA2 -> LIFCR |= DMA_LIFCR_CDMEIF3;
 80009f6:	4b1d      	ldr	r3, [pc, #116]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 80009f8:	689b      	ldr	r3, [r3, #8]
 80009fa:	4a1c      	ldr	r2, [pc, #112]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 80009fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000a00:	6093      	str	r3, [r2, #8]
}
 8000a02:	e02e      	b.n	8000a62 <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TEIF3)
 8000a04:	4b19      	ldr	r3, [pc, #100]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d009      	beq.n	8000a24 <DMA2_Stream3_IRQHandler+0x64>
		DMA2_Stream3_Flag.Transfer_Error_Flag = true;
 8000a10:	4b17      	ldr	r3, [pc, #92]	@ (8000a70 <DMA2_Stream3_IRQHandler+0xb0>)
 8000a12:	2201      	movs	r2, #1
 8000a14:	709a      	strb	r2, [r3, #2]
		DMA2 -> LIFCR |= DMA_LIFCR_CTEIF3;
 8000a16:	4b15      	ldr	r3, [pc, #84]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	4a14      	ldr	r2, [pc, #80]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a1c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a20:	6093      	str	r3, [r2, #8]
}
 8000a22:	e01e      	b.n	8000a62 <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_HTIF3)
 8000a24:	4b11      	ldr	r3, [pc, #68]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d009      	beq.n	8000a44 <DMA2_Stream3_IRQHandler+0x84>
		DMA2_Stream3_Flag.Half_Transfer_Complete_Flag = true;
 8000a30:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <DMA2_Stream3_IRQHandler+0xb0>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	705a      	strb	r2, [r3, #1]
		DMA2 -> LIFCR |= DMA_LIFCR_CHTIF3;
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a38:	689b      	ldr	r3, [r3, #8]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a3c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000a40:	6093      	str	r3, [r2, #8]
}
 8000a42:	e00e      	b.n	8000a62 <DMA2_Stream3_IRQHandler+0xa2>
	else if(DMA2 -> LISR & DMA_LISR_TCIF3)
 8000a44:	4b09      	ldr	r3, [pc, #36]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d008      	beq.n	8000a62 <DMA2_Stream3_IRQHandler+0xa2>
		DMA2_Stream3_Flag.Transfer_Complete_Flag = true;
 8000a50:	4b07      	ldr	r3, [pc, #28]	@ (8000a70 <DMA2_Stream3_IRQHandler+0xb0>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	701a      	strb	r2, [r3, #0]
		DMA2 -> LIFCR |= DMA_LIFCR_CTCIF3;
 8000a56:	4b05      	ldr	r3, [pc, #20]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a58:	689b      	ldr	r3, [r3, #8]
 8000a5a:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <DMA2_Stream3_IRQHandler+0xac>)
 8000a5c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000a60:	6093      	str	r3, [r2, #8]
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr
 8000a6c:	40026400 	.word	0x40026400
 8000a70:	20000078 	.word	0x20000078

08000a74 <DMA2_Stream4_IRQHandler>:

void DMA2_Stream4_IRQHandler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF4)
 8000a78:	4b29      	ldr	r3, [pc, #164]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d009      	beq.n	8000a98 <DMA2_Stream4_IRQHandler+0x24>
	{
		DMA2_Stream4_Flag.Fifo_Error_Flag = true;
 8000a84:	4b27      	ldr	r3, [pc, #156]	@ (8000b24 <DMA2_Stream4_IRQHandler+0xb0>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF4;
 8000a8a:	4b25      	ldr	r3, [pc, #148]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000a8c:	68db      	ldr	r3, [r3, #12]
 8000a8e:	4a24      	ldr	r2, [pc, #144]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000a90:	f043 0301 	orr.w	r3, r3, #1
 8000a94:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF4)
	{
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
	}
}
 8000a96:	e03e      	b.n	8000b16 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF4)
 8000a98:	4b21      	ldr	r3, [pc, #132]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000a9a:	685b      	ldr	r3, [r3, #4]
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d009      	beq.n	8000ab8 <DMA2_Stream4_IRQHandler+0x44>
		DMA2_Stream4_Flag.Direct_Mode_Error_Flag = true;
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <DMA2_Stream4_IRQHandler+0xb0>)
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF4;
 8000aaa:	4b1d      	ldr	r3, [pc, #116]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000aac:	68db      	ldr	r3, [r3, #12]
 8000aae:	4a1c      	ldr	r2, [pc, #112]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000ab0:	f043 0304 	orr.w	r3, r3, #4
 8000ab4:	60d3      	str	r3, [r2, #12]
}
 8000ab6:	e02e      	b.n	8000b16 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF4)
 8000ab8:	4b19      	ldr	r3, [pc, #100]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	f003 0308 	and.w	r3, r3, #8
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d009      	beq.n	8000ad8 <DMA2_Stream4_IRQHandler+0x64>
		DMA2_Stream4_Flag.Transfer_Error_Flag = true;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <DMA2_Stream4_IRQHandler+0xb0>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF4;
 8000aca:	4b15      	ldr	r3, [pc, #84]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000acc:	68db      	ldr	r3, [r3, #12]
 8000ace:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000ad0:	f043 0308 	orr.w	r3, r3, #8
 8000ad4:	60d3      	str	r3, [r2, #12]
}
 8000ad6:	e01e      	b.n	8000b16 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF4)
 8000ad8:	4b11      	ldr	r3, [pc, #68]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000ada:	685b      	ldr	r3, [r3, #4]
 8000adc:	f003 0310 	and.w	r3, r3, #16
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d009      	beq.n	8000af8 <DMA2_Stream4_IRQHandler+0x84>
		DMA2_Stream4_Flag.Half_Transfer_Complete_Flag = true;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <DMA2_Stream4_IRQHandler+0xb0>)
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF4;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000aec:	68db      	ldr	r3, [r3, #12]
 8000aee:	4a0c      	ldr	r2, [pc, #48]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000af0:	f043 0310 	orr.w	r3, r3, #16
 8000af4:	60d3      	str	r3, [r2, #12]
}
 8000af6:	e00e      	b.n	8000b16 <DMA2_Stream4_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF4)
 8000af8:	4b09      	ldr	r3, [pc, #36]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	f003 0320 	and.w	r3, r3, #32
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d008      	beq.n	8000b16 <DMA2_Stream4_IRQHandler+0xa2>
		DMA2_Stream4_Flag.Transfer_Complete_Flag = true;
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <DMA2_Stream4_IRQHandler+0xb0>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF4;
 8000b0a:	4b05      	ldr	r3, [pc, #20]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000b0c:	68db      	ldr	r3, [r3, #12]
 8000b0e:	4a04      	ldr	r2, [pc, #16]	@ (8000b20 <DMA2_Stream4_IRQHandler+0xac>)
 8000b10:	f043 0320 	orr.w	r3, r3, #32
 8000b14:	60d3      	str	r3, [r2, #12]
}
 8000b16:	bf00      	nop
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1e:	4770      	bx	lr
 8000b20:	40026400 	.word	0x40026400
 8000b24:	20000080 	.word	0x20000080

08000b28 <DMA2_Stream5_IRQHandler>:

void DMA2_Stream5_IRQHandler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF5)
 8000b2c:	4b29      	ldr	r3, [pc, #164]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b2e:	685b      	ldr	r3, [r3, #4]
 8000b30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d009      	beq.n	8000b4c <DMA2_Stream5_IRQHandler+0x24>
	{
		DMA2_Stream5_Flag.Fifo_Error_Flag = true;
 8000b38:	4b27      	ldr	r3, [pc, #156]	@ (8000bd8 <DMA2_Stream5_IRQHandler+0xb0>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF5;
 8000b3e:	4b25      	ldr	r3, [pc, #148]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	4a24      	ldr	r2, [pc, #144]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b48:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF5)
	{
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
	}
}
 8000b4a:	e03e      	b.n	8000bca <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF5)
 8000b4c:	4b21      	ldr	r3, [pc, #132]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d009      	beq.n	8000b6c <DMA2_Stream5_IRQHandler+0x44>
		DMA2_Stream5_Flag.Direct_Mode_Error_Flag = true;
 8000b58:	4b1f      	ldr	r3, [pc, #124]	@ (8000bd8 <DMA2_Stream5_IRQHandler+0xb0>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF5;
 8000b5e:	4b1d      	ldr	r3, [pc, #116]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	4a1c      	ldr	r2, [pc, #112]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b68:	60d3      	str	r3, [r2, #12]
}
 8000b6a:	e02e      	b.n	8000bca <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF5)
 8000b6c:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b6e:	685b      	ldr	r3, [r3, #4]
 8000b70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d009      	beq.n	8000b8c <DMA2_Stream5_IRQHandler+0x64>
		DMA2_Stream5_Flag.Transfer_Error_Flag = true;
 8000b78:	4b17      	ldr	r3, [pc, #92]	@ (8000bd8 <DMA2_Stream5_IRQHandler+0xb0>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF5;
 8000b7e:	4b15      	ldr	r3, [pc, #84]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	4a14      	ldr	r2, [pc, #80]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b84:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b88:	60d3      	str	r3, [r2, #12]
}
 8000b8a:	e01e      	b.n	8000bca <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF5)
 8000b8c:	4b11      	ldr	r3, [pc, #68]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000b8e:	685b      	ldr	r3, [r3, #4]
 8000b90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d009      	beq.n	8000bac <DMA2_Stream5_IRQHandler+0x84>
		DMA2_Stream5_Flag.Half_Transfer_Complete_Flag = true;
 8000b98:	4b0f      	ldr	r3, [pc, #60]	@ (8000bd8 <DMA2_Stream5_IRQHandler+0xb0>)
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF5;
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000ba0:	68db      	ldr	r3, [r3, #12]
 8000ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000ba4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba8:	60d3      	str	r3, [r2, #12]
}
 8000baa:	e00e      	b.n	8000bca <DMA2_Stream5_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF5)
 8000bac:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d008      	beq.n	8000bca <DMA2_Stream5_IRQHandler+0xa2>
		DMA2_Stream5_Flag.Transfer_Complete_Flag = true;
 8000bb8:	4b07      	ldr	r3, [pc, #28]	@ (8000bd8 <DMA2_Stream5_IRQHandler+0xb0>)
 8000bba:	2201      	movs	r2, #1
 8000bbc:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF5;
 8000bbe:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000bc0:	68db      	ldr	r3, [r3, #12]
 8000bc2:	4a04      	ldr	r2, [pc, #16]	@ (8000bd4 <DMA2_Stream5_IRQHandler+0xac>)
 8000bc4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000bc8:	60d3      	str	r3, [r2, #12]
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40026400 	.word	0x40026400
 8000bd8:	20000088 	.word	0x20000088

08000bdc <DMA2_Stream6_IRQHandler>:

void DMA2_Stream6_IRQHandler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF6)
 8000be0:	4b29      	ldr	r3, [pc, #164]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d009      	beq.n	8000c00 <DMA2_Stream6_IRQHandler+0x24>
	{
		DMA2_Stream6_Flag.Fifo_Error_Flag = true;
 8000bec:	4b27      	ldr	r3, [pc, #156]	@ (8000c8c <DMA2_Stream6_IRQHandler+0xb0>)
 8000bee:	2201      	movs	r2, #1
 8000bf0:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF6;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000bf4:	68db      	ldr	r3, [r3, #12]
 8000bf6:	4a24      	ldr	r2, [pc, #144]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000bf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bfc:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF6)
	{
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
	}
}
 8000bfe:	e03e      	b.n	8000c7e <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF6)
 8000c00:	4b21      	ldr	r3, [pc, #132]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d009      	beq.n	8000c20 <DMA2_Stream6_IRQHandler+0x44>
		DMA2_Stream6_Flag.Direct_Mode_Error_Flag = true;
 8000c0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000c8c <DMA2_Stream6_IRQHandler+0xb0>)
 8000c0e:	2201      	movs	r2, #1
 8000c10:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF6;
 8000c12:	4b1d      	ldr	r3, [pc, #116]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c14:	68db      	ldr	r3, [r3, #12]
 8000c16:	4a1c      	ldr	r2, [pc, #112]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c18:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000c1c:	60d3      	str	r3, [r2, #12]
}
 8000c1e:	e02e      	b.n	8000c7e <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF6)
 8000c20:	4b19      	ldr	r3, [pc, #100]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c22:	685b      	ldr	r3, [r3, #4]
 8000c24:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d009      	beq.n	8000c40 <DMA2_Stream6_IRQHandler+0x64>
		DMA2_Stream6_Flag.Transfer_Error_Flag = true;
 8000c2c:	4b17      	ldr	r3, [pc, #92]	@ (8000c8c <DMA2_Stream6_IRQHandler+0xb0>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF6;
 8000c32:	4b15      	ldr	r3, [pc, #84]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c34:	68db      	ldr	r3, [r3, #12]
 8000c36:	4a14      	ldr	r2, [pc, #80]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c38:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000c3c:	60d3      	str	r3, [r2, #12]
}
 8000c3e:	e01e      	b.n	8000c7e <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF6)
 8000c40:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d009      	beq.n	8000c60 <DMA2_Stream6_IRQHandler+0x84>
		DMA2_Stream6_Flag.Half_Transfer_Complete_Flag = true;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <DMA2_Stream6_IRQHandler+0xb0>)
 8000c4e:	2201      	movs	r2, #1
 8000c50:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF6;
 8000c52:	4b0d      	ldr	r3, [pc, #52]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c54:	68db      	ldr	r3, [r3, #12]
 8000c56:	4a0c      	ldr	r2, [pc, #48]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c58:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000c5c:	60d3      	str	r3, [r2, #12]
}
 8000c5e:	e00e      	b.n	8000c7e <DMA2_Stream6_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF6)
 8000c60:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d008      	beq.n	8000c7e <DMA2_Stream6_IRQHandler+0xa2>
		DMA2_Stream6_Flag.Transfer_Complete_Flag = true;
 8000c6c:	4b07      	ldr	r3, [pc, #28]	@ (8000c8c <DMA2_Stream6_IRQHandler+0xb0>)
 8000c6e:	2201      	movs	r2, #1
 8000c70:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF6;
 8000c72:	4b05      	ldr	r3, [pc, #20]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	4a04      	ldr	r2, [pc, #16]	@ (8000c88 <DMA2_Stream6_IRQHandler+0xac>)
 8000c78:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c7c:	60d3      	str	r3, [r2, #12]
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	40026400 	.word	0x40026400
 8000c8c:	20000090 	.word	0x20000090

08000c90 <DMA2_Stream7_IRQHandler>:

void DMA2_Stream7_IRQHandler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	if(DMA2 -> HISR & DMA_HISR_FEIF7)
 8000c94:	4b29      	ldr	r3, [pc, #164]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d009      	beq.n	8000cb4 <DMA2_Stream7_IRQHandler+0x24>
	{
		DMA2_Stream7_Flag.Fifo_Error_Flag = true;
 8000ca0:	4b27      	ldr	r3, [pc, #156]	@ (8000d40 <DMA2_Stream7_IRQHandler+0xb0>)
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	711a      	strb	r2, [r3, #4]
		DMA2 -> HIFCR |= DMA_HIFCR_CFEIF7;
 8000ca6:	4b25      	ldr	r3, [pc, #148]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	4a24      	ldr	r2, [pc, #144]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000cac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000cb0:	60d3      	str	r3, [r2, #12]
	else if(DMA2 -> HISR & DMA_HISR_TCIF7)
	{
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
	}
}
 8000cb2:	e03e      	b.n	8000d32 <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_DMEIF7)
 8000cb4:	4b21      	ldr	r3, [pc, #132]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000cb6:	685b      	ldr	r3, [r3, #4]
 8000cb8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d009      	beq.n	8000cd4 <DMA2_Stream7_IRQHandler+0x44>
		DMA2_Stream7_Flag.Direct_Mode_Error_Flag = true;
 8000cc0:	4b1f      	ldr	r3, [pc, #124]	@ (8000d40 <DMA2_Stream7_IRQHandler+0xb0>)
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	70da      	strb	r2, [r3, #3]
		DMA2 -> HIFCR |= DMA_HIFCR_CDMEIF7;
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000cc8:	68db      	ldr	r3, [r3, #12]
 8000cca:	4a1c      	ldr	r2, [pc, #112]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000ccc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000cd0:	60d3      	str	r3, [r2, #12]
}
 8000cd2:	e02e      	b.n	8000d32 <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TEIF7)
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d009      	beq.n	8000cf4 <DMA2_Stream7_IRQHandler+0x64>
		DMA2_Stream7_Flag.Transfer_Error_Flag = true;
 8000ce0:	4b17      	ldr	r3, [pc, #92]	@ (8000d40 <DMA2_Stream7_IRQHandler+0xb0>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	709a      	strb	r2, [r3, #2]
		DMA2 -> HIFCR |= DMA_HIFCR_CTEIF7;
 8000ce6:	4b15      	ldr	r3, [pc, #84]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	4a14      	ldr	r2, [pc, #80]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000cec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf0:	60d3      	str	r3, [r2, #12]
}
 8000cf2:	e01e      	b.n	8000d32 <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_HTIF7)
 8000cf4:	4b11      	ldr	r3, [pc, #68]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d009      	beq.n	8000d14 <DMA2_Stream7_IRQHandler+0x84>
		DMA2_Stream7_Flag.Half_Transfer_Complete_Flag = true;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	@ (8000d40 <DMA2_Stream7_IRQHandler+0xb0>)
 8000d02:	2201      	movs	r2, #1
 8000d04:	705a      	strb	r2, [r3, #1]
		DMA2 -> HIFCR |= DMA_HIFCR_CHTIF7;
 8000d06:	4b0d      	ldr	r3, [pc, #52]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000d0c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000d10:	60d3      	str	r3, [r2, #12]
}
 8000d12:	e00e      	b.n	8000d32 <DMA2_Stream7_IRQHandler+0xa2>
	else if(DMA2 -> HISR & DMA_HISR_TCIF7)
 8000d14:	4b09      	ldr	r3, [pc, #36]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000d16:	685b      	ldr	r3, [r3, #4]
 8000d18:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d008      	beq.n	8000d32 <DMA2_Stream7_IRQHandler+0xa2>
		DMA2_Stream7_Flag.Transfer_Complete_Flag = true;
 8000d20:	4b07      	ldr	r3, [pc, #28]	@ (8000d40 <DMA2_Stream7_IRQHandler+0xb0>)
 8000d22:	2201      	movs	r2, #1
 8000d24:	701a      	strb	r2, [r3, #0]
		DMA2 -> HIFCR |= DMA_HIFCR_CTCIF7;
 8000d26:	4b05      	ldr	r3, [pc, #20]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <DMA2_Stream7_IRQHandler+0xac>)
 8000d2c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000d30:	60d3      	str	r3, [r2, #12]
}
 8000d32:	bf00      	nop
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	40026400 	.word	0x40026400
 8000d40:	20000098 	.word	0x20000098

08000d44 <DMA_Clock_Enable>:
	flag.Transfer_Error_Flag = false;
}


void DMA_Clock_Enable(DMA_Config *config)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
	if(config -> Request.Controller == DMA1) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA1EN;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a0c      	ldr	r2, [pc, #48]	@ (8000d84 <DMA_Clock_Enable+0x40>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d105      	bne.n	8000d62 <DMA_Clock_Enable+0x1e>
 8000d56:	4b0c      	ldr	r3, [pc, #48]	@ (8000d88 <DMA_Clock_Enable+0x44>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <DMA_Clock_Enable+0x44>)
 8000d5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
	if(config -> Request.Controller == DMA2) RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a09      	ldr	r2, [pc, #36]	@ (8000d8c <DMA_Clock_Enable+0x48>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d105      	bne.n	8000d78 <DMA_Clock_Enable+0x34>
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <DMA_Clock_Enable+0x44>)
 8000d6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d70:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <DMA_Clock_Enable+0x44>)
 8000d72:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000d76:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	40026000 	.word	0x40026000
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40026400 	.word	0x40026400

08000d90 <DMA_Init>:
	if(config -> Request.Controller == DMA1) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA1RST;
	if(config -> Request.Controller == DMA2) RCC -> AHB1RSTR |= RCC_AHB1RSTR_DMA2RST;
}

void DMA_Init(DMA_Config *config)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
	DMA_Clock_Enable(config);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ffd3 	bl	8000d44 <DMA_Clock_Enable>
	config -> Request.Stream -> CR |= config -> Request.channel << DMA_SxCR_CHSEL_Pos;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	6819      	ldr	r1, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	7a1b      	ldrb	r3, [r3, #8]
 8000da8:	065a      	lsls	r2, r3, #25
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	430a      	orrs	r2, r1
 8000db0:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> circular_mode;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	6819      	ldr	r1, [r3, #0]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	699a      	ldr	r2, [r3, #24]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> flow_control;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	6819      	ldr	r1, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	68da      	ldr	r2, [r3, #12]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	430a      	orrs	r2, r1
 8000dd4:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> priority_level;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	6819      	ldr	r1, [r3, #0]
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	695a      	ldr	r2, [r3, #20]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> memory_data_size;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685b      	ldr	r3, [r3, #4]
 8000dec:	6819      	ldr	r1, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	685b      	ldr	r3, [r3, #4]
 8000df6:	430a      	orrs	r2, r1
 8000df8:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	6819      	ldr	r1, [r3, #0]
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	685b      	ldr	r3, [r3, #4]
 8000e08:	430a      	orrs	r2, r1
 8000e0a:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> transfer_direction;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	6819      	ldr	r1, [r3, #0]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	691a      	ldr	r2, [r3, #16]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

	if( (config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Complete) ||
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	69db      	ldr	r3, [r3, #28]
 8000e22:	2210      	movs	r2, #16
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d014      	beq.n	8000e52 <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete) ||
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	69db      	ldr	r3, [r3, #28]
 8000e2c:	2208      	movs	r2, #8
	if( (config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Complete) ||
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d00f      	beq.n	8000e52 <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Error) ||
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	69db      	ldr	r3, [r3, #28]
 8000e36:	2204      	movs	r2, #4
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Half_Transfer_Complete) ||
 8000e38:	4293      	cmp	r3, r2
 8000e3a:	d00a      	beq.n	8000e52 <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Direct_Mode_Error) ||
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	69db      	ldr	r3, [r3, #28]
 8000e40:	2202      	movs	r2, #2
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Transfer_Error) ||
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d005      	beq.n	8000e52 <DMA_Init+0xc2>
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	69db      	ldr	r3, [r3, #28]
 8000e4a:	2280      	movs	r2, #128	@ 0x80
		(config->interrupts == DMA_Configuration.DMA_Interrupts.Direct_Mode_Error) ||
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	f040 80b0 	bne.w	8000fb2 <DMA_Init+0x222>
	  )
	{
		if(config->interrupts == DMA_Configuration.DMA_Interrupts.Fifo_Error)
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69db      	ldr	r3, [r3, #28]
 8000e56:	2280      	movs	r2, #128	@ 0x80
 8000e58:	4293      	cmp	r3, r2
 8000e5a:	d108      	bne.n	8000e6e <DMA_Init+0xde>
		{
			config -> Request.Stream -> FCR |= config -> interrupts;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	6959      	ldr	r1, [r3, #20]
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69da      	ldr	r2, [r3, #28]
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	430a      	orrs	r2, r1
 8000e6c:	615a      	str	r2, [r3, #20]
		}

		config -> Request.Stream -> CR |= config -> interrupts;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	6819      	ldr	r1, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69da      	ldr	r2, [r3, #28]
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	430a      	orrs	r2, r1
 8000e7e:	601a      	str	r2, [r3, #0]

		if(config->Request.Controller == DMA1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a57      	ldr	r2, [pc, #348]	@ (8000fe4 <DMA_Init+0x254>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d147      	bne.n	8000f1a <DMA_Init+0x18a>
		{
			if(config->Request.Stream == DMA1_Stream0) 	        NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	4a56      	ldr	r2, [pc, #344]	@ (8000fe8 <DMA_Init+0x258>)
 8000e90:	4293      	cmp	r3, r2
 8000e92:	d103      	bne.n	8000e9c <DMA_Init+0x10c>
 8000e94:	200b      	movs	r0, #11
 8000e96:	f7ff f997 	bl	80001c8 <__NVIC_EnableIRQ>
 8000e9a:	e08a      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream1) 	NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4a52      	ldr	r2, [pc, #328]	@ (8000fec <DMA_Init+0x25c>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d103      	bne.n	8000eae <DMA_Init+0x11e>
 8000ea6:	200c      	movs	r0, #12
 8000ea8:	f7ff f98e 	bl	80001c8 <__NVIC_EnableIRQ>
 8000eac:	e081      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream2) 	NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	4a4f      	ldr	r2, [pc, #316]	@ (8000ff0 <DMA_Init+0x260>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d103      	bne.n	8000ec0 <DMA_Init+0x130>
 8000eb8:	200d      	movs	r0, #13
 8000eba:	f7ff f985 	bl	80001c8 <__NVIC_EnableIRQ>
 8000ebe:	e078      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream3) 	NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8000ff4 <DMA_Init+0x264>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d103      	bne.n	8000ed2 <DMA_Init+0x142>
 8000eca:	200e      	movs	r0, #14
 8000ecc:	f7ff f97c 	bl	80001c8 <__NVIC_EnableIRQ>
 8000ed0:	e06f      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream4) 	NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	4a48      	ldr	r2, [pc, #288]	@ (8000ff8 <DMA_Init+0x268>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d103      	bne.n	8000ee4 <DMA_Init+0x154>
 8000edc:	200f      	movs	r0, #15
 8000ede:	f7ff f973 	bl	80001c8 <__NVIC_EnableIRQ>
 8000ee2:	e066      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream5) 	NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	4a44      	ldr	r2, [pc, #272]	@ (8000ffc <DMA_Init+0x26c>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d103      	bne.n	8000ef6 <DMA_Init+0x166>
 8000eee:	2010      	movs	r0, #16
 8000ef0:	f7ff f96a 	bl	80001c8 <__NVIC_EnableIRQ>
 8000ef4:	e05d      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream6) 	NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	4a41      	ldr	r2, [pc, #260]	@ (8001000 <DMA_Init+0x270>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d103      	bne.n	8000f08 <DMA_Init+0x178>
 8000f00:	2011      	movs	r0, #17
 8000f02:	f7ff f961 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f06:	e054      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA1_Stream7) 	NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	4a3d      	ldr	r2, [pc, #244]	@ (8001004 <DMA_Init+0x274>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d14f      	bne.n	8000fb2 <DMA_Init+0x222>
 8000f12:	202f      	movs	r0, #47	@ 0x2f
 8000f14:	f7ff f958 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f18:	e04b      	b.n	8000fb2 <DMA_Init+0x222>
		}
		else if(config->Request.Controller == DMA2)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a3a      	ldr	r2, [pc, #232]	@ (8001008 <DMA_Init+0x278>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d146      	bne.n	8000fb2 <DMA_Init+0x222>
		{
			if(config->Request.Stream == DMA2_Stream0) 	        NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	4a38      	ldr	r2, [pc, #224]	@ (800100c <DMA_Init+0x27c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d103      	bne.n	8000f36 <DMA_Init+0x1a6>
 8000f2e:	2038      	movs	r0, #56	@ 0x38
 8000f30:	f7ff f94a 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f34:	e03d      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream1) 	NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	4a35      	ldr	r2, [pc, #212]	@ (8001010 <DMA_Init+0x280>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d103      	bne.n	8000f48 <DMA_Init+0x1b8>
 8000f40:	2039      	movs	r0, #57	@ 0x39
 8000f42:	f7ff f941 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f46:	e034      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream2) 	NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	4a31      	ldr	r2, [pc, #196]	@ (8001014 <DMA_Init+0x284>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d103      	bne.n	8000f5a <DMA_Init+0x1ca>
 8000f52:	203a      	movs	r0, #58	@ 0x3a
 8000f54:	f7ff f938 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f58:	e02b      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream3) 	NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	4a2e      	ldr	r2, [pc, #184]	@ (8001018 <DMA_Init+0x288>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d103      	bne.n	8000f6c <DMA_Init+0x1dc>
 8000f64:	203b      	movs	r0, #59	@ 0x3b
 8000f66:	f7ff f92f 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f6a:	e022      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream4) 	NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	4a2a      	ldr	r2, [pc, #168]	@ (800101c <DMA_Init+0x28c>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d103      	bne.n	8000f7e <DMA_Init+0x1ee>
 8000f76:	203c      	movs	r0, #60	@ 0x3c
 8000f78:	f7ff f926 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f7c:	e019      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream5) 	NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	4a27      	ldr	r2, [pc, #156]	@ (8001020 <DMA_Init+0x290>)
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d103      	bne.n	8000f90 <DMA_Init+0x200>
 8000f88:	2044      	movs	r0, #68	@ 0x44
 8000f8a:	f7ff f91d 	bl	80001c8 <__NVIC_EnableIRQ>
 8000f8e:	e010      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream6) 	NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	4a23      	ldr	r2, [pc, #140]	@ (8001024 <DMA_Init+0x294>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d103      	bne.n	8000fa2 <DMA_Init+0x212>
 8000f9a:	2045      	movs	r0, #69	@ 0x45
 8000f9c:	f7ff f914 	bl	80001c8 <__NVIC_EnableIRQ>
 8000fa0:	e007      	b.n	8000fb2 <DMA_Init+0x222>
			else if(config->Request.Stream == DMA2_Stream7) 	NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	4a20      	ldr	r2, [pc, #128]	@ (8001028 <DMA_Init+0x298>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d102      	bne.n	8000fb2 <DMA_Init+0x222>
 8000fac:	2046      	movs	r0, #70	@ 0x46
 8000fae:	f7ff f90b 	bl	80001c8 <__NVIC_EnableIRQ>
		}
	}

	config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	8c1b      	ldrh	r3, [r3, #32]
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	430a      	orrs	r2, r1
 8000fc4:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> peripheral_pointer_increment;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	601a      	str	r2, [r3, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40026000 	.word	0x40026000
 8000fe8:	40026010 	.word	0x40026010
 8000fec:	40026028 	.word	0x40026028
 8000ff0:	40026040 	.word	0x40026040
 8000ff4:	40026058 	.word	0x40026058
 8000ff8:	40026070 	.word	0x40026070
 8000ffc:	40026088 	.word	0x40026088
 8001000:	400260a0 	.word	0x400260a0
 8001004:	400260b8 	.word	0x400260b8
 8001008:	40026400 	.word	0x40026400
 800100c:	40026410 	.word	0x40026410
 8001010:	40026428 	.word	0x40026428
 8001014:	40026440 	.word	0x40026440
 8001018:	40026458 	.word	0x40026458
 800101c:	40026470 	.word	0x40026470
 8001020:	40026488 	.word	0x40026488
 8001024:	400264a0 	.word	0x400264a0
 8001028:	400264b8 	.word	0x400264b8

0800102c <DMA_Set_Target>:

void DMA_Set_Target(DMA_Config *config)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
	config -> Request.Stream -> CR &= ~(DMA_SxCR_MSIZE | DMA_SxCR_PSIZE | DMA_SxCR_MINC);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	f422 42f8 	bic.w	r2, r2, #31744	@ 0x7c00
 8001042:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> peripheral_data_size;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	6819      	ldr	r1, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	430a      	orrs	r2, r1
 8001054:	601a      	str	r2, [r3, #0]
	config -> Request.Stream -> CR |= config -> memory_data_size;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	6819      	ldr	r1, [r3, #0]
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	430a      	orrs	r2, r1
 8001066:	601a      	str	r2, [r3, #0]
	config -> Request.Stream ->NDTR = config -> buffer_length;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	605a      	str	r2, [r3, #4]
	config -> Request.Stream -> CR |= config -> memory_pointer_increment;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	8c1b      	ldrh	r3, [r3, #32]
 800107c:	4619      	mov	r1, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	430a      	orrs	r2, r1
 8001084:	601a      	str	r2, [r3, #0]
	config -> Request.Stream ->M0AR = (uint32_t)config->memory_address;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	687a      	ldr	r2, [r7, #4]
 800108c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800108e:	60da      	str	r2, [r3, #12]
	config -> Request.Stream ->PAR = (uint32_t)config->peripheral_address;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	687a      	ldr	r2, [r7, #4]
 8001096:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001098:	609a      	str	r2, [r3, #8]
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
	...

080010a8 <DMA_Set_Trigger>:


void DMA_Set_Trigger(DMA_Config *config)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b087      	sub	sp, #28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
    // Bit shift values for streams 0 to 7
    static const uint8_t LIFCR_Shifts[4] = {0, 6, 16, 22};
    static const uint8_t HIFCR_Shifts[4] = {0, 6, 16, 22};

    DMA_TypeDef *controller = config->Request.Controller;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	617b      	str	r3, [r7, #20]
    DMA_Stream_TypeDef *stream = config->Request.Stream;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	613b      	str	r3, [r7, #16]
    uint32_t shift;

    if (controller == DMA1 || controller == DMA2)   {
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	4a43      	ldr	r2, [pc, #268]	@ (80011cc <DMA_Set_Trigger+0x124>)
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d003      	beq.n	80010cc <DMA_Set_Trigger+0x24>
 80010c4:	697b      	ldr	r3, [r7, #20]
 80010c6:	4a42      	ldr	r2, [pc, #264]	@ (80011d0 <DMA_Set_Trigger+0x128>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d178      	bne.n	80011be <DMA_Set_Trigger+0x116>
        if (stream >= DMA1_Stream0 && stream <= DMA1_Stream3)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	4a41      	ldr	r2, [pc, #260]	@ (80011d4 <DMA_Set_Trigger+0x12c>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d918      	bls.n	8001106 <DMA_Set_Trigger+0x5e>
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	4a40      	ldr	r2, [pc, #256]	@ (80011d8 <DMA_Set_Trigger+0x130>)
 80010d8:	4293      	cmp	r3, r2
 80010da:	d814      	bhi.n	8001106 <DMA_Set_Trigger+0x5e>
        {
            shift = LIFCR_Shifts[stream - DMA1_Stream0];
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	4b3f      	ldr	r3, [pc, #252]	@ (80011dc <DMA_Set_Trigger+0x134>)
 80010e0:	4413      	add	r3, r2
 80010e2:	10db      	asrs	r3, r3, #3
 80010e4:	4a3e      	ldr	r2, [pc, #248]	@ (80011e0 <DMA_Set_Trigger+0x138>)
 80010e6:	fb02 f303 	mul.w	r3, r2, r3
 80010ea:	461a      	mov	r2, r3
 80010ec:	4b3d      	ldr	r3, [pc, #244]	@ (80011e4 <DMA_Set_Trigger+0x13c>)
 80010ee:	5c9b      	ldrb	r3, [r3, r2]
 80010f0:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	689b      	ldr	r3, [r3, #8]
 80010f6:	213f      	movs	r1, #63	@ 0x3f
 80010f8:	68fa      	ldr	r2, [r7, #12]
 80010fa:	fa01 f202 	lsl.w	r2, r1, r2
 80010fe:	431a      	orrs	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	609a      	str	r2, [r3, #8]
 8001104:	e055      	b.n	80011b2 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA1_Stream4 && stream <= DMA1_Stream7)
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4a37      	ldr	r2, [pc, #220]	@ (80011e8 <DMA_Set_Trigger+0x140>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d918      	bls.n	8001140 <DMA_Set_Trigger+0x98>
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	4a36      	ldr	r2, [pc, #216]	@ (80011ec <DMA_Set_Trigger+0x144>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d814      	bhi.n	8001140 <DMA_Set_Trigger+0x98>
        {
            shift = HIFCR_Shifts[stream - DMA1_Stream4];
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	4b35      	ldr	r3, [pc, #212]	@ (80011f0 <DMA_Set_Trigger+0x148>)
 800111a:	4413      	add	r3, r2
 800111c:	10db      	asrs	r3, r3, #3
 800111e:	4a30      	ldr	r2, [pc, #192]	@ (80011e0 <DMA_Set_Trigger+0x138>)
 8001120:	fb02 f303 	mul.w	r3, r2, r3
 8001124:	461a      	mov	r2, r3
 8001126:	4b33      	ldr	r3, [pc, #204]	@ (80011f4 <DMA_Set_Trigger+0x14c>)
 8001128:	5c9b      	ldrb	r3, [r3, r2]
 800112a:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	213f      	movs	r1, #63	@ 0x3f
 8001132:	68fa      	ldr	r2, [r7, #12]
 8001134:	fa01 f202 	lsl.w	r2, r1, r2
 8001138:	431a      	orrs	r2, r3
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	e038      	b.n	80011b2 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream0 && stream <= DMA2_Stream3)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	4a2d      	ldr	r2, [pc, #180]	@ (80011f8 <DMA_Set_Trigger+0x150>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d918      	bls.n	800117a <DMA_Set_Trigger+0xd2>
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	4a2c      	ldr	r2, [pc, #176]	@ (80011fc <DMA_Set_Trigger+0x154>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d814      	bhi.n	800117a <DMA_Set_Trigger+0xd2>
        {
            shift = LIFCR_Shifts[stream - DMA2_Stream0];
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4b2b      	ldr	r3, [pc, #172]	@ (8001200 <DMA_Set_Trigger+0x158>)
 8001154:	4413      	add	r3, r2
 8001156:	10db      	asrs	r3, r3, #3
 8001158:	4a21      	ldr	r2, [pc, #132]	@ (80011e0 <DMA_Set_Trigger+0x138>)
 800115a:	fb02 f303 	mul.w	r3, r2, r3
 800115e:	461a      	mov	r2, r3
 8001160:	4b20      	ldr	r3, [pc, #128]	@ (80011e4 <DMA_Set_Trigger+0x13c>)
 8001162:	5c9b      	ldrb	r3, [r3, r2]
 8001164:	60fb      	str	r3, [r7, #12]
            controller->LIFCR |= 0x3F << shift;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	213f      	movs	r1, #63	@ 0x3f
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	fa01 f202 	lsl.w	r2, r1, r2
 8001172:	431a      	orrs	r2, r3
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	609a      	str	r2, [r3, #8]
 8001178:	e01b      	b.n	80011b2 <DMA_Set_Trigger+0x10a>
        }
        else if (stream >= DMA2_Stream4 && stream <= DMA2_Stream7)
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4a21      	ldr	r2, [pc, #132]	@ (8001204 <DMA_Set_Trigger+0x15c>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d917      	bls.n	80011b2 <DMA_Set_Trigger+0x10a>
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	4a20      	ldr	r2, [pc, #128]	@ (8001208 <DMA_Set_Trigger+0x160>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d813      	bhi.n	80011b2 <DMA_Set_Trigger+0x10a>
        {
            shift = HIFCR_Shifts[stream - DMA2_Stream4];
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <DMA_Set_Trigger+0x164>)
 800118e:	4413      	add	r3, r2
 8001190:	10db      	asrs	r3, r3, #3
 8001192:	4a13      	ldr	r2, [pc, #76]	@ (80011e0 <DMA_Set_Trigger+0x138>)
 8001194:	fb02 f303 	mul.w	r3, r2, r3
 8001198:	461a      	mov	r2, r3
 800119a:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <DMA_Set_Trigger+0x14c>)
 800119c:	5c9b      	ldrb	r3, [r3, r2]
 800119e:	60fb      	str	r3, [r7, #12]
            controller->HIFCR |= 0x3F << shift;
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	68db      	ldr	r3, [r3, #12]
 80011a4:	213f      	movs	r1, #63	@ 0x3f
 80011a6:	68fa      	ldr	r2, [r7, #12]
 80011a8:	fa01 f202 	lsl.w	r2, r1, r2
 80011ac:	431a      	orrs	r2, r3
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	60da      	str	r2, [r3, #12]
        }

        stream->CR |= DMA_SxCR_EN;
 80011b2:	693b      	ldr	r3, [r7, #16]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f043 0201 	orr.w	r2, r3, #1
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	601a      	str	r2, [r3, #0]
    }
}
 80011be:	bf00      	nop
 80011c0:	371c      	adds	r7, #28
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40026000 	.word	0x40026000
 80011d0:	40026400 	.word	0x40026400
 80011d4:	4002600f 	.word	0x4002600f
 80011d8:	40026058 	.word	0x40026058
 80011dc:	bffd9ff0 	.word	0xbffd9ff0
 80011e0:	aaaaaaab 	.word	0xaaaaaaab
 80011e4:	0800d5f0 	.word	0x0800d5f0
 80011e8:	4002606f 	.word	0x4002606f
 80011ec:	400260b8 	.word	0x400260b8
 80011f0:	bffd9f90 	.word	0xbffd9f90
 80011f4:	0800d5f4 	.word	0x0800d5f4
 80011f8:	4002640f 	.word	0x4002640f
 80011fc:	40026458 	.word	0x40026458
 8001200:	bffd9bf0 	.word	0xbffd9bf0
 8001204:	4002646f 	.word	0x4002646f
 8001208:	400264b8 	.word	0x400264b8
 800120c:	bffd9b90 	.word	0xbffd9b90

08001210 <DMA_Memory_To_Memory_Transfer>:

void DMA_Memory_To_Memory_Transfer(uint32_t *source,
						  uint8_t source_data_size, uint8_t dest_data_size,
		                  uint32_t *destination, bool source_increment,
						  bool destination_increment, uint16_t length)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	607b      	str	r3, [r7, #4]
 800121a:	460b      	mov	r3, r1
 800121c:	72fb      	strb	r3, [r7, #11]
 800121e:	4613      	mov	r3, r2
 8001220:	72bb      	strb	r3, [r7, #10]

	RCC -> AHB1ENR |= RCC_AHB1ENR_DMA2EN;
 8001222:	4b51      	ldr	r3, [pc, #324]	@ (8001368 <DMA_Memory_To_Memory_Transfer+0x158>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a50      	ldr	r2, [pc, #320]	@ (8001368 <DMA_Memory_To_Memory_Transfer+0x158>)
 8001228:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
	DMA2_Stream0->CR &= (DMA_SxCR_CHSEL);
 800122e:	4b4f      	ldr	r3, [pc, #316]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a4e      	ldr	r2, [pc, #312]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001234:	f003 6360 	and.w	r3, r3, #234881024	@ 0xe000000
 8001238:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= DMA_Configuration.Transfer_Direction.Memory_to_memory;
 800123a:	4b4c      	ldr	r3, [pc, #304]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2180      	movs	r1, #128	@ 0x80
 8001240:	4a4a      	ldr	r2, [pc, #296]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001242:	430b      	orrs	r3, r1
 8001244:	6013      	str	r3, [r2, #0]
	DMA2_Stream0->CR |= (DMA_SxCR_TCIE | DMA_SxCR_PL);
 8001246:	4b49      	ldr	r3, [pc, #292]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a48      	ldr	r2, [pc, #288]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800124c:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8001250:	f043 0310 	orr.w	r3, r3, #16
 8001254:	6013      	str	r3, [r2, #0]

	if(source_data_size == 32)
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	2b20      	cmp	r3, #32
 800125a:	d106      	bne.n	800126a <DMA_Memory_To_Memory_Transfer+0x5a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE;
 800125c:	4b43      	ldr	r3, [pc, #268]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a42      	ldr	r2, [pc, #264]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001262:	f443 53c0 	orr.w	r3, r3, #6144	@ 0x1800
 8001266:	6013      	str	r3, [r2, #0]
 8001268:	e015      	b.n	8001296 <DMA_Memory_To_Memory_Transfer+0x86>
	}else if(source_data_size == 16)
 800126a:	7afb      	ldrb	r3, [r7, #11]
 800126c:	2b10      	cmp	r3, #16
 800126e:	d10c      	bne.n	800128a <DMA_Memory_To_Memory_Transfer+0x7a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PSIZE_0;
 8001270:	4b3e      	ldr	r3, [pc, #248]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a3d      	ldr	r2, [pc, #244]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001276:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800127a:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE_1;
 800127c:	4b3b      	ldr	r3, [pc, #236]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a3a      	ldr	r2, [pc, #232]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e005      	b.n	8001296 <DMA_Memory_To_Memory_Transfer+0x86>
	}else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_PSIZE;
 800128a:	4b38      	ldr	r3, [pc, #224]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a37      	ldr	r2, [pc, #220]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001290:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 8001294:	6013      	str	r3, [r2, #0]
	}

	if(dest_data_size == 32)
 8001296:	7abb      	ldrb	r3, [r7, #10]
 8001298:	2b20      	cmp	r3, #32
 800129a:	d106      	bne.n	80012aa <DMA_Memory_To_Memory_Transfer+0x9a>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE;
 800129c:	4b33      	ldr	r3, [pc, #204]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a32      	ldr	r2, [pc, #200]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012a2:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	e015      	b.n	80012d6 <DMA_Memory_To_Memory_Transfer+0xc6>
	}else if(dest_data_size == 16)
 80012aa:	7abb      	ldrb	r3, [r7, #10]
 80012ac:	2b10      	cmp	r3, #16
 80012ae:	d10c      	bne.n	80012ca <DMA_Memory_To_Memory_Transfer+0xba>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MSIZE_0;
 80012b0:	4b2e      	ldr	r3, [pc, #184]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a2d      	ldr	r2, [pc, #180]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012ba:	6013      	str	r3, [r2, #0]
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE_1;
 80012bc:	4b2b      	ldr	r3, [pc, #172]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a2a      	ldr	r2, [pc, #168]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80012c6:	6013      	str	r3, [r2, #0]
 80012c8:	e005      	b.n	80012d6 <DMA_Memory_To_Memory_Transfer+0xc6>
	}else
	{
		DMA2_Stream0->CR &= ~DMA_SxCR_MSIZE;
 80012ca:	4b28      	ldr	r3, [pc, #160]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4a27      	ldr	r2, [pc, #156]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012d0:	f423 43c0 	bic.w	r3, r3, #24576	@ 0x6000
 80012d4:	6013      	str	r3, [r2, #0]
	}

	if(source_increment == 1)
 80012d6:	7e3b      	ldrb	r3, [r7, #24]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d006      	beq.n	80012ea <DMA_Memory_To_Memory_Transfer+0xda>
	{
		DMA2_Stream0->CR |= DMA_SxCR_PINC;
 80012dc:	4b23      	ldr	r3, [pc, #140]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a22      	ldr	r2, [pc, #136]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e005      	b.n	80012f6 <DMA_Memory_To_Memory_Transfer+0xe6>
	}
	else{
		DMA2_Stream0->CR &= ~DMA_SxCR_PINC;
 80012ea:	4b20      	ldr	r3, [pc, #128]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a1f      	ldr	r2, [pc, #124]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80012f4:	6013      	str	r3, [r2, #0]
	}

	if(destination_increment == 1)
 80012f6:	7f3b      	ldrb	r3, [r7, #28]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d006      	beq.n	800130a <DMA_Memory_To_Memory_Transfer+0xfa>
	{
		DMA2_Stream0->CR |= DMA_SxCR_MINC;
 80012fc:	4b1b      	ldr	r3, [pc, #108]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a1a      	ldr	r2, [pc, #104]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001302:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001306:	6013      	str	r3, [r2, #0]
 8001308:	e005      	b.n	8001316 <DMA_Memory_To_Memory_Transfer+0x106>
	}
	else{
		DMA2_Stream0->CR &= ~DMA_SxCR_MINC;
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a17      	ldr	r2, [pc, #92]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001310:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001314:	6013      	str	r3, [r2, #0]
	}

	DMA2_Stream0 -> PAR = (uint32_t)(source);
 8001316:	4a15      	ldr	r2, [pc, #84]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6093      	str	r3, [r2, #8]
	DMA2_Stream0 -> M0AR = (uint32_t)(destination);
 800131c:	4a13      	ldr	r2, [pc, #76]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	60d3      	str	r3, [r2, #12]
	DMA2_Stream0 -> NDTR = (uint16_t)length;
 8001322:	4a12      	ldr	r2, [pc, #72]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001324:	8c3b      	ldrh	r3, [r7, #32]
 8001326:	6053      	str	r3, [r2, #4]
	DMA2_Stream0 -> CR |= DMA_SxCR_EN;
 8001328:	4b10      	ldr	r3, [pc, #64]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a0f      	ldr	r2, [pc, #60]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 800132e:	f043 0301 	orr.w	r3, r3, #1
 8001332:	6013      	str	r3, [r2, #0]

	while((DMA2 -> LISR & (DMA_LISR_TCIF0_Msk)) == 0){}
 8001334:	bf00      	nop
 8001336:	4b0e      	ldr	r3, [pc, #56]	@ (8001370 <DMA_Memory_To_Memory_Transfer+0x160>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0320 	and.w	r3, r3, #32
 800133e:	2b00      	cmp	r3, #0
 8001340:	d0f9      	beq.n	8001336 <DMA_Memory_To_Memory_Transfer+0x126>
	DMA2 -> LIFCR |= DMA_LIFCR_CTCIF0;
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <DMA_Memory_To_Memory_Transfer+0x160>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4a0a      	ldr	r2, [pc, #40]	@ (8001370 <DMA_Memory_To_Memory_Transfer+0x160>)
 8001348:	f043 0320 	orr.w	r3, r3, #32
 800134c:	6093      	str	r3, [r2, #8]

	DMA2_Stream0 -> CR &= ~DMA_SxCR_EN;
 800134e:	4b07      	ldr	r3, [pc, #28]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a06      	ldr	r2, [pc, #24]	@ (800136c <DMA_Memory_To_Memory_Transfer+0x15c>)
 8001354:	f023 0301 	bic.w	r3, r3, #1
 8001358:	6013      	str	r3, [r2, #0]
}
 800135a:	bf00      	nop
 800135c:	3714      	adds	r7, #20
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40023800 	.word	0x40023800
 800136c:	40026410 	.word	0x40026410
 8001370:	40026400 	.word	0x40026400

08001374 <Delay_ms>:
	while((SysTick->CTRL & 0x00010000) == 0);
	return (0UL);                                                     /* Function successful */
}

__STATIC_INLINE uint32_t Delay_ms(float ms)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 800137e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001382:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80013c8 <Delay_ms+0x54>
 8001386:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800138e:	ee17 3a90 	vmov	r3, s15
 8001392:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 8001394:	4a0d      	ldr	r2, [pc, #52]	@ (80013cc <Delay_ms+0x58>)
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 800139a:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <Delay_ms+0x58>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 80013a0:	4b0a      	ldr	r3, [pc, #40]	@ (80013cc <Delay_ms+0x58>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a09      	ldr	r2, [pc, #36]	@ (80013cc <Delay_ms+0x58>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 80013ac:	bf00      	nop
 80013ae:	4b07      	ldr	r3, [pc, #28]	@ (80013cc <Delay_ms+0x58>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d0f9      	beq.n	80013ae <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 80013ba:	2300      	movs	r3, #0
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	48241000 	.word	0x48241000
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <GPIO_Pin_Low>:
 * @brief  Sets a specific pin low.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set low (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_Low(GPIO_TypeDef *Port, int pin)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
 80013d8:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	695b      	ldr	r3, [r3, #20]
 80013de:	2101      	movs	r1, #1
 80013e0:	683a      	ldr	r2, [r7, #0]
 80013e2:	fa01 f202 	lsl.w	r2, r1, r2
 80013e6:	43d2      	mvns	r2, r2
 80013e8:	401a      	ands	r2, r3
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	615a      	str	r2, [r3, #20]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr

080013fa <GPIO_Pin_High>:
 * @brief  Sets a specific pin high.
 * @param  Port: Pointer to GPIO port base address.
 * @param  pin: Pin number to set high (0-15).
 */
__STATIC_INLINE  void GPIO_Pin_High(GPIO_TypeDef *Port, int pin)
{
 80013fa:	b480      	push	{r7}
 80013fc:	b083      	sub	sp, #12
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
 8001402:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	695b      	ldr	r3, [r3, #20]
 8001408:	2101      	movs	r1, #1
 800140a:	683a      	ldr	r2, [r7, #0]
 800140c:	fa01 f202 	lsl.w	r2, r1, r2
 8001410:	431a      	orrs	r2, r3
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	615a      	str	r2, [r3, #20]
}
 8001416:	bf00      	nop
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <command_line_high>:




static void command_line_high(GC9A01_Typedef *config)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->DC_Port, config->DC_Pin);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001434:	4619      	mov	r1, r3
 8001436:	4610      	mov	r0, r2
 8001438:	f7ff ffdf 	bl	80013fa <GPIO_Pin_High>
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <command_line_low>:

static void command_line_low(GC9A01_Typedef *config)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->DC_Port, config->DC_Pin);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 8001456:	4619      	mov	r1, r3
 8001458:	4610      	mov	r0, r2
 800145a:	f7ff ffb9 	bl	80013d0 <GPIO_Pin_Low>
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}

08001466 <reset_line_high>:

static void reset_line_high(GC9A01_Typedef *config)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->Reset_Port, config->Reset_Pin);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001478:	4619      	mov	r1, r3
 800147a:	4610      	mov	r0, r2
 800147c:	f7ff ffbd 	bl	80013fa <GPIO_Pin_High>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <reset_line_low>:

static void reset_line_low(GC9A01_Typedef *config)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->Reset_Port, config->Reset_Pin);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 800149a:	4619      	mov	r1, r3
 800149c:	4610      	mov	r0, r2
 800149e:	f7ff ff97 	bl	80013d0 <GPIO_Pin_Low>

}
 80014a2:	bf00      	nop
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <Write_Command>:
	config->Reset_Pin = -1;
	config->Reset_Port = NULL;
}

static void Write_Command(GC9A01_Typedef *config,uint8_t command, bool data_command, uint8_t *data, uint8_t len)
{
 80014aa:	b580      	push	{r7, lr}
 80014ac:	b086      	sub	sp, #24
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	60f8      	str	r0, [r7, #12]
 80014b2:	607b      	str	r3, [r7, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	72fb      	strb	r3, [r7, #11]
 80014b8:	4613      	mov	r3, r2
 80014ba:	72bb      	strb	r3, [r7, #10]
	config->SPI_Driver.data_format = SPI_Configurations.Data_Format.Bit8;
 80014bc:	230b      	movs	r3, #11
 80014be:	461a      	mov	r2, r3
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	825a      	strh	r2, [r3, #18]
	SPI_Data_Format_Update(&(config->SPI_Driver));
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f001 ff9a 	bl	8003400 <SPI_Data_Format_Update>
	SPI_NSS_Low(&(config->SPI_Driver));
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f001 ffbf 	bl	8003452 <SPI_NSS_Low>
	command_line_low(config);
 80014d4:	68f8      	ldr	r0, [r7, #12]
 80014d6:	f7ff ffb5 	bl	8001444 <command_line_low>
	SPI_TRX_Byte(&(config->SPI_Driver), command);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	7afa      	ldrb	r2, [r7, #11]
 80014de:	b292      	uxth	r2, r2
 80014e0:	4611      	mov	r1, r2
 80014e2:	4618      	mov	r0, r3
 80014e4:	f001 fd9c 	bl	8003020 <SPI_TRX_Byte>
	if(data_command)
 80014e8:	7abb      	ldrb	r3, [r7, #10]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d015      	beq.n	800151a <Write_Command+0x70>
	{
		command_line_high(config);
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f7ff ff97 	bl	8001422 <command_line_high>
		for(int i = 0; i < len; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	617b      	str	r3, [r7, #20]
 80014f8:	e00a      	b.n	8001510 <Write_Command+0x66>
		{
			SPI_TRX_Byte(&(config->SPI_Driver), data[i]);
 80014fa:	68f8      	ldr	r0, [r7, #12]
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	4619      	mov	r1, r3
 8001506:	f001 fd8b 	bl	8003020 <SPI_TRX_Byte>
		for(int i = 0; i < len; i++)
 800150a:	697b      	ldr	r3, [r7, #20]
 800150c:	3301      	adds	r3, #1
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001514:	697a      	ldr	r2, [r7, #20]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbef      	blt.n	80014fa <Write_Command+0x50>
		}
	}
	SPI_NSS_High(&(config->SPI_Driver));
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	4618      	mov	r0, r3
 800151e:	f001 ff5f 	bl	80033e0 <SPI_NSS_High>
}
 8001522:	bf00      	nop
 8001524:	3718      	adds	r7, #24
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <GC9A01_Init>:


void GC9A01_Init(GC9A01_Typedef *config)
{
 800152c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800152e:	b08b      	sub	sp, #44	@ 0x2c
 8001530:	af04      	add	r7, sp, #16
 8001532:	6078      	str	r0, [r7, #4]

	SPI_Init(&(config->SPI_Driver));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fafc 	bl	8002b34 <SPI_Init>
	SPI_Enable(&(config->SPI_Driver));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4618      	mov	r0, r3
 8001540:	f001 fd4a 	bl	8002fd8 <SPI_Enable>

	GPIO_Pin_Init(config->DC_Port, config->DC_Pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f993 3028 	ldrsb.w	r3, [r3, #40]	@ 0x28
 800154e:	b2d9      	uxtb	r1, r3
 8001550:	2501      	movs	r5, #1
 8001552:	2600      	movs	r6, #0
 8001554:	2303      	movs	r3, #3
 8001556:	2200      	movs	r2, #0
 8001558:	2400      	movs	r4, #0
 800155a:	9402      	str	r4, [sp, #8]
 800155c:	9201      	str	r2, [sp, #4]
 800155e:	9300      	str	r3, [sp, #0]
 8001560:	4633      	mov	r3, r6
 8001562:	462a      	mov	r2, r5
 8001564:	f000 fcd4 	bl	8001f10 <GPIO_Pin_Init>

	GPIO_Pin_Init(config->Reset_Port, config->Reset_Pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.None);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8001572:	b2d9      	uxtb	r1, r3
 8001574:	2501      	movs	r5, #1
 8001576:	2600      	movs	r6, #0
 8001578:	2303      	movs	r3, #3
 800157a:	2200      	movs	r2, #0
 800157c:	2400      	movs	r4, #0
 800157e:	9402      	str	r4, [sp, #8]
 8001580:	9201      	str	r2, [sp, #4]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4633      	mov	r3, r6
 8001586:	462a      	mov	r2, r5
 8001588:	f000 fcc2 	bl	8001f10 <GPIO_Pin_Init>


	SPI_NSS_Low(&(config->SPI_Driver));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4618      	mov	r0, r3
 8001590:	f001 ff5f 	bl	8003452 <SPI_NSS_Low>
	reset_line_high(config);
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7ff ff66 	bl	8001466 <reset_line_high>
	Delay_ms(50);
 800159a:	ed9f 0adc 	vldr	s0, [pc, #880]	@ 800190c <GC9A01_Init+0x3e0>
 800159e:	f7ff fee9 	bl	8001374 <Delay_ms>
	reset_line_low(config);
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff ff70 	bl	8001488 <reset_line_low>
	Delay_ms(50);
 80015a8:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800190c <GC9A01_Init+0x3e0>
 80015ac:	f7ff fee2 	bl	8001374 <Delay_ms>
	reset_line_high(config);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff ff58 	bl	8001466 <reset_line_high>
	Delay_ms(150);
 80015b6:	ed9f 0ad6 	vldr	s0, [pc, #856]	@ 8001910 <GC9A01_Init+0x3e4>
 80015ba:	f7ff fedb 	bl	8001374 <Delay_ms>
	SPI_NSS_High(&(config->SPI_Driver));
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f001 ff0d 	bl	80033e0 <SPI_NSS_High>
	Delay_ms(100);
 80015c6:	ed9f 0ad3 	vldr	s0, [pc, #844]	@ 8001914 <GC9A01_Init+0x3e8>
 80015ca:	f7ff fed3 	bl	8001374 <Delay_ms>

	uint8_t data[15];

	Write_Command(config, 0xEF, 0, NULL, 0);
 80015ce:	2300      	movs	r3, #0
 80015d0:	9300      	str	r3, [sp, #0]
 80015d2:	2300      	movs	r3, #0
 80015d4:	2200      	movs	r2, #0
 80015d6:	21ef      	movs	r1, #239	@ 0xef
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f7ff ff66 	bl	80014aa <Write_Command>

	data[0] = 0x14;
 80015de:	2314      	movs	r3, #20
 80015e0:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xEB, 1, data, 1);
 80015e2:	f107 0308 	add.w	r3, r7, #8
 80015e6:	2201      	movs	r2, #1
 80015e8:	9200      	str	r2, [sp, #0]
 80015ea:	2201      	movs	r2, #1
 80015ec:	21eb      	movs	r1, #235	@ 0xeb
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff ff5b 	bl	80014aa <Write_Command>

	Write_Command(config, 0xFE, 0, NULL, 0);
 80015f4:	2300      	movs	r3, #0
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2300      	movs	r3, #0
 80015fa:	2200      	movs	r2, #0
 80015fc:	21fe      	movs	r1, #254	@ 0xfe
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff53 	bl	80014aa <Write_Command>
	Write_Command(config, 0xEF, 0, NULL, 0);
 8001604:	2300      	movs	r3, #0
 8001606:	9300      	str	r3, [sp, #0]
 8001608:	2300      	movs	r3, #0
 800160a:	2200      	movs	r2, #0
 800160c:	21ef      	movs	r1, #239	@ 0xef
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ff4b 	bl	80014aa <Write_Command>

	data[0] = 0x14;
 8001614:	2314      	movs	r3, #20
 8001616:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xEB, 1, data, 1);
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	2201      	movs	r2, #1
 800161e:	9200      	str	r2, [sp, #0]
 8001620:	2201      	movs	r2, #1
 8001622:	21eb      	movs	r1, #235	@ 0xeb
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f7ff ff40 	bl	80014aa <Write_Command>

	data[0] = 0x40;
 800162a:	2340      	movs	r3, #64	@ 0x40
 800162c:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x84, 1, data, 1);
 800162e:	f107 0308 	add.w	r3, r7, #8
 8001632:	2201      	movs	r2, #1
 8001634:	9200      	str	r2, [sp, #0]
 8001636:	2201      	movs	r2, #1
 8001638:	2184      	movs	r1, #132	@ 0x84
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff ff35 	bl	80014aa <Write_Command>

	data[0] = 0xFF;
 8001640:	23ff      	movs	r3, #255	@ 0xff
 8001642:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x85, 1, data, 1);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	2201      	movs	r2, #1
 800164a:	9200      	str	r2, [sp, #0]
 800164c:	2201      	movs	r2, #1
 800164e:	2185      	movs	r1, #133	@ 0x85
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ff2a 	bl	80014aa <Write_Command>

	data[0] = 0xFF;
 8001656:	23ff      	movs	r3, #255	@ 0xff
 8001658:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x86, 1, data, 1);
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	2201      	movs	r2, #1
 8001660:	9200      	str	r2, [sp, #0]
 8001662:	2201      	movs	r2, #1
 8001664:	2186      	movs	r1, #134	@ 0x86
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f7ff ff1f 	bl	80014aa <Write_Command>

	data[0] = 0xFF;
 800166c:	23ff      	movs	r3, #255	@ 0xff
 800166e:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x87, 1, data, 1);
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	2201      	movs	r2, #1
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	2201      	movs	r2, #1
 800167a:	2187      	movs	r1, #135	@ 0x87
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f7ff ff14 	bl	80014aa <Write_Command>

	data[0] = 0x0A;
 8001682:	230a      	movs	r3, #10
 8001684:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x88, 1, data, 1);
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	2201      	movs	r2, #1
 800168c:	9200      	str	r2, [sp, #0]
 800168e:	2201      	movs	r2, #1
 8001690:	2188      	movs	r1, #136	@ 0x88
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff ff09 	bl	80014aa <Write_Command>

	data[0] = 0x21;
 8001698:	2321      	movs	r3, #33	@ 0x21
 800169a:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x89, 1, data, 1);
 800169c:	f107 0308 	add.w	r3, r7, #8
 80016a0:	2201      	movs	r2, #1
 80016a2:	9200      	str	r2, [sp, #0]
 80016a4:	2201      	movs	r2, #1
 80016a6:	2189      	movs	r1, #137	@ 0x89
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff fefe 	bl	80014aa <Write_Command>

	data[0] = 0x00;
 80016ae:	2300      	movs	r3, #0
 80016b0:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x8A, 1, data, 1);
 80016b2:	f107 0308 	add.w	r3, r7, #8
 80016b6:	2201      	movs	r2, #1
 80016b8:	9200      	str	r2, [sp, #0]
 80016ba:	2201      	movs	r2, #1
 80016bc:	218a      	movs	r1, #138	@ 0x8a
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7ff fef3 	bl	80014aa <Write_Command>

	data[0] = 0x80;
 80016c4:	2380      	movs	r3, #128	@ 0x80
 80016c6:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x8B, 1, data, 1);
 80016c8:	f107 0308 	add.w	r3, r7, #8
 80016cc:	2201      	movs	r2, #1
 80016ce:	9200      	str	r2, [sp, #0]
 80016d0:	2201      	movs	r2, #1
 80016d2:	218b      	movs	r1, #139	@ 0x8b
 80016d4:	6878      	ldr	r0, [r7, #4]
 80016d6:	f7ff fee8 	bl	80014aa <Write_Command>

	data[0] = 0x01;
 80016da:	2301      	movs	r3, #1
 80016dc:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x8C, 1, data, 1);
 80016de:	f107 0308 	add.w	r3, r7, #8
 80016e2:	2201      	movs	r2, #1
 80016e4:	9200      	str	r2, [sp, #0]
 80016e6:	2201      	movs	r2, #1
 80016e8:	218c      	movs	r1, #140	@ 0x8c
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff fedd 	bl	80014aa <Write_Command>

	data[0] = 0x01;
 80016f0:	2301      	movs	r3, #1
 80016f2:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x8D, 1, data, 1);
 80016f4:	f107 0308 	add.w	r3, r7, #8
 80016f8:	2201      	movs	r2, #1
 80016fa:	9200      	str	r2, [sp, #0]
 80016fc:	2201      	movs	r2, #1
 80016fe:	218d      	movs	r1, #141	@ 0x8d
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff fed2 	bl	80014aa <Write_Command>

	data[0] = 0xFF;
 8001706:	23ff      	movs	r3, #255	@ 0xff
 8001708:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x8E, 1, data, 1);
 800170a:	f107 0308 	add.w	r3, r7, #8
 800170e:	2201      	movs	r2, #1
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	2201      	movs	r2, #1
 8001714:	218e      	movs	r1, #142	@ 0x8e
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fec7 	bl	80014aa <Write_Command>

	data[0] = 0xFF;
 800171c:	23ff      	movs	r3, #255	@ 0xff
 800171e:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x8F, 1, data, 1);
 8001720:	f107 0308 	add.w	r3, r7, #8
 8001724:	2201      	movs	r2, #1
 8001726:	9200      	str	r2, [sp, #0]
 8001728:	2201      	movs	r2, #1
 800172a:	218f      	movs	r1, #143	@ 0x8f
 800172c:	6878      	ldr	r0, [r7, #4]
 800172e:	f7ff febc 	bl	80014aa <Write_Command>

	data[0] = 0x00;
 8001732:	2300      	movs	r3, #0
 8001734:	723b      	strb	r3, [r7, #8]
	data[1] = 0x00; //0x00
 8001736:	2300      	movs	r3, #0
 8001738:	727b      	strb	r3, [r7, #9]
	Write_Command(config, 0xb6, 1, data, 2);
 800173a:	f107 0308 	add.w	r3, r7, #8
 800173e:	2202      	movs	r2, #2
 8001740:	9200      	str	r2, [sp, #0]
 8001742:	2201      	movs	r2, #1
 8001744:	21b6      	movs	r1, #182	@ 0xb6
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff feaf 	bl	80014aa <Write_Command>

	data[0] = 0x48;
 800174c:	2348      	movs	r3, #72	@ 0x48
 800174e:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x36, 1, data, 1);
 8001750:	f107 0308 	add.w	r3, r7, #8
 8001754:	2201      	movs	r2, #1
 8001756:	9200      	str	r2, [sp, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	2136      	movs	r1, #54	@ 0x36
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f7ff fea4 	bl	80014aa <Write_Command>

	data[0] = COLOR_MODE__16_BIT;
 8001762:	2305      	movs	r3, #5
 8001764:	723b      	strb	r3, [r7, #8]
	Write_Command(config, COLOR_MODE, 1, data, 1);
 8001766:	f107 0308 	add.w	r3, r7, #8
 800176a:	2201      	movs	r2, #1
 800176c:	9200      	str	r2, [sp, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	213a      	movs	r1, #58	@ 0x3a
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f7ff fe99 	bl	80014aa <Write_Command>

	data[0] = 0x08;
 8001778:	2308      	movs	r3, #8
 800177a:	723b      	strb	r3, [r7, #8]
	data[1] = 0x08;
 800177c:	2308      	movs	r3, #8
 800177e:	727b      	strb	r3, [r7, #9]
	data[2] = 0x08;
 8001780:	2308      	movs	r3, #8
 8001782:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x08;
 8001784:	2308      	movs	r3, #8
 8001786:	72fb      	strb	r3, [r7, #11]
	Write_Command(config, 0x90, 1, data, 4);
 8001788:	f107 0308 	add.w	r3, r7, #8
 800178c:	2204      	movs	r2, #4
 800178e:	9200      	str	r2, [sp, #0]
 8001790:	2201      	movs	r2, #1
 8001792:	2190      	movs	r1, #144	@ 0x90
 8001794:	6878      	ldr	r0, [r7, #4]
 8001796:	f7ff fe88 	bl	80014aa <Write_Command>


	data[0] = 0x06;
 800179a:	2306      	movs	r3, #6
 800179c:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xBD, 1, data, 1);
 800179e:	f107 0308 	add.w	r3, r7, #8
 80017a2:	2201      	movs	r2, #1
 80017a4:	9200      	str	r2, [sp, #0]
 80017a6:	2201      	movs	r2, #1
 80017a8:	21bd      	movs	r1, #189	@ 0xbd
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff fe7d 	bl	80014aa <Write_Command>

	data[0] = 0x00;
 80017b0:	2300      	movs	r3, #0
 80017b2:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xBC, 1, data, 1);
 80017b4:	f107 0308 	add.w	r3, r7, #8
 80017b8:	2201      	movs	r2, #1
 80017ba:	9200      	str	r2, [sp, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	21bc      	movs	r1, #188	@ 0xbc
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f7ff fe72 	bl	80014aa <Write_Command>


	data[0] = 0x60;
 80017c6:	2360      	movs	r3, #96	@ 0x60
 80017c8:	723b      	strb	r3, [r7, #8]
	data[1] = 0x01;
 80017ca:	2301      	movs	r3, #1
 80017cc:	727b      	strb	r3, [r7, #9]
	data[2] = 0x04;
 80017ce:	2304      	movs	r3, #4
 80017d0:	72bb      	strb	r3, [r7, #10]
	Write_Command(config, 0xFF, 1, data, 3);
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	2203      	movs	r2, #3
 80017d8:	9200      	str	r2, [sp, #0]
 80017da:	2201      	movs	r2, #1
 80017dc:	21ff      	movs	r1, #255	@ 0xff
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f7ff fe63 	bl	80014aa <Write_Command>


	data[0] = 0x13;
 80017e4:	2313      	movs	r3, #19
 80017e6:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xC3, 1, data, 1);
 80017e8:	f107 0308 	add.w	r3, r7, #8
 80017ec:	2201      	movs	r2, #1
 80017ee:	9200      	str	r2, [sp, #0]
 80017f0:	2201      	movs	r2, #1
 80017f2:	21c3      	movs	r1, #195	@ 0xc3
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f7ff fe58 	bl	80014aa <Write_Command>

	data[0] = 0x13;
 80017fa:	2313      	movs	r3, #19
 80017fc:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xC4, 1, data, 1);
 80017fe:	f107 0308 	add.w	r3, r7, #8
 8001802:	2201      	movs	r2, #1
 8001804:	9200      	str	r2, [sp, #0]
 8001806:	2201      	movs	r2, #1
 8001808:	21c4      	movs	r1, #196	@ 0xc4
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff fe4d 	bl	80014aa <Write_Command>

	data[0] = 0x22;
 8001810:	2322      	movs	r3, #34	@ 0x22
 8001812:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xC9, 1, data, 1);
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	2201      	movs	r2, #1
 800181a:	9200      	str	r2, [sp, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	21c9      	movs	r1, #201	@ 0xc9
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	f7ff fe42 	bl	80014aa <Write_Command>


	data[0] = 0x11;
 8001826:	2311      	movs	r3, #17
 8001828:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xBE, 1, data, 1);
 800182a:	f107 0308 	add.w	r3, r7, #8
 800182e:	2201      	movs	r2, #1
 8001830:	9200      	str	r2, [sp, #0]
 8001832:	2201      	movs	r2, #1
 8001834:	21be      	movs	r1, #190	@ 0xbe
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7ff fe37 	bl	80014aa <Write_Command>

	data[0] = 0x10;
 800183c:	2310      	movs	r3, #16
 800183e:	723b      	strb	r3, [r7, #8]
	data[1] = 0x0E;
 8001840:	230e      	movs	r3, #14
 8001842:	727b      	strb	r3, [r7, #9]
	Write_Command(config, 0xE1, 1, data, 2);
 8001844:	f107 0308 	add.w	r3, r7, #8
 8001848:	2202      	movs	r2, #2
 800184a:	9200      	str	r2, [sp, #0]
 800184c:	2201      	movs	r2, #1
 800184e:	21e1      	movs	r1, #225	@ 0xe1
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff fe2a 	bl	80014aa <Write_Command>

	data[0] = 0x21;
 8001856:	2321      	movs	r3, #33	@ 0x21
 8001858:	723b      	strb	r3, [r7, #8]
	data[1] = 0x0c;
 800185a:	230c      	movs	r3, #12
 800185c:	727b      	strb	r3, [r7, #9]
	data[2] = 0x02;
 800185e:	2302      	movs	r3, #2
 8001860:	72bb      	strb	r3, [r7, #10]
	Write_Command(config, 0xDF, 1, data, 3);
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	2203      	movs	r2, #3
 8001868:	9200      	str	r2, [sp, #0]
 800186a:	2201      	movs	r2, #1
 800186c:	21df      	movs	r1, #223	@ 0xdf
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff fe1b 	bl	80014aa <Write_Command>


	data[0] = 0x45;
 8001874:	2345      	movs	r3, #69	@ 0x45
 8001876:	723b      	strb	r3, [r7, #8]
	data[1] = 0x09;
 8001878:	2309      	movs	r3, #9
 800187a:	727b      	strb	r3, [r7, #9]
	data[2] = 0x08;
 800187c:	2308      	movs	r3, #8
 800187e:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x08;
 8001880:	2308      	movs	r3, #8
 8001882:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x26;
 8001884:	2326      	movs	r3, #38	@ 0x26
 8001886:	733b      	strb	r3, [r7, #12]
	data[5] = 0x2A;
 8001888:	232a      	movs	r3, #42	@ 0x2a
 800188a:	737b      	strb	r3, [r7, #13]
	Write_Command(config, 0xF0, 1, data, 6);
 800188c:	f107 0308 	add.w	r3, r7, #8
 8001890:	2206      	movs	r2, #6
 8001892:	9200      	str	r2, [sp, #0]
 8001894:	2201      	movs	r2, #1
 8001896:	21f0      	movs	r1, #240	@ 0xf0
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fe06 	bl	80014aa <Write_Command>

	data[0] = 0x43;
 800189e:	2343      	movs	r3, #67	@ 0x43
 80018a0:	723b      	strb	r3, [r7, #8]
	data[1] = 0x70;
 80018a2:	2370      	movs	r3, #112	@ 0x70
 80018a4:	727b      	strb	r3, [r7, #9]
	data[2] = 0x72;
 80018a6:	2372      	movs	r3, #114	@ 0x72
 80018a8:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x36;
 80018aa:	2336      	movs	r3, #54	@ 0x36
 80018ac:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x37;
 80018ae:	2337      	movs	r3, #55	@ 0x37
 80018b0:	733b      	strb	r3, [r7, #12]
	data[5] = 0x6f;
 80018b2:	236f      	movs	r3, #111	@ 0x6f
 80018b4:	737b      	strb	r3, [r7, #13]
	Write_Command(config, 0xF1, 1, data, 6);
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	2206      	movs	r2, #6
 80018bc:	9200      	str	r2, [sp, #0]
 80018be:	2201      	movs	r2, #1
 80018c0:	21f1      	movs	r1, #241	@ 0xf1
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fdf1 	bl	80014aa <Write_Command>


	data[0] = 0x45;
 80018c8:	2345      	movs	r3, #69	@ 0x45
 80018ca:	723b      	strb	r3, [r7, #8]
	data[1] = 0x09;
 80018cc:	2309      	movs	r3, #9
 80018ce:	727b      	strb	r3, [r7, #9]
	data[2] = 0x08;
 80018d0:	2308      	movs	r3, #8
 80018d2:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x08;
 80018d4:	2308      	movs	r3, #8
 80018d6:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x26;
 80018d8:	2326      	movs	r3, #38	@ 0x26
 80018da:	733b      	strb	r3, [r7, #12]
	data[5] = 0x2A;
 80018dc:	232a      	movs	r3, #42	@ 0x2a
 80018de:	737b      	strb	r3, [r7, #13]
	Write_Command(config, 0xF2, 1, data, 6);
 80018e0:	f107 0308 	add.w	r3, r7, #8
 80018e4:	2206      	movs	r2, #6
 80018e6:	9200      	str	r2, [sp, #0]
 80018e8:	2201      	movs	r2, #1
 80018ea:	21f2      	movs	r1, #242	@ 0xf2
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff fddc 	bl	80014aa <Write_Command>

	data[0] = 0x43;
 80018f2:	2343      	movs	r3, #67	@ 0x43
 80018f4:	723b      	strb	r3, [r7, #8]
	data[1] = 0x70;
 80018f6:	2370      	movs	r3, #112	@ 0x70
 80018f8:	727b      	strb	r3, [r7, #9]
	data[2] = 0x72;
 80018fa:	2372      	movs	r3, #114	@ 0x72
 80018fc:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x36;
 80018fe:	2336      	movs	r3, #54	@ 0x36
 8001900:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x37;
 8001902:	2337      	movs	r3, #55	@ 0x37
 8001904:	733b      	strb	r3, [r7, #12]
	data[5] = 0x6F;
 8001906:	236f      	movs	r3, #111	@ 0x6f
 8001908:	e008      	b.n	800191c <GC9A01_Init+0x3f0>
 800190a:	bf00      	nop
 800190c:	42480000 	.word	0x42480000
 8001910:	43160000 	.word	0x43160000
 8001914:	42c80000 	.word	0x42c80000
 8001918:	42f00000 	.word	0x42f00000
 800191c:	737b      	strb	r3, [r7, #13]
	Write_Command(config, 0xF3, 1, data, 6);
 800191e:	f107 0308 	add.w	r3, r7, #8
 8001922:	2206      	movs	r2, #6
 8001924:	9200      	str	r2, [sp, #0]
 8001926:	2201      	movs	r2, #1
 8001928:	21f3      	movs	r1, #243	@ 0xf3
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff fdbd 	bl	80014aa <Write_Command>

	data[0] = 0x1B;
 8001930:	231b      	movs	r3, #27
 8001932:	723b      	strb	r3, [r7, #8]
	data[1] = 0x0B;
 8001934:	230b      	movs	r3, #11
 8001936:	727b      	strb	r3, [r7, #9]
	Write_Command(config, 0xED, 1, data, 2);
 8001938:	f107 0308 	add.w	r3, r7, #8
 800193c:	2202      	movs	r2, #2
 800193e:	9200      	str	r2, [sp, #0]
 8001940:	2201      	movs	r2, #1
 8001942:	21ed      	movs	r1, #237	@ 0xed
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f7ff fdb0 	bl	80014aa <Write_Command>


	data[0] = 0x77;
 800194a:	2377      	movs	r3, #119	@ 0x77
 800194c:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xAe, 1, data, 1);
 800194e:	f107 0308 	add.w	r3, r7, #8
 8001952:	2201      	movs	r2, #1
 8001954:	9200      	str	r2, [sp, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	21ae      	movs	r1, #174	@ 0xae
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fda5 	bl	80014aa <Write_Command>

	data[0] = 0x63;
 8001960:	2363      	movs	r3, #99	@ 0x63
 8001962:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xCD, 1, data, 1);
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	2201      	movs	r2, #1
 800196a:	9200      	str	r2, [sp, #0]
 800196c:	2201      	movs	r2, #1
 800196e:	21cd      	movs	r1, #205	@ 0xcd
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f7ff fd9a 	bl	80014aa <Write_Command>


	    data[0] = 0x07;
 8001976:	2307      	movs	r3, #7
 8001978:	723b      	strb	r3, [r7, #8]
	    data[1] = 0x07;
 800197a:	2307      	movs	r3, #7
 800197c:	727b      	strb	r3, [r7, #9]
	    data[2] = 0x04;
 800197e:	2304      	movs	r3, #4
 8001980:	72bb      	strb	r3, [r7, #10]
	    data[3] = 0x0e;
 8001982:	230e      	movs	r3, #14
 8001984:	72fb      	strb	r3, [r7, #11]
	    data[4] = 0x0f;
 8001986:	230f      	movs	r3, #15
 8001988:	733b      	strb	r3, [r7, #12]
	    data[5] = 0x09;
 800198a:	2309      	movs	r3, #9
 800198c:	737b      	strb	r3, [r7, #13]
	    data[6] = 0x07;
 800198e:	2307      	movs	r3, #7
 8001990:	73bb      	strb	r3, [r7, #14]
	    data[7] = 0x08;
 8001992:	2308      	movs	r3, #8
 8001994:	73fb      	strb	r3, [r7, #15]
	    data[8] = 0x03;
 8001996:	2303      	movs	r3, #3
 8001998:	743b      	strb	r3, [r7, #16]
		Write_Command(config, 0x70, 1, data, 9);
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	2209      	movs	r2, #9
 80019a0:	9200      	str	r2, [sp, #0]
 80019a2:	2201      	movs	r2, #1
 80019a4:	2170      	movs	r1, #112	@ 0x70
 80019a6:	6878      	ldr	r0, [r7, #4]
 80019a8:	f7ff fd7f 	bl	80014aa <Write_Command>


	data[0] = 0x34;
 80019ac:	2334      	movs	r3, #52	@ 0x34
 80019ae:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0xE8, 1, data, 1);
 80019b0:	f107 0308 	add.w	r3, r7, #8
 80019b4:	2201      	movs	r2, #1
 80019b6:	9200      	str	r2, [sp, #0]
 80019b8:	2201      	movs	r2, #1
 80019ba:	21e8      	movs	r1, #232	@ 0xe8
 80019bc:	6878      	ldr	r0, [r7, #4]
 80019be:	f7ff fd74 	bl	80014aa <Write_Command>

	data[0] = 0x18;
 80019c2:	2318      	movs	r3, #24
 80019c4:	723b      	strb	r3, [r7, #8]
	data[1] = 0x0D;
 80019c6:	230d      	movs	r3, #13
 80019c8:	727b      	strb	r3, [r7, #9]
	data[2] = 0x71;
 80019ca:	2371      	movs	r3, #113	@ 0x71
 80019cc:	72bb      	strb	r3, [r7, #10]
	data[3] = 0xED;
 80019ce:	23ed      	movs	r3, #237	@ 0xed
 80019d0:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x70;
 80019d2:	2370      	movs	r3, #112	@ 0x70
 80019d4:	733b      	strb	r3, [r7, #12]
	data[5] = 0x70;
 80019d6:	2370      	movs	r3, #112	@ 0x70
 80019d8:	737b      	strb	r3, [r7, #13]
	data[6] = 0x18;
 80019da:	2318      	movs	r3, #24
 80019dc:	73bb      	strb	r3, [r7, #14]
	data[7] = 0x0F;
 80019de:	230f      	movs	r3, #15
 80019e0:	73fb      	strb	r3, [r7, #15]
	data[8] = 0x71;
 80019e2:	2371      	movs	r3, #113	@ 0x71
 80019e4:	743b      	strb	r3, [r7, #16]
	data[9] = 0xEF;
 80019e6:	23ef      	movs	r3, #239	@ 0xef
 80019e8:	747b      	strb	r3, [r7, #17]
	data[10] = 0x70;
 80019ea:	2370      	movs	r3, #112	@ 0x70
 80019ec:	74bb      	strb	r3, [r7, #18]
	data[11] = 0x70;
 80019ee:	2370      	movs	r3, #112	@ 0x70
 80019f0:	74fb      	strb	r3, [r7, #19]
	Write_Command(config, 0x62, 1, data, 12);
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	220c      	movs	r2, #12
 80019f8:	9200      	str	r2, [sp, #0]
 80019fa:	2201      	movs	r2, #1
 80019fc:	2162      	movs	r1, #98	@ 0x62
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f7ff fd53 	bl	80014aa <Write_Command>


	//
	data[0] = 0x18;
 8001a04:	2318      	movs	r3, #24
 8001a06:	723b      	strb	r3, [r7, #8]
	data[1] = 0x11;
 8001a08:	2311      	movs	r3, #17
 8001a0a:	727b      	strb	r3, [r7, #9]
	data[2] = 0x71;
 8001a0c:	2371      	movs	r3, #113	@ 0x71
 8001a0e:	72bb      	strb	r3, [r7, #10]
	data[3] = 0xf1;
 8001a10:	23f1      	movs	r3, #241	@ 0xf1
 8001a12:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x70;
 8001a14:	2370      	movs	r3, #112	@ 0x70
 8001a16:	733b      	strb	r3, [r7, #12]
	data[5] = 0x70;
 8001a18:	2370      	movs	r3, #112	@ 0x70
 8001a1a:	737b      	strb	r3, [r7, #13]
	data[6] = 0x18;
 8001a1c:	2318      	movs	r3, #24
 8001a1e:	73bb      	strb	r3, [r7, #14]
	data[7] = 0x13;
 8001a20:	2313      	movs	r3, #19
 8001a22:	73fb      	strb	r3, [r7, #15]
	data[8] = 0x71;
 8001a24:	2371      	movs	r3, #113	@ 0x71
 8001a26:	743b      	strb	r3, [r7, #16]
	data[9] = 0xf3;
 8001a28:	23f3      	movs	r3, #243	@ 0xf3
 8001a2a:	747b      	strb	r3, [r7, #17]
	data[10] = 0x70;
 8001a2c:	2370      	movs	r3, #112	@ 0x70
 8001a2e:	74bb      	strb	r3, [r7, #18]
	data[11] = 0x70;
 8001a30:	2370      	movs	r3, #112	@ 0x70
 8001a32:	74fb      	strb	r3, [r7, #19]
	Write_Command(config, 0x63, 1, data, 12);
 8001a34:	f107 0308 	add.w	r3, r7, #8
 8001a38:	220c      	movs	r2, #12
 8001a3a:	9200      	str	r2, [sp, #0]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	2163      	movs	r1, #99	@ 0x63
 8001a40:	6878      	ldr	r0, [r7, #4]
 8001a42:	f7ff fd32 	bl	80014aa <Write_Command>


	//
	data[0] = 0x28;
 8001a46:	2328      	movs	r3, #40	@ 0x28
 8001a48:	723b      	strb	r3, [r7, #8]
	data[1] = 0x29;
 8001a4a:	2329      	movs	r3, #41	@ 0x29
 8001a4c:	727b      	strb	r3, [r7, #9]
	data[2] = 0xf1;
 8001a4e:	23f1      	movs	r3, #241	@ 0xf1
 8001a50:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x01;
 8001a52:	2301      	movs	r3, #1
 8001a54:	72fb      	strb	r3, [r7, #11]
	data[4] = 0xf1;
 8001a56:	23f1      	movs	r3, #241	@ 0xf1
 8001a58:	733b      	strb	r3, [r7, #12]
	data[5] = 0x00;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	737b      	strb	r3, [r7, #13]
	data[6] = 0x07;
 8001a5e:	2307      	movs	r3, #7
 8001a60:	73bb      	strb	r3, [r7, #14]
	Write_Command(config, 0x64, 1, data, 7);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	2207      	movs	r2, #7
 8001a68:	9200      	str	r2, [sp, #0]
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	2164      	movs	r1, #100	@ 0x64
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	f7ff fd1b 	bl	80014aa <Write_Command>


	    //
	data[0] = 0x3c;
 8001a74:	233c      	movs	r3, #60	@ 0x3c
 8001a76:	723b      	strb	r3, [r7, #8]
	data[1] = 0x00;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	727b      	strb	r3, [r7, #9]
	data[2] = 0xcd;
 8001a7c:	23cd      	movs	r3, #205	@ 0xcd
 8001a7e:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x67;
 8001a80:	2367      	movs	r3, #103	@ 0x67
 8001a82:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x45;
 8001a84:	2345      	movs	r3, #69	@ 0x45
 8001a86:	733b      	strb	r3, [r7, #12]
	data[5] = 0x45;
 8001a88:	2345      	movs	r3, #69	@ 0x45
 8001a8a:	737b      	strb	r3, [r7, #13]
	data[6] = 0x10;
 8001a8c:	2310      	movs	r3, #16
 8001a8e:	73bb      	strb	r3, [r7, #14]
	data[7] = 0x00;
 8001a90:	2300      	movs	r3, #0
 8001a92:	73fb      	strb	r3, [r7, #15]
	data[8] = 0x00;
 8001a94:	2300      	movs	r3, #0
 8001a96:	743b      	strb	r3, [r7, #16]
	data[9] = 0x00;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	747b      	strb	r3, [r7, #17]
	Write_Command(config, 0x66, 1, data, 10);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	9200      	str	r2, [sp, #0]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2166      	movs	r1, #102	@ 0x66
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f7ff fcfe 	bl	80014aa <Write_Command>


	    //
	data[0] = 0x00;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	723b      	strb	r3, [r7, #8]
	data[1] = 0x3c;
 8001ab2:	233c      	movs	r3, #60	@ 0x3c
 8001ab4:	727b      	strb	r3, [r7, #9]
	data[2] = 0x00;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x00;
 8001aba:	2300      	movs	r3, #0
 8001abc:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x00;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	733b      	strb	r3, [r7, #12]
	data[5] = 0x01;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	737b      	strb	r3, [r7, #13]
	data[6] = 0x54;
 8001ac6:	2354      	movs	r3, #84	@ 0x54
 8001ac8:	73bb      	strb	r3, [r7, #14]
	data[7] = 0x10;
 8001aca:	2310      	movs	r3, #16
 8001acc:	73fb      	strb	r3, [r7, #15]
	data[8] = 0x32;
 8001ace:	2332      	movs	r3, #50	@ 0x32
 8001ad0:	743b      	strb	r3, [r7, #16]
	data[9] = 0x98;
 8001ad2:	2398      	movs	r3, #152	@ 0x98
 8001ad4:	747b      	strb	r3, [r7, #17]
	Write_Command(config, 0x67, 1, data, 10);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	220a      	movs	r2, #10
 8001adc:	9200      	str	r2, [sp, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	2167      	movs	r1, #103	@ 0x67
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff fce1 	bl	80014aa <Write_Command>

	    //
	data[0] = 0x10;
 8001ae8:	2310      	movs	r3, #16
 8001aea:	723b      	strb	r3, [r7, #8]
	data[1] = 0x85;
 8001aec:	2385      	movs	r3, #133	@ 0x85
 8001aee:	727b      	strb	r3, [r7, #9]
	data[2] = 0x80;
 8001af0:	2380      	movs	r3, #128	@ 0x80
 8001af2:	72bb      	strb	r3, [r7, #10]
	data[3] = 0x00;
 8001af4:	2300      	movs	r3, #0
 8001af6:	72fb      	strb	r3, [r7, #11]
	data[4] = 0x00;
 8001af8:	2300      	movs	r3, #0
 8001afa:	733b      	strb	r3, [r7, #12]
	data[5] = 0x4e;
 8001afc:	234e      	movs	r3, #78	@ 0x4e
 8001afe:	737b      	strb	r3, [r7, #13]
	data[6] = 0x00;
 8001b00:	2300      	movs	r3, #0
 8001b02:	73bb      	strb	r3, [r7, #14]
	Write_Command(config, 0x74, 1, data, 7);
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	2207      	movs	r2, #7
 8001b0a:	9200      	str	r2, [sp, #0]
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	2174      	movs	r1, #116	@ 0x74
 8001b10:	6878      	ldr	r0, [r7, #4]
 8001b12:	f7ff fcca 	bl	80014aa <Write_Command>

	//
	data[0] = 0x3e;
 8001b16:	233e      	movs	r3, #62	@ 0x3e
 8001b18:	723b      	strb	r3, [r7, #8]
	data[1] = 0x07;
 8001b1a:	2307      	movs	r3, #7
 8001b1c:	727b      	strb	r3, [r7, #9]
	Write_Command(config, 0x98, 1, data, 2);
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	2202      	movs	r2, #2
 8001b24:	9200      	str	r2, [sp, #0]
 8001b26:	2201      	movs	r2, #1
 8001b28:	2198      	movs	r1, #152	@ 0x98
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff fcbd 	bl	80014aa <Write_Command>

//	    Command(config,0x35);
	Write_Command(config, 0x35, 0, NULL, 0);
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	2135      	movs	r1, #53	@ 0x35
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fcb5 	bl	80014aa <Write_Command>

//	    Command(config,0x21);
	Write_Command(config, 0x21, 0, NULL, 0);
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	2121      	movs	r1, #33	@ 0x21
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f7ff fcad 	bl	80014aa <Write_Command>


	data[0] = 0x80;
 8001b50:	2380      	movs	r3, #128	@ 0x80
 8001b52:	723b      	strb	r3, [r7, #8]
	Write_Command(config, 0x11, 1, data, 1);
 8001b54:	f107 0308 	add.w	r3, r7, #8
 8001b58:	2201      	movs	r2, #1
 8001b5a:	9200      	str	r2, [sp, #0]
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	2111      	movs	r1, #17
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff fca2 	bl	80014aa <Write_Command>
	Delay_ms(120);
 8001b66:	ed1f 0a94 	vldr	s0, [pc, #-592]	@ 8001918 <GC9A01_Init+0x3ec>
 8001b6a:	f7ff fc03 	bl	8001374 <Delay_ms>

	data[0] = 0x80;
 8001b6e:	2380      	movs	r3, #128	@ 0x80
 8001b70:	723b      	strb	r3, [r7, #8]
	data[1] = 0x00;
 8001b72:	2300      	movs	r3, #0
 8001b74:	727b      	strb	r3, [r7, #9]
	Write_Command(config, 0x29, 1, data, 2);
 8001b76:	f107 0308 	add.w	r3, r7, #8
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	9200      	str	r2, [sp, #0]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	2129      	movs	r1, #41	@ 0x29
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff fc91 	bl	80014aa <Write_Command>
	Delay_ms(20);
 8001b88:	eeb3 0a04 	vmov.f32	s0, #52	@ 0x41a00000  20.0
 8001b8c:	f7ff fbf2 	bl	8001374 <Delay_ms>
}
 8001b90:	bf00      	nop
 8001b92:	371c      	adds	r7, #28
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b98 <GC9A01_Set_Frame>:
	GC9A01_Set_Window(config, x, y, 1, 1);
	GC9A01_Write_Continue(config, temp, sizeof(temp));
}

void GC9A01_Set_Frame(GC9A01_Typedef *config,struct GC9A01_frame frame)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af02      	add	r7, sp, #8
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	1d3b      	adds	r3, r7, #4
 8001ba2:	e883 0006 	stmia.w	r3, {r1, r2}
	uint8_t datax[4], datay[4];

    datax[0] = (frame.start.X >> 8) & 0xFF;
 8001ba6:	88bb      	ldrh	r3, [r7, #4]
 8001ba8:	0a1b      	lsrs	r3, r3, #8
 8001baa:	b29b      	uxth	r3, r3
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	753b      	strb	r3, [r7, #20]
    datax[1] = frame.start.X & 0xFF;
 8001bb0:	88bb      	ldrh	r3, [r7, #4]
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	757b      	strb	r3, [r7, #21]
    datax[2] = (frame.end.X >> 8) & 0xFF;
 8001bb6:	893b      	ldrh	r3, [r7, #8]
 8001bb8:	0a1b      	lsrs	r3, r3, #8
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	75bb      	strb	r3, [r7, #22]
    datax[3] = frame.end.X & 0xFF;
 8001bc0:	893b      	ldrh	r3, [r7, #8]
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	75fb      	strb	r3, [r7, #23]

    Write_Command(config, COL_ADDR_SET, 1, datax, 4);
 8001bc6:	f107 0314 	add.w	r3, r7, #20
 8001bca:	2204      	movs	r2, #4
 8001bcc:	9200      	str	r2, [sp, #0]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	212a      	movs	r1, #42	@ 0x2a
 8001bd2:	68f8      	ldr	r0, [r7, #12]
 8001bd4:	f7ff fc69 	bl	80014aa <Write_Command>

    datay[0] = (frame.start.Y >> 8) & 0xFF;
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	743b      	strb	r3, [r7, #16]
    datay[1] = frame.start.Y & 0xFF;
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	747b      	strb	r3, [r7, #17]
    datay[2] = (frame.end.Y >> 8) & 0xFF;
 8001be8:	897b      	ldrh	r3, [r7, #10]
 8001bea:	0a1b      	lsrs	r3, r3, #8
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	74bb      	strb	r3, [r7, #18]
    datay[3] = frame.end.Y & 0xFF;
 8001bf2:	897b      	ldrh	r3, [r7, #10]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	74fb      	strb	r3, [r7, #19]

    Write_Command(config, ROW_ADDR_SET, 1, datay, 4);
 8001bf8:	f107 0310 	add.w	r3, r7, #16
 8001bfc:	2204      	movs	r2, #4
 8001bfe:	9200      	str	r2, [sp, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	212b      	movs	r1, #43	@ 0x2b
 8001c04:	68f8      	ldr	r0, [r7, #12]
 8001c06:	f7ff fc50 	bl	80014aa <Write_Command>
    Write_Command(config, 0x2C, 0, NULL, 0);
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	9300      	str	r3, [sp, #0]
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2200      	movs	r2, #0
 8001c12:	212c      	movs	r1, #44	@ 0x2c
 8001c14:	68f8      	ldr	r0, [r7, #12]
 8001c16:	f7ff fc48 	bl	80014aa <Write_Command>

}
 8001c1a:	bf00      	nop
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}

08001c22 <GC9A01_Splash_Screen>:
//	SPI_TRX_Byte(&(config->SPI_Driver), temp[i]);
//	SPI_NSS_High(&(config->SPI_Driver));
}

void GC9A01_Splash_Screen(GC9A01_Typedef *config, uint16_t color)
{
 8001c22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001c26:	b08d      	sub	sp, #52	@ 0x34
 8001c28:	af04      	add	r7, sp, #16
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	807b      	strh	r3, [r7, #2]
 8001c30:	466b      	mov	r3, sp
 8001c32:	461e      	mov	r6, r3
	uint16_t length = (240*240);
 8001c34:	f44f 4361 	mov.w	r3, #57600	@ 0xe100
 8001c38:	83fb      	strh	r3, [r7, #30]
	uint16_t buffer[length];
 8001c3a:	8bf9      	ldrh	r1, [r7, #30]
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	b28b      	uxth	r3, r1
 8001c44:	2200      	movs	r2, #0
 8001c46:	4698      	mov	r8, r3
 8001c48:	4691      	mov	r9, r2
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	f04f 0300 	mov.w	r3, #0
 8001c52:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8001c56:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 8001c5a:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8001c5e:	b28b      	uxth	r3, r1
 8001c60:	2200      	movs	r2, #0
 8001c62:	461c      	mov	r4, r3
 8001c64:	4615      	mov	r5, r2
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	012b      	lsls	r3, r5, #4
 8001c70:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c74:	0122      	lsls	r2, r4, #4
 8001c76:	460b      	mov	r3, r1
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	3307      	adds	r3, #7
 8001c7c:	08db      	lsrs	r3, r3, #3
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	ebad 0d03 	sub.w	sp, sp, r3
 8001c84:	ab04      	add	r3, sp, #16
 8001c86:	3301      	adds	r3, #1
 8001c88:	085b      	lsrs	r3, r3, #1
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	617b      	str	r3, [r7, #20]
	uint16_t _color[2];
	_color[0]= color;
 8001c8e:	887b      	ldrh	r3, [r7, #2]
 8001c90:	823b      	strh	r3, [r7, #16]


	DMA_Memory_To_Memory_Transfer((uint32_t)&_color[0], 16, 16, (uint32_t)&buffer[0], 0, 1, length);
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	f107 0010 	add.w	r0, r7, #16
 8001c98:	8bfb      	ldrh	r3, [r7, #30]
 8001c9a:	9302      	str	r3, [sp, #8]
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	2110      	movs	r1, #16
 8001caa:	f7ff fab1 	bl	8001210 <DMA_Memory_To_Memory_Transfer>


	GC9A01_frame frame;
	frame.start.X = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	813b      	strh	r3, [r7, #8]
	frame.start.Y = 0;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	817b      	strh	r3, [r7, #10]
	frame.end.X = 240;
 8001cb6:	23f0      	movs	r3, #240	@ 0xf0
 8001cb8:	81bb      	strh	r3, [r7, #12]
	frame.end.Y = 240;
 8001cba:	23f0      	movs	r3, #240	@ 0xf0
 8001cbc:	81fb      	strh	r3, [r7, #14]
	GC9A01_Set_Frame(config, frame);
 8001cbe:	f107 0308 	add.w	r3, r7, #8
 8001cc2:	e893 0006 	ldmia.w	r3, {r1, r2}
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f7ff ff66 	bl	8001b98 <GC9A01_Set_Frame>


	Write_Command(config, MEM_WR_CONT, 0, NULL, 0);
 8001ccc:	2300      	movs	r3, #0
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	213c      	movs	r1, #60	@ 0x3c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff fbe7 	bl	80014aa <Write_Command>
	command_line_high(config);
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f7ff fba0 	bl	8001422 <command_line_high>
	config -> SPI_Driver.data_format = SPI_Configurations.Data_Format.Bit16;
 8001ce2:	230c      	movs	r3, #12
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	825a      	strh	r2, [r3, #18]
	SPI_Data_Format_Update(&(config->SPI_Driver));
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f001 fb87 	bl	8003400 <SPI_Data_Format_Update>
	SPI_NSS_Low(&(config->SPI_Driver));
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f001 fbac 	bl	8003452 <SPI_NSS_Low>
	SPI_TRX_Buffer(&(config->SPI_Driver), &buffer, NULL, length, 0);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	8bfb      	ldrh	r3, [r7, #30]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	9200      	str	r2, [sp, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	6979      	ldr	r1, [r7, #20]
 8001d06:	f001 f9c5 	bl	8003094 <SPI_TRX_Buffer>
	SPI_NSS_High(&(config->SPI_Driver));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f001 fb67 	bl	80033e0 <SPI_NSS_High>
 8001d12:	46b5      	mov	sp, r6
}
 8001d14:	bf00      	nop
 8001d16:	3724      	adds	r7, #36	@ 0x24
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08001d20 <GC9A01_Draw_Mercury>:

void GC9A01_Draw_Mercury(GC9A01_Typedef *config)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	f5ad 4d1c 	sub.w	sp, sp, #39936	@ 0x9c00
 8001d26:	b098      	sub	sp, #96	@ 0x60
 8001d28:	af02      	add	r7, sp, #8
 8001d2a:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001d2e:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001d32:	6018      	str	r0, [r3, #0]

	uint16_t lunar_map[] = {
 8001d34:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001d38:	f6a3 4348 	subw	r3, r3, #3144	@ 0xc48
 8001d3c:	4a44      	ldr	r2, [pc, #272]	@ (8001e50 <GC9A01_Draw_Mercury+0x130>)
 8001d3e:	4618      	mov	r0, r3
 8001d40:	4611      	mov	r1, r2
 8001d42:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001d46:	461a      	mov	r2, r3
 8001d48:	f001 fe18 	bl	800397c <memcpy>
			  0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xbe, 0xef, 0x7d, 0xe7, 0x3c, 0xe7, 0x3c, 0xe7, 0x3c, 0xe7, 0x3c, 0xe7, 0x1c, 0xe7, 0x1c, 0xe7, 0x1c, 0xe7, 0x1c, 0xe7, 0x1b, 0xe7, 0x1b, 0xe7, 0x1b, 0xe7, 0x1c, 0xe7, 0x3c, 0xf7, 0x9e, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff


	};

    size_t buffer_size = sizeof(lunar_map);
 8001d4c:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8001d50:	f507 421c 	add.w	r2, r7, #39936	@ 0x9c00
 8001d54:	f102 0254 	add.w	r2, r2, #84	@ 0x54
 8001d58:	6013      	str	r3, [r2, #0]

    // Calculate the number of elements in the buffer
    size_t num_elements = buffer_size / sizeof(uint16_t);
 8001d5a:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 8001d5e:	f103 0354 	add.w	r3, r3, #84	@ 0x54
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	085b      	lsrs	r3, r3, #1
 8001d66:	f507 421c 	add.w	r2, r7, #39936	@ 0x9c00
 8001d6a:	f102 0250 	add.w	r2, r2, #80	@ 0x50
 8001d6e:	6013      	str	r3, [r2, #0]

//	uint16_t length1 = (240*240);
//	uint16_t length2 = (240*240);

	GC9A01_frame frame;
	frame.start.X = 70;
 8001d70:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001d74:	f5a3 6345 	sub.w	r3, r3, #3152	@ 0xc50
 8001d78:	2246      	movs	r2, #70	@ 0x46
 8001d7a:	801a      	strh	r2, [r3, #0]
	frame.start.Y = 70;
 8001d7c:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001d80:	f5a3 6345 	sub.w	r3, r3, #3152	@ 0xc50
 8001d84:	2246      	movs	r2, #70	@ 0x46
 8001d86:	805a      	strh	r2, [r3, #2]
	frame.end.X = 170;
 8001d88:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001d8c:	f5a3 6345 	sub.w	r3, r3, #3152	@ 0xc50
 8001d90:	22aa      	movs	r2, #170	@ 0xaa
 8001d92:	809a      	strh	r2, [r3, #4]
	frame.end.Y = 170;
 8001d94:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001d98:	f5a3 6345 	sub.w	r3, r3, #3152	@ 0xc50
 8001d9c:	22aa      	movs	r2, #170	@ 0xaa
 8001d9e:	80da      	strh	r2, [r3, #6]
	GC9A01_Set_Frame(config, frame);
 8001da0:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001da4:	f5a3 6245 	sub.w	r2, r3, #3152	@ 0xc50
 8001da8:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001dac:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001db0:	ca06      	ldmia	r2, {r1, r2}
 8001db2:	6818      	ldr	r0, [r3, #0]
 8001db4:	f7ff fef0 	bl	8001b98 <GC9A01_Set_Frame>

	Write_Command(config, MEM_WR_CONT, 0, NULL, 0);
 8001db8:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001dbc:	f6a3 4054 	subw	r0, r3, #3156	@ 0xc54
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	213c      	movs	r1, #60	@ 0x3c
 8001dca:	6800      	ldr	r0, [r0, #0]
 8001dcc:	f7ff fb6d 	bl	80014aa <Write_Command>
	command_line_high(config);
 8001dd0:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001dd4:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f7ff fb22 	bl	8001422 <command_line_high>
	config -> SPI_Driver.data_format = SPI_Configurations.Data_Format.Bit8;
 8001dde:	230b      	movs	r3, #11
 8001de0:	461a      	mov	r2, r3
 8001de2:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001de6:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	825a      	strh	r2, [r3, #18]
	SPI_Data_Format_Update(&(config->SPI_Driver));
 8001dee:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001df2:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f001 fb01 	bl	8003400 <SPI_Data_Format_Update>
	SPI_NSS_Low(&(config->SPI_Driver));
 8001dfe:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001e02:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f001 fb22 	bl	8003452 <SPI_NSS_Low>
	SPI_TRX_Buffer(&(config->SPI_Driver), (uint32_t)&lunar_map[0], NULL, (uint16_t)num_elements, 0);
 8001e0e:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001e12:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001e16:	6818      	ldr	r0, [r3, #0]
 8001e18:	f507 431c 	add.w	r3, r7, #39936	@ 0x9c00
 8001e1c:	f103 0350 	add.w	r3, r3, #80	@ 0x50
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001e28:	3948      	subs	r1, #72	@ 0x48
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	9200      	str	r2, [sp, #0]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f001 f930 	bl	8003094 <SPI_TRX_Buffer>
//	SPI_TRX_Buffer(&(config->SPI_Driver), &Mercury[length1], NULL, length2, 0);
	SPI_NSS_High(&(config->SPI_Driver));
 8001e34:	f607 4358 	addw	r3, r7, #3160	@ 0xc58
 8001e38:	f6a3 4354 	subw	r3, r3, #3156	@ 0xc54
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f001 face 	bl	80033e0 <SPI_NSS_High>
}
 8001e44:	bf00      	nop
 8001e46:	f507 471c 	add.w	r7, r7, #39936	@ 0x9c00
 8001e4a:	3758      	adds	r7, #88	@ 0x58
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	080039b0 	.word	0x080039b0

08001e54 <GPIO_Clock_Enable>:
 * @brief  Enables the clock for a specific GPIO port.
 * @param  PORT: Pointer to GPIO port base address.
 * @retval 0 on success, -1 on failure.
 */
int GPIO_Clock_Enable(GPIO_TypeDef *PORT)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	if(PORT == GPIOA)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	4a25      	ldr	r2, [pc, #148]	@ (8001ef4 <GPIO_Clock_Enable+0xa0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d106      	bne.n	8001e72 <GPIO_Clock_Enable+0x1e>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOAEN;
 8001e64:	4b24      	ldr	r3, [pc, #144]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001e66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e68:	4a23      	ldr	r2, [pc, #140]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e70:	e039      	b.n	8001ee6 <GPIO_Clock_Enable+0x92>
	} else 	if(PORT == GPIOB)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a21      	ldr	r2, [pc, #132]	@ (8001efc <GPIO_Clock_Enable+0xa8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d106      	bne.n	8001e88 <GPIO_Clock_Enable+0x34>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOBEN;
 8001e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7e:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001e80:	f043 0302 	orr.w	r3, r3, #2
 8001e84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e86:	e02e      	b.n	8001ee6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOC)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	@ (8001f00 <GPIO_Clock_Enable+0xac>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d106      	bne.n	8001e9e <GPIO_Clock_Enable+0x4a>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOCEN;
 8001e90:	4b19      	ldr	r3, [pc, #100]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e94:	4a18      	ldr	r2, [pc, #96]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001e96:	f043 0304 	orr.w	r3, r3, #4
 8001e9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9c:	e023      	b.n	8001ee6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOD)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a18      	ldr	r2, [pc, #96]	@ (8001f04 <GPIO_Clock_Enable+0xb0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d106      	bne.n	8001eb4 <GPIO_Clock_Enable+0x60>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIODEN;
 8001ea6:	4b14      	ldr	r3, [pc, #80]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eaa:	4a13      	ldr	r2, [pc, #76]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001eac:	f043 0308 	orr.w	r3, r3, #8
 8001eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb2:	e018      	b.n	8001ee6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOE)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	4a14      	ldr	r2, [pc, #80]	@ (8001f08 <GPIO_Clock_Enable+0xb4>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d106      	bne.n	8001eca <GPIO_Clock_Enable+0x76>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOEEN;
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001ec2:	f043 0310 	orr.w	r3, r3, #16
 8001ec6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec8:	e00d      	b.n	8001ee6 <GPIO_Clock_Enable+0x92>
	}else 	if(PORT == GPIOH)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a0f      	ldr	r2, [pc, #60]	@ (8001f0c <GPIO_Clock_Enable+0xb8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d106      	bne.n	8001ee0 <GPIO_Clock_Enable+0x8c>
	{
		RCC -> AHB1ENR   |=  RCC_AHB1ENR_GPIOHEN;
 8001ed2:	4b09      	ldr	r3, [pc, #36]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	4a08      	ldr	r2, [pc, #32]	@ (8001ef8 <GPIO_Clock_Enable+0xa4>)
 8001ed8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001edc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ede:	e002      	b.n	8001ee6 <GPIO_Clock_Enable+0x92>
	}else
	{
		return -1;
 8001ee0:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee4:	e000      	b.n	8001ee8 <GPIO_Clock_Enable+0x94>
	}

	return 1;
 8001ee6:	2301      	movs	r3, #1
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40020000 	.word	0x40020000
 8001ef8:	40023800 	.word	0x40023800
 8001efc:	40020400 	.word	0x40020400
 8001f00:	40020800 	.word	0x40020800
 8001f04:	40020c00 	.word	0x40020c00
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	40021c00 	.word	0x40021c00

08001f10 <GPIO_Pin_Init>:
 * @param  speed: Speed level (low, medium, high, very high).
 * @param  pull: Pull-up/pull-down configuration (none, pull-up, pull-down).
 * @param  alternate_function: Alternate function selection (0-15).
 */
void GPIO_Pin_Init(GPIO_TypeDef *Port, uint8_t pin, uint8_t mode, uint8_t output_type, uint8_t speed, uint8_t pull, uint8_t alternate_function)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	4608      	mov	r0, r1
 8001f1a:	4611      	mov	r1, r2
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4603      	mov	r3, r0
 8001f20:	70fb      	strb	r3, [r7, #3]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70bb      	strb	r3, [r7, #2]
 8001f26:	4613      	mov	r3, r2
 8001f28:	707b      	strb	r3, [r7, #1]
	GPIO_Clock_Enable(Port);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7ff ff92 	bl	8001e54 <GPIO_Clock_Enable>
	Port -> MODER |= mode << (pin*2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	78b9      	ldrb	r1, [r7, #2]
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	0052      	lsls	r2, r2, #1
 8001f3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	601a      	str	r2, [r3, #0]
	Port -> OTYPER |= output_type << pin;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	7879      	ldrb	r1, [r7, #1]
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f50:	431a      	orrs	r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	605a      	str	r2, [r3, #4]
	Port -> OSPEEDR |= speed << (pin*2);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	7c39      	ldrb	r1, [r7, #16]
 8001f5c:	78fa      	ldrb	r2, [r7, #3]
 8001f5e:	0052      	lsls	r2, r2, #1
 8001f60:	fa01 f202 	lsl.w	r2, r1, r2
 8001f64:	431a      	orrs	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	609a      	str	r2, [r3, #8]
	Port -> PUPDR |= pull << (pin*2);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	7d39      	ldrb	r1, [r7, #20]
 8001f70:	78fa      	ldrb	r2, [r7, #3]
 8001f72:	0052      	lsls	r2, r2, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	431a      	orrs	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	60da      	str	r2, [r3, #12]
	if(pin < 8) Port -> AFR[0] |= alternate_function << (pin*4);
 8001f7e:	78fb      	ldrb	r3, [r7, #3]
 8001f80:	2b07      	cmp	r3, #7
 8001f82:	d80a      	bhi.n	8001f9a <GPIO_Pin_Init+0x8a>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	7e39      	ldrb	r1, [r7, #24]
 8001f8a:	78fa      	ldrb	r2, [r7, #3]
 8001f8c:	0092      	lsls	r2, r2, #2
 8001f8e:	fa01 f202 	lsl.w	r2, r1, r2
 8001f92:	431a      	orrs	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	621a      	str	r2, [r3, #32]
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
}
 8001f98:	e00a      	b.n	8001fb0 <GPIO_Pin_Init+0xa0>
	else Port -> AFR[1] |= alternate_function << ((pin-8)*4);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f9e:	7e39      	ldrb	r1, [r7, #24]
 8001fa0:	78fa      	ldrb	r2, [r7, #3]
 8001fa2:	3a08      	subs	r2, #8
 8001fa4:	0092      	lsls	r2, r2, #2
 8001fa6:	fa01 f202 	lsl.w	r2, r1, r2
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001fb0:	bf00      	nop
 8001fb2:	3708      	adds	r7, #8
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <GPIO_Pin_Low>:
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
	Port -> ODR &= ~(1 << pin);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	2101      	movs	r1, #1
 8001fc8:	683a      	ldr	r2, [r7, #0]
 8001fca:	fa01 f202 	lsl.w	r2, r1, r2
 8001fce:	43d2      	mvns	r2, r2
 8001fd0:	401a      	ands	r2, r3
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	615a      	str	r2, [r3, #20]
}
 8001fd6:	bf00      	nop
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <GPIO_Pin_High>:
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	b083      	sub	sp, #12
 8001fe6:	af00      	add	r7, sp, #0
 8001fe8:	6078      	str	r0, [r7, #4]
 8001fea:	6039      	str	r1, [r7, #0]
	Port -> ODR |= 1 << pin;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	683a      	ldr	r2, [r7, #0]
 8001ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	615a      	str	r2, [r3, #20]
}
 8001ffe:	bf00      	nop
 8002000:	370c      	adds	r7, #12
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <xDMA1_TX_Init>:
DMA_Config xDMA3_TX;
DMA_Config xDMA3_RX;


static void xDMA1_TX_Init()
{
 800200c:	b598      	push	{r3, r4, r7, lr}
 800200e:	af00      	add	r7, sp, #0
	xDMA1_TX.Request = DMA_Configuration.Request.SPI1_TX;
 8002010:	4a12      	ldr	r2, [pc, #72]	@ (800205c <xDMA1_TX_Init+0x50>)
 8002012:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <xDMA1_TX_Init+0x54>)
 8002014:	4614      	mov	r4, r2
 8002016:	333c      	adds	r3, #60	@ 0x3c
 8002018:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800201c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002020:	2240      	movs	r2, #64	@ 0x40
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <xDMA1_TX_Init+0x50>)
 8002024:	611a      	str	r2, [r3, #16]
	xDMA1_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002026:	2200      	movs	r2, #0
 8002028:	4b0c      	ldr	r3, [pc, #48]	@ (800205c <xDMA1_TX_Init+0x50>)
 800202a:	619a      	str	r2, [r3, #24]
	xDMA1_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800202c:	2200      	movs	r2, #0
 800202e:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <xDMA1_TX_Init+0x50>)
 8002030:	60da      	str	r2, [r3, #12]
	xDMA1_TX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 8002032:	2210      	movs	r2, #16
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <xDMA1_TX_Init+0x50>)
 8002036:	61da      	str	r2, [r3, #28]
	xDMA1_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002038:	2300      	movs	r3, #0
 800203a:	b29a      	uxth	r2, r3
 800203c:	4b07      	ldr	r3, [pc, #28]	@ (800205c <xDMA1_TX_Init+0x50>)
 800203e:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002040:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b05      	ldr	r3, [pc, #20]	@ (800205c <xDMA1_TX_Init+0x50>)
 8002048:	841a      	strh	r2, [r3, #32]
	xDMA1_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 800204a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800204e:	4b03      	ldr	r3, [pc, #12]	@ (800205c <xDMA1_TX_Init+0x50>)
 8002050:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA1_TX);
 8002052:	4802      	ldr	r0, [pc, #8]	@ (800205c <xDMA1_TX_Init+0x50>)
 8002054:	f7fe fe9c 	bl	8000d90 <DMA_Init>
}
 8002058:	bf00      	nop
 800205a:	bd98      	pop	{r3, r4, r7, pc}
 800205c:	200000a0 	.word	0x200000a0
 8002060:	0800d5f8 	.word	0x0800d5f8

08002064 <xDMA2_TX_Init>:

static void xDMA2_TX_Init()
{
 8002064:	b598      	push	{r3, r4, r7, lr}
 8002066:	af00      	add	r7, sp, #0
	xDMA2_TX.Request = DMA_Configuration.Request.SPI2_TX;
 8002068:	4a12      	ldr	r2, [pc, #72]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 800206a:	4b13      	ldr	r3, [pc, #76]	@ (80020b8 <xDMA2_TX_Init+0x54>)
 800206c:	4614      	mov	r4, r2
 800206e:	3324      	adds	r3, #36	@ 0x24
 8002070:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002074:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002078:	2240      	movs	r2, #64	@ 0x40
 800207a:	4b0e      	ldr	r3, [pc, #56]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 800207c:	611a      	str	r2, [r3, #16]
	xDMA2_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800207e:	2200      	movs	r2, #0
 8002080:	4b0c      	ldr	r3, [pc, #48]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 8002082:	619a      	str	r2, [r3, #24]
	xDMA2_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002084:	2200      	movs	r2, #0
 8002086:	4b0b      	ldr	r3, [pc, #44]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 8002088:	60da      	str	r2, [r3, #12]
	xDMA2_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 800208a:	2200      	movs	r2, #0
 800208c:	4b09      	ldr	r3, [pc, #36]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 800208e:	61da      	str	r2, [r3, #28]
	xDMA2_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002090:	2300      	movs	r3, #0
 8002092:	b29a      	uxth	r2, r3
 8002094:	4b07      	ldr	r3, [pc, #28]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 8002096:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002098:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b05      	ldr	r3, [pc, #20]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 80020a0:	841a      	strh	r2, [r3, #32]
	xDMA2_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80020a2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020a6:	4b03      	ldr	r3, [pc, #12]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 80020a8:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA2_TX);
 80020aa:	4802      	ldr	r0, [pc, #8]	@ (80020b4 <xDMA2_TX_Init+0x50>)
 80020ac:	f7fe fe70 	bl	8000d90 <DMA_Init>
}
 80020b0:	bf00      	nop
 80020b2:	bd98      	pop	{r3, r4, r7, pc}
 80020b4:	20000110 	.word	0x20000110
 80020b8:	0800d5f8 	.word	0x0800d5f8

080020bc <xDMA3_TX_Init>:

static void xDMA3_TX_Init()
{
 80020bc:	b598      	push	{r3, r4, r7, lr}
 80020be:	af00      	add	r7, sp, #0
	xDMA3_TX.Request = DMA_Configuration.Request.SPI3_TX;
 80020c0:	4a12      	ldr	r2, [pc, #72]	@ (800210c <xDMA3_TX_Init+0x50>)
 80020c2:	4b13      	ldr	r3, [pc, #76]	@ (8002110 <xDMA3_TX_Init+0x54>)
 80020c4:	4614      	mov	r4, r2
 80020c6:	330c      	adds	r3, #12
 80020c8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80020cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA3_TX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80020d0:	2240      	movs	r2, #64	@ 0x40
 80020d2:	4b0e      	ldr	r3, [pc, #56]	@ (800210c <xDMA3_TX_Init+0x50>)
 80020d4:	611a      	str	r2, [r3, #16]
	xDMA3_TX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80020d6:	2200      	movs	r2, #0
 80020d8:	4b0c      	ldr	r3, [pc, #48]	@ (800210c <xDMA3_TX_Init+0x50>)
 80020da:	619a      	str	r2, [r3, #24]
	xDMA3_TX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80020dc:	2200      	movs	r2, #0
 80020de:	4b0b      	ldr	r3, [pc, #44]	@ (800210c <xDMA3_TX_Init+0x50>)
 80020e0:	60da      	str	r2, [r3, #12]
	xDMA3_TX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 80020e2:	2200      	movs	r2, #0
 80020e4:	4b09      	ldr	r3, [pc, #36]	@ (800210c <xDMA3_TX_Init+0x50>)
 80020e6:	61da      	str	r2, [r3, #28]
	xDMA3_TX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80020e8:	2300      	movs	r3, #0
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <xDMA3_TX_Init+0x50>)
 80020ee:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80020f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	4b05      	ldr	r3, [pc, #20]	@ (800210c <xDMA3_TX_Init+0x50>)
 80020f8:	841a      	strh	r2, [r3, #32]
	xDMA3_TX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80020fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020fe:	4b03      	ldr	r3, [pc, #12]	@ (800210c <xDMA3_TX_Init+0x50>)
 8002100:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_TX);
 8002102:	4802      	ldr	r0, [pc, #8]	@ (800210c <xDMA3_TX_Init+0x50>)
 8002104:	f7fe fe44 	bl	8000d90 <DMA_Init>
}
 8002108:	bf00      	nop
 800210a:	bd98      	pop	{r3, r4, r7, pc}
 800210c:	20000180 	.word	0x20000180
 8002110:	0800d5f8 	.word	0x0800d5f8

08002114 <xDMA1_RX_Init>:

static void xDMA1_RX_Init()
{
 8002114:	b598      	push	{r3, r4, r7, lr}
 8002116:	af00      	add	r7, sp, #0
	xDMA1_RX.Request = DMA_Configuration.Request.SPI1_RX;
 8002118:	4a12      	ldr	r2, [pc, #72]	@ (8002164 <xDMA1_RX_Init+0x50>)
 800211a:	4b13      	ldr	r3, [pc, #76]	@ (8002168 <xDMA1_RX_Init+0x54>)
 800211c:	4614      	mov	r4, r2
 800211e:	3330      	adds	r3, #48	@ 0x30
 8002120:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002124:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA1_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002128:	2240      	movs	r2, #64	@ 0x40
 800212a:	4b0e      	ldr	r3, [pc, #56]	@ (8002164 <xDMA1_RX_Init+0x50>)
 800212c:	611a      	str	r2, [r3, #16]
	xDMA1_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 800212e:	2200      	movs	r2, #0
 8002130:	4b0c      	ldr	r3, [pc, #48]	@ (8002164 <xDMA1_RX_Init+0x50>)
 8002132:	619a      	str	r2, [r3, #24]
	xDMA1_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 8002134:	2200      	movs	r2, #0
 8002136:	4b0b      	ldr	r3, [pc, #44]	@ (8002164 <xDMA1_RX_Init+0x50>)
 8002138:	60da      	str	r2, [r3, #12]
	xDMA1_RX.interrupts = DMA_Configuration.DMA_Interrupts.Transfer_Complete;
 800213a:	2210      	movs	r2, #16
 800213c:	4b09      	ldr	r3, [pc, #36]	@ (8002164 <xDMA1_RX_Init+0x50>)
 800213e:	61da      	str	r2, [r3, #28]
	xDMA1_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002140:	2300      	movs	r3, #0
 8002142:	b29a      	uxth	r2, r3
 8002144:	4b07      	ldr	r3, [pc, #28]	@ (8002164 <xDMA1_RX_Init+0x50>)
 8002146:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA1_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 8002148:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800214c:	b29a      	uxth	r2, r3
 800214e:	4b05      	ldr	r3, [pc, #20]	@ (8002164 <xDMA1_RX_Init+0x50>)
 8002150:	841a      	strh	r2, [r3, #32]
	xDMA1_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 8002152:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002156:	4b03      	ldr	r3, [pc, #12]	@ (8002164 <xDMA1_RX_Init+0x50>)
 8002158:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA1_RX);
 800215a:	4802      	ldr	r0, [pc, #8]	@ (8002164 <xDMA1_RX_Init+0x50>)
 800215c:	f7fe fe18 	bl	8000d90 <DMA_Init>
}
 8002160:	bf00      	nop
 8002162:	bd98      	pop	{r3, r4, r7, pc}
 8002164:	200000d8 	.word	0x200000d8
 8002168:	0800d5f8 	.word	0x0800d5f8

0800216c <xDMA2_RX_Init>:

static void xDMA2_RX_Init()
{
 800216c:	b598      	push	{r3, r4, r7, lr}
 800216e:	af00      	add	r7, sp, #0
	xDMA2_RX.Request = DMA_Configuration.Request.SPI2_RX;
 8002170:	4a12      	ldr	r2, [pc, #72]	@ (80021bc <xDMA2_RX_Init+0x50>)
 8002172:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <xDMA2_RX_Init+0x54>)
 8002174:	4614      	mov	r4, r2
 8002176:	3318      	adds	r3, #24
 8002178:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800217c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	xDMA2_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 8002180:	2240      	movs	r2, #64	@ 0x40
 8002182:	4b0e      	ldr	r3, [pc, #56]	@ (80021bc <xDMA2_RX_Init+0x50>)
 8002184:	611a      	str	r2, [r3, #16]
	xDMA2_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 8002186:	2200      	movs	r2, #0
 8002188:	4b0c      	ldr	r3, [pc, #48]	@ (80021bc <xDMA2_RX_Init+0x50>)
 800218a:	619a      	str	r2, [r3, #24]
	xDMA2_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 800218c:	2200      	movs	r2, #0
 800218e:	4b0b      	ldr	r3, [pc, #44]	@ (80021bc <xDMA2_RX_Init+0x50>)
 8002190:	60da      	str	r2, [r3, #12]
	xDMA2_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 8002192:	2200      	movs	r2, #0
 8002194:	4b09      	ldr	r3, [pc, #36]	@ (80021bc <xDMA2_RX_Init+0x50>)
 8002196:	61da      	str	r2, [r3, #28]
	xDMA2_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 8002198:	2300      	movs	r3, #0
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b07      	ldr	r3, [pc, #28]	@ (80021bc <xDMA2_RX_Init+0x50>)
 800219e:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA2_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80021a0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	4b05      	ldr	r3, [pc, #20]	@ (80021bc <xDMA2_RX_Init+0x50>)
 80021a8:	841a      	strh	r2, [r3, #32]
	xDMA2_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80021aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021ae:	4b03      	ldr	r3, [pc, #12]	@ (80021bc <xDMA2_RX_Init+0x50>)
 80021b0:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA2_RX);
 80021b2:	4802      	ldr	r0, [pc, #8]	@ (80021bc <xDMA2_RX_Init+0x50>)
 80021b4:	f7fe fdec 	bl	8000d90 <DMA_Init>
}
 80021b8:	bf00      	nop
 80021ba:	bd98      	pop	{r3, r4, r7, pc}
 80021bc:	20000148 	.word	0x20000148
 80021c0:	0800d5f8 	.word	0x0800d5f8

080021c4 <xDMA3_RX_Init>:

static void xDMA3_RX_Init()
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
	xDMA3_RX.Request = DMA_Configuration.Request.SPI3_RX;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 80021ca:	4a12      	ldr	r2, [pc, #72]	@ (8002214 <xDMA3_RX_Init+0x50>)
 80021cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80021ce:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	xDMA3_RX.transfer_direction = DMA_Configuration.Transfer_Direction.Memory_to_peripheral;
 80021d2:	2240      	movs	r2, #64	@ 0x40
 80021d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 80021d6:	611a      	str	r2, [r3, #16]
	xDMA3_RX.circular_mode = DMA_Configuration.Circular_Mode.Disable;
 80021d8:	2200      	movs	r2, #0
 80021da:	4b0d      	ldr	r3, [pc, #52]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 80021dc:	619a      	str	r2, [r3, #24]
	xDMA3_RX.flow_control = DMA_Configuration.Flow_Control.DMA_Control;
 80021de:	2200      	movs	r2, #0
 80021e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 80021e2:	60da      	str	r2, [r3, #12]
	xDMA3_RX.interrupts = DMA_Configuration.DMA_Interrupts.Disable;
 80021e4:	2200      	movs	r2, #0
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 80021e8:	61da      	str	r2, [r3, #28]
	xDMA3_RX.peripheral_pointer_increment = DMA_Configuration.Peripheral_Pointer_Increment.Disable;
 80021ea:	2300      	movs	r3, #0
 80021ec:	b29a      	uxth	r2, r3
 80021ee:	4b08      	ldr	r3, [pc, #32]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 80021f0:	845a      	strh	r2, [r3, #34]	@ 0x22
	xDMA3_RX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 80021f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021f6:	b29a      	uxth	r2, r3
 80021f8:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 80021fa:	841a      	strh	r2, [r3, #32]
	xDMA3_RX.priority_level = DMA_Configuration.Priority_Level.Very_high;
 80021fc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002200:	4b03      	ldr	r3, [pc, #12]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 8002202:	615a      	str	r2, [r3, #20]
	DMA_Init(&xDMA3_RX);
 8002204:	4802      	ldr	r0, [pc, #8]	@ (8002210 <xDMA3_RX_Init+0x4c>)
 8002206:	f7fe fdc3 	bl	8000d90 <DMA_Init>
}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200001b8 	.word	0x200001b8
 8002214:	0800d5f8 	.word	0x0800d5f8

08002218 <SPI_Clock_Enable>:

int8_t SPI_Clock_Enable(SPI_Config *config)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	int8_t retval = 0;
 8002220:	2300      	movs	r3, #0
 8002222:	73fb      	strb	r3, [r7, #15]
	if(config ->Port == SPI1)RCC -> APB2ENR |= RCC_APB2ENR_SPI1EN;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a14      	ldr	r2, [pc, #80]	@ (800227c <SPI_Clock_Enable+0x64>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d105      	bne.n	800223a <SPI_Clock_Enable+0x22>
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <SPI_Clock_Enable+0x68>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	4a13      	ldr	r2, [pc, #76]	@ (8002280 <SPI_Clock_Enable+0x68>)
 8002234:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002238:	6453      	str	r3, [r2, #68]	@ 0x44
	if(config ->Port == SPI2)RCC -> APB1ENR |= RCC_APB1ENR_SPI2EN;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a11      	ldr	r2, [pc, #68]	@ (8002284 <SPI_Clock_Enable+0x6c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d105      	bne.n	8002250 <SPI_Clock_Enable+0x38>
 8002244:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <SPI_Clock_Enable+0x68>)
 8002246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002248:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <SPI_Clock_Enable+0x68>)
 800224a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800224e:	6413      	str	r3, [r2, #64]	@ 0x40
	if(config ->Port == SPI3)RCC -> APB1ENR |= RCC_APB1ENR_SPI3EN;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <SPI_Clock_Enable+0x70>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d106      	bne.n	8002268 <SPI_Clock_Enable+0x50>
 800225a:	4b09      	ldr	r3, [pc, #36]	@ (8002280 <SPI_Clock_Enable+0x68>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225e:	4a08      	ldr	r2, [pc, #32]	@ (8002280 <SPI_Clock_Enable+0x68>)
 8002260:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002264:	6413      	str	r3, [r2, #64]	@ 0x40
 8002266:	e001      	b.n	800226c <SPI_Clock_Enable+0x54>
	else
		retval = -1;
 8002268:	23ff      	movs	r3, #255	@ 0xff
 800226a:	73fb      	strb	r3, [r7, #15]
	return retval;
 800226c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40013000 	.word	0x40013000
 8002280:	40023800 	.word	0x40023800
 8002284:	40003800 	.word	0x40003800
 8002288:	40003c00 	.word	0x40003c00

0800228c <SPI_Pin_Init>:
	return retval;
}


static void SPI_Pin_Init(SPI_Config *config)
{
 800228c:	b590      	push	{r4, r7, lr}
 800228e:	b087      	sub	sp, #28
 8002290:	af04      	add	r7, sp, #16
 8002292:	6078      	str	r0, [r7, #4]
	if(config -> Port == SPI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4aa2      	ldr	r2, [pc, #648]	@ (8002524 <SPI_Pin_Init+0x298>)
 800229a:	4293      	cmp	r3, r2
 800229c:	f040 816c 	bne.w	8002578 <SPI_Pin_Init+0x2ec>
	{
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	89db      	ldrh	r3, [r3, #14]
 80022a4:	220b      	movs	r2, #11
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d004      	beq.n	80022b4 <SPI_Pin_Init+0x28>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	89db      	ldrh	r3, [r3, #14]
 80022ae:	220c      	movs	r2, #12
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d17d      	bne.n	80023b0 <SPI_Pin_Init+0x124>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	791b      	ldrb	r3, [r3, #4]
 80022b8:	220f      	movs	r2, #15
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d10e      	bne.n	80022dc <SPI_Pin_Init+0x50>
 80022be:	2002      	movs	r0, #2
 80022c0:	2400      	movs	r4, #0
 80022c2:	2303      	movs	r3, #3
 80022c4:	2200      	movs	r2, #0
 80022c6:	2105      	movs	r1, #5
 80022c8:	9102      	str	r1, [sp, #8]
 80022ca:	9201      	str	r2, [sp, #4]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4623      	mov	r3, r4
 80022d0:	4602      	mov	r2, r0
 80022d2:	2105      	movs	r1, #5
 80022d4:	4894      	ldr	r0, [pc, #592]	@ (8002528 <SPI_Pin_Init+0x29c>)
 80022d6:	f7ff fe1b 	bl	8001f10 <GPIO_Pin_Init>
 80022da:	e012      	b.n	8002302 <SPI_Pin_Init+0x76>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	791b      	ldrb	r3, [r3, #4]
 80022e0:	2221      	movs	r2, #33	@ 0x21
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d10d      	bne.n	8002302 <SPI_Pin_Init+0x76>
 80022e6:	2002      	movs	r0, #2
 80022e8:	2400      	movs	r4, #0
 80022ea:	2303      	movs	r3, #3
 80022ec:	2200      	movs	r2, #0
 80022ee:	2105      	movs	r1, #5
 80022f0:	9102      	str	r1, [sp, #8]
 80022f2:	9201      	str	r2, [sp, #4]
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	4623      	mov	r3, r4
 80022f8:	4602      	mov	r2, r0
 80022fa:	2103      	movs	r1, #3
 80022fc:	488b      	ldr	r0, [pc, #556]	@ (800252c <SPI_Pin_Init+0x2a0>)
 80022fe:	f7ff fe07 	bl	8001f10 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	799b      	ldrb	r3, [r3, #6]
 8002306:	2210      	movs	r2, #16
 8002308:	4293      	cmp	r3, r2
 800230a:	d10e      	bne.n	800232a <SPI_Pin_Init+0x9e>
 800230c:	2002      	movs	r0, #2
 800230e:	2400      	movs	r4, #0
 8002310:	2303      	movs	r3, #3
 8002312:	2200      	movs	r2, #0
 8002314:	2105      	movs	r1, #5
 8002316:	9102      	str	r1, [sp, #8]
 8002318:	9201      	str	r2, [sp, #4]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4623      	mov	r3, r4
 800231e:	4602      	mov	r2, r0
 8002320:	2106      	movs	r1, #6
 8002322:	4881      	ldr	r0, [pc, #516]	@ (8002528 <SPI_Pin_Init+0x29c>)
 8002324:	f7ff fdf4 	bl	8001f10 <GPIO_Pin_Init>
 8002328:	e012      	b.n	8002350 <SPI_Pin_Init+0xc4>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	799b      	ldrb	r3, [r3, #6]
 800232e:	2222      	movs	r2, #34	@ 0x22
 8002330:	4293      	cmp	r3, r2
 8002332:	d10d      	bne.n	8002350 <SPI_Pin_Init+0xc4>
 8002334:	2002      	movs	r0, #2
 8002336:	2400      	movs	r4, #0
 8002338:	2303      	movs	r3, #3
 800233a:	2200      	movs	r2, #0
 800233c:	2105      	movs	r1, #5
 800233e:	9102      	str	r1, [sp, #8]
 8002340:	9201      	str	r2, [sp, #4]
 8002342:	9300      	str	r3, [sp, #0]
 8002344:	4623      	mov	r3, r4
 8002346:	4602      	mov	r2, r0
 8002348:	2104      	movs	r1, #4
 800234a:	4878      	ldr	r0, [pc, #480]	@ (800252c <SPI_Pin_Init+0x2a0>)
 800234c:	f7ff fde0 	bl	8001f10 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	795b      	ldrb	r3, [r3, #5]
 8002354:	2211      	movs	r2, #17
 8002356:	4293      	cmp	r3, r2
 8002358:	d10e      	bne.n	8002378 <SPI_Pin_Init+0xec>
 800235a:	2002      	movs	r0, #2
 800235c:	2400      	movs	r4, #0
 800235e:	2303      	movs	r3, #3
 8002360:	2200      	movs	r2, #0
 8002362:	2105      	movs	r1, #5
 8002364:	9102      	str	r1, [sp, #8]
 8002366:	9201      	str	r2, [sp, #4]
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4623      	mov	r3, r4
 800236c:	4602      	mov	r2, r0
 800236e:	2107      	movs	r1, #7
 8002370:	486d      	ldr	r0, [pc, #436]	@ (8002528 <SPI_Pin_Init+0x29c>)
 8002372:	f7ff fdcd 	bl	8001f10 <GPIO_Pin_Init>
 8002376:	e012      	b.n	800239e <SPI_Pin_Init+0x112>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	795b      	ldrb	r3, [r3, #5]
 800237c:	2223      	movs	r2, #35	@ 0x23
 800237e:	4293      	cmp	r3, r2
 8002380:	d10d      	bne.n	800239e <SPI_Pin_Init+0x112>
 8002382:	2002      	movs	r0, #2
 8002384:	2400      	movs	r4, #0
 8002386:	2303      	movs	r3, #3
 8002388:	2200      	movs	r2, #0
 800238a:	2105      	movs	r1, #5
 800238c:	9102      	str	r1, [sp, #8]
 800238e:	9201      	str	r2, [sp, #4]
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	4623      	mov	r3, r4
 8002394:	4602      	mov	r2, r0
 8002396:	2105      	movs	r1, #5
 8002398:	4864      	ldr	r0, [pc, #400]	@ (800252c <SPI_Pin_Init+0x2a0>)
 800239a:	f7ff fdb9 	bl	8001f10 <GPIO_Pin_Init>

			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	681a      	ldr	r2, [r3, #0]
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e3b9      	b.n	8002b24 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	89db      	ldrh	r3, [r3, #14]
 80023b4:	220d      	movs	r2, #13
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <SPI_Pin_Init+0x142>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	89db      	ldrh	r3, [r3, #14]
 80023be:	2211      	movs	r2, #17
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d004      	beq.n	80023ce <SPI_Pin_Init+0x142>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	89db      	ldrh	r3, [r3, #14]
 80023c8:	2210      	movs	r2, #16
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d15e      	bne.n	800248c <SPI_Pin_Init+0x200>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	791b      	ldrb	r3, [r3, #4]
 80023d2:	220f      	movs	r2, #15
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10e      	bne.n	80023f6 <SPI_Pin_Init+0x16a>
 80023d8:	2002      	movs	r0, #2
 80023da:	2400      	movs	r4, #0
 80023dc:	2303      	movs	r3, #3
 80023de:	2200      	movs	r2, #0
 80023e0:	2105      	movs	r1, #5
 80023e2:	9102      	str	r1, [sp, #8]
 80023e4:	9201      	str	r2, [sp, #4]
 80023e6:	9300      	str	r3, [sp, #0]
 80023e8:	4623      	mov	r3, r4
 80023ea:	4602      	mov	r2, r0
 80023ec:	2105      	movs	r1, #5
 80023ee:	484e      	ldr	r0, [pc, #312]	@ (8002528 <SPI_Pin_Init+0x29c>)
 80023f0:	f7ff fd8e 	bl	8001f10 <GPIO_Pin_Init>
 80023f4:	e012      	b.n	800241c <SPI_Pin_Init+0x190>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	791b      	ldrb	r3, [r3, #4]
 80023fa:	2221      	movs	r2, #33	@ 0x21
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d10d      	bne.n	800241c <SPI_Pin_Init+0x190>
 8002400:	2002      	movs	r0, #2
 8002402:	2400      	movs	r4, #0
 8002404:	2303      	movs	r3, #3
 8002406:	2200      	movs	r2, #0
 8002408:	2105      	movs	r1, #5
 800240a:	9102      	str	r1, [sp, #8]
 800240c:	9201      	str	r2, [sp, #4]
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4623      	mov	r3, r4
 8002412:	4602      	mov	r2, r0
 8002414:	2103      	movs	r1, #3
 8002416:	4845      	ldr	r0, [pc, #276]	@ (800252c <SPI_Pin_Init+0x2a0>)
 8002418:	f7ff fd7a 	bl	8001f10 <GPIO_Pin_Init>

			if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PA7) GPIO_Pin_Init(GPIOA, 7, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	795b      	ldrb	r3, [r3, #5]
 8002420:	2211      	movs	r2, #17
 8002422:	4293      	cmp	r3, r2
 8002424:	d10e      	bne.n	8002444 <SPI_Pin_Init+0x1b8>
 8002426:	2002      	movs	r0, #2
 8002428:	2400      	movs	r4, #0
 800242a:	2303      	movs	r3, #3
 800242c:	2200      	movs	r2, #0
 800242e:	2105      	movs	r1, #5
 8002430:	9102      	str	r1, [sp, #8]
 8002432:	9201      	str	r2, [sp, #4]
 8002434:	9300      	str	r3, [sp, #0]
 8002436:	4623      	mov	r3, r4
 8002438:	4602      	mov	r2, r0
 800243a:	2107      	movs	r1, #7
 800243c:	483a      	ldr	r0, [pc, #232]	@ (8002528 <SPI_Pin_Init+0x29c>)
 800243e:	f7ff fd67 	bl	8001f10 <GPIO_Pin_Init>
 8002442:	e012      	b.n	800246a <SPI_Pin_Init+0x1de>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI1_.MOSI1.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	795b      	ldrb	r3, [r3, #5]
 8002448:	2223      	movs	r2, #35	@ 0x23
 800244a:	4293      	cmp	r3, r2
 800244c:	d10d      	bne.n	800246a <SPI_Pin_Init+0x1de>
 800244e:	2002      	movs	r0, #2
 8002450:	2400      	movs	r4, #0
 8002452:	2303      	movs	r3, #3
 8002454:	2200      	movs	r2, #0
 8002456:	2105      	movs	r1, #5
 8002458:	9102      	str	r1, [sp, #8]
 800245a:	9201      	str	r2, [sp, #4]
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	4623      	mov	r3, r4
 8002460:	4602      	mov	r2, r0
 8002462:	2105      	movs	r1, #5
 8002464:	4831      	ldr	r0, [pc, #196]	@ (800252c <SPI_Pin_Init+0x2a0>)
 8002466:	f7ff fd53 	bl	8001f10 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002478:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	681a      	ldr	r2, [r3, #0]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	e34b      	b.n	8002b24 <SPI_Pin_Init+0x898>
		}
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	89db      	ldrh	r3, [r3, #14]
 8002490:	220e      	movs	r2, #14
 8002492:	4293      	cmp	r3, r2
 8002494:	d00a      	beq.n	80024ac <SPI_Pin_Init+0x220>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	89db      	ldrh	r3, [r3, #14]
 800249a:	220f      	movs	r2, #15
 800249c:	4293      	cmp	r3, r2
 800249e:	d005      	beq.n	80024ac <SPI_Pin_Init+0x220>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	89db      	ldrh	r3, [r3, #14]
 80024a4:	2212      	movs	r2, #18
 80024a6:	4293      	cmp	r3, r2
 80024a8:	f040 833c 	bne.w	8002b24 <SPI_Pin_Init+0x898>
		{
			if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PA5) GPIO_Pin_Init(GPIOA, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	791b      	ldrb	r3, [r3, #4]
 80024b0:	220f      	movs	r2, #15
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d10e      	bne.n	80024d4 <SPI_Pin_Init+0x248>
 80024b6:	2002      	movs	r0, #2
 80024b8:	2400      	movs	r4, #0
 80024ba:	2303      	movs	r3, #3
 80024bc:	2200      	movs	r2, #0
 80024be:	2105      	movs	r1, #5
 80024c0:	9102      	str	r1, [sp, #8]
 80024c2:	9201      	str	r2, [sp, #4]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	4623      	mov	r3, r4
 80024c8:	4602      	mov	r2, r0
 80024ca:	2105      	movs	r1, #5
 80024cc:	4816      	ldr	r0, [pc, #88]	@ (8002528 <SPI_Pin_Init+0x29c>)
 80024ce:	f7ff fd1f 	bl	8001f10 <GPIO_Pin_Init>
 80024d2:	e012      	b.n	80024fa <SPI_Pin_Init+0x26e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI1_.CLK1.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	791b      	ldrb	r3, [r3, #4]
 80024d8:	2221      	movs	r2, #33	@ 0x21
 80024da:	4293      	cmp	r3, r2
 80024dc:	d10d      	bne.n	80024fa <SPI_Pin_Init+0x26e>
 80024de:	2002      	movs	r0, #2
 80024e0:	2400      	movs	r4, #0
 80024e2:	2303      	movs	r3, #3
 80024e4:	2200      	movs	r2, #0
 80024e6:	2105      	movs	r1, #5
 80024e8:	9102      	str	r1, [sp, #8]
 80024ea:	9201      	str	r2, [sp, #4]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	4623      	mov	r3, r4
 80024f0:	4602      	mov	r2, r0
 80024f2:	2103      	movs	r1, #3
 80024f4:	480d      	ldr	r0, [pc, #52]	@ (800252c <SPI_Pin_Init+0x2a0>)
 80024f6:	f7ff fd0b 	bl	8001f10 <GPIO_Pin_Init>

			if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PA6) GPIO_Pin_Init(GPIOA, 6, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	799b      	ldrb	r3, [r3, #6]
 80024fe:	2210      	movs	r2, #16
 8002500:	4293      	cmp	r3, r2
 8002502:	d115      	bne.n	8002530 <SPI_Pin_Init+0x2a4>
 8002504:	2002      	movs	r0, #2
 8002506:	2400      	movs	r4, #0
 8002508:	2303      	movs	r3, #3
 800250a:	2200      	movs	r2, #0
 800250c:	2105      	movs	r1, #5
 800250e:	9102      	str	r1, [sp, #8]
 8002510:	9201      	str	r2, [sp, #4]
 8002512:	9300      	str	r3, [sp, #0]
 8002514:	4623      	mov	r3, r4
 8002516:	4602      	mov	r2, r0
 8002518:	2106      	movs	r1, #6
 800251a:	4803      	ldr	r0, [pc, #12]	@ (8002528 <SPI_Pin_Init+0x29c>)
 800251c:	f7ff fcf8 	bl	8001f10 <GPIO_Pin_Init>
 8002520:	e019      	b.n	8002556 <SPI_Pin_Init+0x2ca>
 8002522:	bf00      	nop
 8002524:	40013000 	.word	0x40013000
 8002528:	40020000 	.word	0x40020000
 800252c:	40020400 	.word	0x40020400
			else if(config->miso_pin == SPI_Configurations.Pin._SPI1_.MISO1.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_1);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	799b      	ldrb	r3, [r3, #6]
 8002534:	2222      	movs	r2, #34	@ 0x22
 8002536:	4293      	cmp	r3, r2
 8002538:	d10d      	bne.n	8002556 <SPI_Pin_Init+0x2ca>
 800253a:	2002      	movs	r0, #2
 800253c:	2400      	movs	r4, #0
 800253e:	2303      	movs	r3, #3
 8002540:	2200      	movs	r2, #0
 8002542:	2105      	movs	r1, #5
 8002544:	9102      	str	r1, [sp, #8]
 8002546:	9201      	str	r2, [sp, #4]
 8002548:	9300      	str	r3, [sp, #0]
 800254a:	4623      	mov	r3, r4
 800254c:	4602      	mov	r2, r0
 800254e:	2104      	movs	r1, #4
 8002550:	489f      	ldr	r0, [pc, #636]	@ (80027d0 <SPI_Pin_Init+0x544>)
 8002552:	f7ff fcdd 	bl	8001f10 <GPIO_Pin_Init>

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002564:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002574:	601a      	str	r2, [r3, #0]

			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
		}
	}
}
 8002576:	e2d5      	b.n	8002b24 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI2)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a95      	ldr	r2, [pc, #596]	@ (80027d4 <SPI_Pin_Init+0x548>)
 800257e:	4293      	cmp	r3, r2
 8002580:	f040 8151 	bne.w	8002826 <SPI_Pin_Init+0x59a>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	89db      	ldrh	r3, [r3, #14]
 8002588:	220b      	movs	r2, #11
 800258a:	4293      	cmp	r3, r2
 800258c:	d005      	beq.n	800259a <SPI_Pin_Init+0x30e>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	89db      	ldrh	r3, [r3, #14]
 8002592:	220c      	movs	r2, #12
 8002594:	4293      	cmp	r3, r2
 8002596:	f040 8084 	bne.w	80026a2 <SPI_Pin_Init+0x416>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	791b      	ldrb	r3, [r3, #4]
 800259e:	461a      	mov	r2, r3
 80025a0:	2313      	movs	r3, #19
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d10e      	bne.n	80025c4 <SPI_Pin_Init+0x338>
 80025a6:	2002      	movs	r0, #2
 80025a8:	2400      	movs	r4, #0
 80025aa:	2303      	movs	r3, #3
 80025ac:	2200      	movs	r2, #0
 80025ae:	2105      	movs	r1, #5
 80025b0:	9102      	str	r1, [sp, #8]
 80025b2:	9201      	str	r2, [sp, #4]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4623      	mov	r3, r4
 80025b8:	4602      	mov	r2, r0
 80025ba:	210a      	movs	r1, #10
 80025bc:	4884      	ldr	r0, [pc, #528]	@ (80027d0 <SPI_Pin_Init+0x544>)
 80025be:	f7ff fca7 	bl	8001f10 <GPIO_Pin_Init>
 80025c2:	e013      	b.n	80025ec <SPI_Pin_Init+0x360>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	791b      	ldrb	r3, [r3, #4]
 80025c8:	461a      	mov	r2, r3
 80025ca:	2317      	movs	r3, #23
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d10d      	bne.n	80025ec <SPI_Pin_Init+0x360>
 80025d0:	2002      	movs	r0, #2
 80025d2:	2400      	movs	r4, #0
 80025d4:	2303      	movs	r3, #3
 80025d6:	2200      	movs	r2, #0
 80025d8:	2105      	movs	r1, #5
 80025da:	9102      	str	r1, [sp, #8]
 80025dc:	9201      	str	r2, [sp, #4]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	4623      	mov	r3, r4
 80025e2:	4602      	mov	r2, r0
 80025e4:	210d      	movs	r1, #13
 80025e6:	487a      	ldr	r0, [pc, #488]	@ (80027d0 <SPI_Pin_Init+0x544>)
 80025e8:	f7ff fc92 	bl	8001f10 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	799b      	ldrb	r3, [r3, #6]
 80025f0:	461a      	mov	r2, r3
 80025f2:	231b      	movs	r3, #27
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d10e      	bne.n	8002616 <SPI_Pin_Init+0x38a>
 80025f8:	2002      	movs	r0, #2
 80025fa:	2400      	movs	r4, #0
 80025fc:	2303      	movs	r3, #3
 80025fe:	2200      	movs	r2, #0
 8002600:	2105      	movs	r1, #5
 8002602:	9102      	str	r1, [sp, #8]
 8002604:	9201      	str	r2, [sp, #4]
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	4623      	mov	r3, r4
 800260a:	4602      	mov	r2, r0
 800260c:	210e      	movs	r1, #14
 800260e:	4870      	ldr	r0, [pc, #448]	@ (80027d0 <SPI_Pin_Init+0x544>)
 8002610:	f7ff fc7e 	bl	8001f10 <GPIO_Pin_Init>
 8002614:	e013      	b.n	800263e <SPI_Pin_Init+0x3b2>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	799b      	ldrb	r3, [r3, #6]
 800261a:	461a      	mov	r2, r3
 800261c:	2320      	movs	r3, #32
 800261e:	429a      	cmp	r2, r3
 8002620:	d10d      	bne.n	800263e <SPI_Pin_Init+0x3b2>
 8002622:	2002      	movs	r0, #2
 8002624:	2400      	movs	r4, #0
 8002626:	2303      	movs	r3, #3
 8002628:	2200      	movs	r2, #0
 800262a:	2105      	movs	r1, #5
 800262c:	9102      	str	r1, [sp, #8]
 800262e:	9201      	str	r2, [sp, #4]
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	4623      	mov	r3, r4
 8002634:	4602      	mov	r2, r0
 8002636:	2102      	movs	r1, #2
 8002638:	4867      	ldr	r0, [pc, #412]	@ (80027d8 <SPI_Pin_Init+0x54c>)
 800263a:	f7ff fc69 	bl	8001f10 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PB15) GPIO_Pin_Init(GPIOB, 15, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	795b      	ldrb	r3, [r3, #5]
 8002642:	461a      	mov	r2, r3
 8002644:	231d      	movs	r3, #29
 8002646:	429a      	cmp	r2, r3
 8002648:	d10e      	bne.n	8002668 <SPI_Pin_Init+0x3dc>
 800264a:	2002      	movs	r0, #2
 800264c:	2400      	movs	r4, #0
 800264e:	2303      	movs	r3, #3
 8002650:	2200      	movs	r2, #0
 8002652:	2105      	movs	r1, #5
 8002654:	9102      	str	r1, [sp, #8]
 8002656:	9201      	str	r2, [sp, #4]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	4623      	mov	r3, r4
 800265c:	4602      	mov	r2, r0
 800265e:	210f      	movs	r1, #15
 8002660:	485b      	ldr	r0, [pc, #364]	@ (80027d0 <SPI_Pin_Init+0x544>)
 8002662:	f7ff fc55 	bl	8001f10 <GPIO_Pin_Init>
 8002666:	e013      	b.n	8002690 <SPI_Pin_Init+0x404>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI2_.MOSI2.PC3) GPIO_Pin_Init(GPIOC, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	795b      	ldrb	r3, [r3, #5]
 800266c:	461a      	mov	r2, r3
 800266e:	2311      	movs	r3, #17
 8002670:	429a      	cmp	r2, r3
 8002672:	d10d      	bne.n	8002690 <SPI_Pin_Init+0x404>
 8002674:	2002      	movs	r0, #2
 8002676:	2400      	movs	r4, #0
 8002678:	2303      	movs	r3, #3
 800267a:	2200      	movs	r2, #0
 800267c:	2105      	movs	r1, #5
 800267e:	9102      	str	r1, [sp, #8]
 8002680:	9201      	str	r2, [sp, #4]
 8002682:	9300      	str	r3, [sp, #0]
 8002684:	4623      	mov	r3, r4
 8002686:	4602      	mov	r2, r0
 8002688:	2103      	movs	r1, #3
 800268a:	4853      	ldr	r0, [pc, #332]	@ (80027d8 <SPI_Pin_Init+0x54c>)
 800268c:	f7ff fc40 	bl	8001f10 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	681a      	ldr	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	e240      	b.n	8002b24 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	89db      	ldrh	r3, [r3, #14]
 80026a6:	220d      	movs	r2, #13
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d009      	beq.n	80026c0 <SPI_Pin_Init+0x434>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	89db      	ldrh	r3, [r3, #14]
 80026b0:	2211      	movs	r2, #17
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d004      	beq.n	80026c0 <SPI_Pin_Init+0x434>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	89db      	ldrh	r3, [r3, #14]
 80026ba:	2210      	movs	r2, #16
 80026bc:	4293      	cmp	r3, r2
 80026be:	d139      	bne.n	8002734 <SPI_Pin_Init+0x4a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	791b      	ldrb	r3, [r3, #4]
 80026c4:	461a      	mov	r2, r3
 80026c6:	2313      	movs	r3, #19
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d10e      	bne.n	80026ea <SPI_Pin_Init+0x45e>
 80026cc:	2002      	movs	r0, #2
 80026ce:	2400      	movs	r4, #0
 80026d0:	2303      	movs	r3, #3
 80026d2:	2200      	movs	r2, #0
 80026d4:	2105      	movs	r1, #5
 80026d6:	9102      	str	r1, [sp, #8]
 80026d8:	9201      	str	r2, [sp, #4]
 80026da:	9300      	str	r3, [sp, #0]
 80026dc:	4623      	mov	r3, r4
 80026de:	4602      	mov	r2, r0
 80026e0:	210a      	movs	r1, #10
 80026e2:	483b      	ldr	r0, [pc, #236]	@ (80027d0 <SPI_Pin_Init+0x544>)
 80026e4:	f7ff fc14 	bl	8001f10 <GPIO_Pin_Init>
 80026e8:	e013      	b.n	8002712 <SPI_Pin_Init+0x486>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	791b      	ldrb	r3, [r3, #4]
 80026ee:	461a      	mov	r2, r3
 80026f0:	2317      	movs	r3, #23
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d10d      	bne.n	8002712 <SPI_Pin_Init+0x486>
 80026f6:	2002      	movs	r0, #2
 80026f8:	2400      	movs	r4, #0
 80026fa:	2303      	movs	r3, #3
 80026fc:	2200      	movs	r2, #0
 80026fe:	2105      	movs	r1, #5
 8002700:	9102      	str	r1, [sp, #8]
 8002702:	9201      	str	r2, [sp, #4]
 8002704:	9300      	str	r3, [sp, #0]
 8002706:	4623      	mov	r3, r4
 8002708:	4602      	mov	r2, r0
 800270a:	210d      	movs	r1, #13
 800270c:	4830      	ldr	r0, [pc, #192]	@ (80027d0 <SPI_Pin_Init+0x544>)
 800270e:	f7ff fbff 	bl	8001f10 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002720:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002730:	601a      	str	r2, [r3, #0]
 8002732:	e1f7      	b.n	8002b24 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	89db      	ldrh	r3, [r3, #14]
 8002738:	220e      	movs	r2, #14
 800273a:	4293      	cmp	r3, r2
 800273c:	d00a      	beq.n	8002754 <SPI_Pin_Init+0x4c8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	89db      	ldrh	r3, [r3, #14]
 8002742:	220f      	movs	r2, #15
 8002744:	4293      	cmp	r3, r2
 8002746:	d005      	beq.n	8002754 <SPI_Pin_Init+0x4c8>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	89db      	ldrh	r3, [r3, #14]
 800274c:	2212      	movs	r2, #18
 800274e:	4293      	cmp	r3, r2
 8002750:	f040 81e8 	bne.w	8002b24 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB10) GPIO_Pin_Init(GPIOB, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	791b      	ldrb	r3, [r3, #4]
 8002758:	461a      	mov	r2, r3
 800275a:	2313      	movs	r3, #19
 800275c:	429a      	cmp	r2, r3
 800275e:	d10e      	bne.n	800277e <SPI_Pin_Init+0x4f2>
 8002760:	2002      	movs	r0, #2
 8002762:	2400      	movs	r4, #0
 8002764:	2303      	movs	r3, #3
 8002766:	2200      	movs	r2, #0
 8002768:	2105      	movs	r1, #5
 800276a:	9102      	str	r1, [sp, #8]
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	9300      	str	r3, [sp, #0]
 8002770:	4623      	mov	r3, r4
 8002772:	4602      	mov	r2, r0
 8002774:	210a      	movs	r1, #10
 8002776:	4816      	ldr	r0, [pc, #88]	@ (80027d0 <SPI_Pin_Init+0x544>)
 8002778:	f7ff fbca 	bl	8001f10 <GPIO_Pin_Init>
 800277c:	e013      	b.n	80027a6 <SPI_Pin_Init+0x51a>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI2_.CLK2.PB13) GPIO_Pin_Init(GPIOB, 13, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	791b      	ldrb	r3, [r3, #4]
 8002782:	461a      	mov	r2, r3
 8002784:	2317      	movs	r3, #23
 8002786:	429a      	cmp	r2, r3
 8002788:	d10d      	bne.n	80027a6 <SPI_Pin_Init+0x51a>
 800278a:	2002      	movs	r0, #2
 800278c:	2400      	movs	r4, #0
 800278e:	2303      	movs	r3, #3
 8002790:	2200      	movs	r2, #0
 8002792:	2105      	movs	r1, #5
 8002794:	9102      	str	r1, [sp, #8]
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	4623      	mov	r3, r4
 800279c:	4602      	mov	r2, r0
 800279e:	210d      	movs	r1, #13
 80027a0:	480b      	ldr	r0, [pc, #44]	@ (80027d0 <SPI_Pin_Init+0x544>)
 80027a2:	f7ff fbb5 	bl	8001f10 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PB14) GPIO_Pin_Init(GPIOB, 14, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	799b      	ldrb	r3, [r3, #6]
 80027aa:	461a      	mov	r2, r3
 80027ac:	231b      	movs	r3, #27
 80027ae:	429a      	cmp	r2, r3
 80027b0:	d114      	bne.n	80027dc <SPI_Pin_Init+0x550>
 80027b2:	2002      	movs	r0, #2
 80027b4:	2400      	movs	r4, #0
 80027b6:	2303      	movs	r3, #3
 80027b8:	2200      	movs	r2, #0
 80027ba:	2105      	movs	r1, #5
 80027bc:	9102      	str	r1, [sp, #8]
 80027be:	9201      	str	r2, [sp, #4]
 80027c0:	9300      	str	r3, [sp, #0]
 80027c2:	4623      	mov	r3, r4
 80027c4:	4602      	mov	r2, r0
 80027c6:	210e      	movs	r1, #14
 80027c8:	4801      	ldr	r0, [pc, #4]	@ (80027d0 <SPI_Pin_Init+0x544>)
 80027ca:	f7ff fba1 	bl	8001f10 <GPIO_Pin_Init>
 80027ce:	e019      	b.n	8002804 <SPI_Pin_Init+0x578>
 80027d0:	40020400 	.word	0x40020400
 80027d4:	40003800 	.word	0x40003800
 80027d8:	40020800 	.word	0x40020800
			else if(config->miso_pin == SPI_Configurations.Pin._SPI2_.MISO2.PC2) GPIO_Pin_Init(GPIOC, 2, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_2);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	799b      	ldrb	r3, [r3, #6]
 80027e0:	461a      	mov	r2, r3
 80027e2:	2320      	movs	r3, #32
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d10d      	bne.n	8002804 <SPI_Pin_Init+0x578>
 80027e8:	2002      	movs	r0, #2
 80027ea:	2400      	movs	r4, #0
 80027ec:	2303      	movs	r3, #3
 80027ee:	2200      	movs	r2, #0
 80027f0:	2105      	movs	r1, #5
 80027f2:	9102      	str	r1, [sp, #8]
 80027f4:	9201      	str	r2, [sp, #4]
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	4623      	mov	r3, r4
 80027fa:	4602      	mov	r2, r0
 80027fc:	2102      	movs	r1, #2
 80027fe:	489f      	ldr	r0, [pc, #636]	@ (8002a7c <SPI_Pin_Init+0x7f0>)
 8002800:	f7ff fb86 	bl	8001f10 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	681a      	ldr	r2, [r3, #0]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002812:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002822:	601a      	str	r2, [r3, #0]
}
 8002824:	e17e      	b.n	8002b24 <SPI_Pin_Init+0x898>
	else if(config -> Port == SPI3)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a95      	ldr	r2, [pc, #596]	@ (8002a80 <SPI_Pin_Init+0x7f4>)
 800282c:	4293      	cmp	r3, r2
 800282e:	f040 8179 	bne.w	8002b24 <SPI_Pin_Init+0x898>
		if((config->mode == SPI_Configurations.Mode.Full_Duplex_Master) || (config->mode == SPI_Configurations.Mode.Full_Duplex_Slave))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	89db      	ldrh	r3, [r3, #14]
 8002836:	220b      	movs	r2, #11
 8002838:	4293      	cmp	r3, r2
 800283a:	d005      	beq.n	8002848 <SPI_Pin_Init+0x5bc>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	89db      	ldrh	r3, [r3, #14]
 8002840:	220c      	movs	r2, #12
 8002842:	4293      	cmp	r3, r2
 8002844:	f040 8084 	bne.w	8002950 <SPI_Pin_Init+0x6c4>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	791b      	ldrb	r3, [r3, #4]
 800284c:	461a      	mov	r2, r3
 800284e:	2317      	movs	r3, #23
 8002850:	429a      	cmp	r2, r3
 8002852:	d10e      	bne.n	8002872 <SPI_Pin_Init+0x5e6>
 8002854:	2002      	movs	r0, #2
 8002856:	2400      	movs	r4, #0
 8002858:	2303      	movs	r3, #3
 800285a:	2200      	movs	r2, #0
 800285c:	2106      	movs	r1, #6
 800285e:	9102      	str	r1, [sp, #8]
 8002860:	9201      	str	r2, [sp, #4]
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	4623      	mov	r3, r4
 8002866:	4602      	mov	r2, r0
 8002868:	2103      	movs	r1, #3
 800286a:	4886      	ldr	r0, [pc, #536]	@ (8002a84 <SPI_Pin_Init+0x7f8>)
 800286c:	f7ff fb50 	bl	8001f10 <GPIO_Pin_Init>
 8002870:	e013      	b.n	800289a <SPI_Pin_Init+0x60e>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	791b      	ldrb	r3, [r3, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	2325      	movs	r3, #37	@ 0x25
 800287a:	429a      	cmp	r2, r3
 800287c:	d10d      	bne.n	800289a <SPI_Pin_Init+0x60e>
 800287e:	2002      	movs	r0, #2
 8002880:	2400      	movs	r4, #0
 8002882:	2303      	movs	r3, #3
 8002884:	2200      	movs	r2, #0
 8002886:	2106      	movs	r1, #6
 8002888:	9102      	str	r1, [sp, #8]
 800288a:	9201      	str	r2, [sp, #4]
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	4623      	mov	r3, r4
 8002890:	4602      	mov	r2, r0
 8002892:	210a      	movs	r1, #10
 8002894:	4879      	ldr	r0, [pc, #484]	@ (8002a7c <SPI_Pin_Init+0x7f0>)
 8002896:	f7ff fb3b 	bl	8001f10 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	799b      	ldrb	r3, [r3, #6]
 800289e:	461a      	mov	r2, r3
 80028a0:	2318      	movs	r3, #24
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10e      	bne.n	80028c4 <SPI_Pin_Init+0x638>
 80028a6:	2002      	movs	r0, #2
 80028a8:	2400      	movs	r4, #0
 80028aa:	2303      	movs	r3, #3
 80028ac:	2200      	movs	r2, #0
 80028ae:	2106      	movs	r1, #6
 80028b0:	9102      	str	r1, [sp, #8]
 80028b2:	9201      	str	r2, [sp, #4]
 80028b4:	9300      	str	r3, [sp, #0]
 80028b6:	4623      	mov	r3, r4
 80028b8:	4602      	mov	r2, r0
 80028ba:	2104      	movs	r1, #4
 80028bc:	4871      	ldr	r0, [pc, #452]	@ (8002a84 <SPI_Pin_Init+0x7f8>)
 80028be:	f7ff fb27 	bl	8001f10 <GPIO_Pin_Init>
 80028c2:	e013      	b.n	80028ec <SPI_Pin_Init+0x660>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	799b      	ldrb	r3, [r3, #6]
 80028c8:	461a      	mov	r2, r3
 80028ca:	2327      	movs	r3, #39	@ 0x27
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d10d      	bne.n	80028ec <SPI_Pin_Init+0x660>
 80028d0:	2002      	movs	r0, #2
 80028d2:	2400      	movs	r4, #0
 80028d4:	2303      	movs	r3, #3
 80028d6:	2200      	movs	r2, #0
 80028d8:	2106      	movs	r1, #6
 80028da:	9102      	str	r1, [sp, #8]
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4623      	mov	r3, r4
 80028e2:	4602      	mov	r2, r0
 80028e4:	210b      	movs	r1, #11
 80028e6:	4865      	ldr	r0, [pc, #404]	@ (8002a7c <SPI_Pin_Init+0x7f0>)
 80028e8:	f7ff fb12 	bl	8001f10 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	795b      	ldrb	r3, [r3, #5]
 80028f0:	461a      	mov	r2, r3
 80028f2:	2319      	movs	r3, #25
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d10e      	bne.n	8002916 <SPI_Pin_Init+0x68a>
 80028f8:	2002      	movs	r0, #2
 80028fa:	2400      	movs	r4, #0
 80028fc:	2303      	movs	r3, #3
 80028fe:	2200      	movs	r2, #0
 8002900:	2106      	movs	r1, #6
 8002902:	9102      	str	r1, [sp, #8]
 8002904:	9201      	str	r2, [sp, #4]
 8002906:	9300      	str	r3, [sp, #0]
 8002908:	4623      	mov	r3, r4
 800290a:	4602      	mov	r2, r0
 800290c:	2105      	movs	r1, #5
 800290e:	485d      	ldr	r0, [pc, #372]	@ (8002a84 <SPI_Pin_Init+0x7f8>)
 8002910:	f7ff fafe 	bl	8001f10 <GPIO_Pin_Init>
 8002914:	e013      	b.n	800293e <SPI_Pin_Init+0x6b2>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	795b      	ldrb	r3, [r3, #5]
 800291a:	461a      	mov	r2, r3
 800291c:	2327      	movs	r3, #39	@ 0x27
 800291e:	429a      	cmp	r2, r3
 8002920:	d10d      	bne.n	800293e <SPI_Pin_Init+0x6b2>
 8002922:	2002      	movs	r0, #2
 8002924:	2400      	movs	r4, #0
 8002926:	2303      	movs	r3, #3
 8002928:	2200      	movs	r2, #0
 800292a:	2106      	movs	r1, #6
 800292c:	9102      	str	r1, [sp, #8]
 800292e:	9201      	str	r2, [sp, #4]
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	4623      	mov	r3, r4
 8002934:	4602      	mov	r2, r0
 8002936:	210c      	movs	r1, #12
 8002938:	4850      	ldr	r0, [pc, #320]	@ (8002a7c <SPI_Pin_Init+0x7f0>)
 800293a:	f7ff fae9 	bl	8001f10 <GPIO_Pin_Init>
			config->Port -> CR1 &= ~SPI_CR1_BIDIMODE;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	e0e9      	b.n	8002b24 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Master) || (config->mode == SPI_Configurations.Mode.RX_Only_Slave))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	89db      	ldrh	r3, [r3, #14]
 8002954:	220d      	movs	r2, #13
 8002956:	4293      	cmp	r3, r2
 8002958:	d009      	beq.n	800296e <SPI_Pin_Init+0x6e2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	89db      	ldrh	r3, [r3, #14]
 800295e:	2211      	movs	r2, #17
 8002960:	4293      	cmp	r3, r2
 8002962:	d004      	beq.n	800296e <SPI_Pin_Init+0x6e2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	89db      	ldrh	r3, [r3, #14]
 8002968:	2210      	movs	r2, #16
 800296a:	4293      	cmp	r3, r2
 800296c:	d162      	bne.n	8002a34 <SPI_Pin_Init+0x7a8>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	791b      	ldrb	r3, [r3, #4]
 8002972:	461a      	mov	r2, r3
 8002974:	2317      	movs	r3, #23
 8002976:	429a      	cmp	r2, r3
 8002978:	d10e      	bne.n	8002998 <SPI_Pin_Init+0x70c>
 800297a:	2002      	movs	r0, #2
 800297c:	2400      	movs	r4, #0
 800297e:	2303      	movs	r3, #3
 8002980:	2200      	movs	r2, #0
 8002982:	2106      	movs	r1, #6
 8002984:	9102      	str	r1, [sp, #8]
 8002986:	9201      	str	r2, [sp, #4]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4623      	mov	r3, r4
 800298c:	4602      	mov	r2, r0
 800298e:	2103      	movs	r1, #3
 8002990:	483c      	ldr	r0, [pc, #240]	@ (8002a84 <SPI_Pin_Init+0x7f8>)
 8002992:	f7ff fabd 	bl	8001f10 <GPIO_Pin_Init>
 8002996:	e013      	b.n	80029c0 <SPI_Pin_Init+0x734>
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	791b      	ldrb	r3, [r3, #4]
 800299c:	461a      	mov	r2, r3
 800299e:	2325      	movs	r3, #37	@ 0x25
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d10d      	bne.n	80029c0 <SPI_Pin_Init+0x734>
 80029a4:	2002      	movs	r0, #2
 80029a6:	2400      	movs	r4, #0
 80029a8:	2303      	movs	r3, #3
 80029aa:	2200      	movs	r2, #0
 80029ac:	2106      	movs	r1, #6
 80029ae:	9102      	str	r1, [sp, #8]
 80029b0:	9201      	str	r2, [sp, #4]
 80029b2:	9300      	str	r3, [sp, #0]
 80029b4:	4623      	mov	r3, r4
 80029b6:	4602      	mov	r2, r0
 80029b8:	210a      	movs	r1, #10
 80029ba:	4830      	ldr	r0, [pc, #192]	@ (8002a7c <SPI_Pin_Init+0x7f0>)
 80029bc:	f7ff faa8 	bl	8001f10 <GPIO_Pin_Init>
			if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PB4) GPIO_Pin_Init(GPIOB, 4, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	799b      	ldrb	r3, [r3, #6]
 80029c4:	461a      	mov	r2, r3
 80029c6:	2318      	movs	r3, #24
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d10e      	bne.n	80029ea <SPI_Pin_Init+0x75e>
 80029cc:	2002      	movs	r0, #2
 80029ce:	2400      	movs	r4, #0
 80029d0:	2303      	movs	r3, #3
 80029d2:	2200      	movs	r2, #0
 80029d4:	2106      	movs	r1, #6
 80029d6:	9102      	str	r1, [sp, #8]
 80029d8:	9201      	str	r2, [sp, #4]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	4623      	mov	r3, r4
 80029de:	4602      	mov	r2, r0
 80029e0:	2104      	movs	r1, #4
 80029e2:	4828      	ldr	r0, [pc, #160]	@ (8002a84 <SPI_Pin_Init+0x7f8>)
 80029e4:	f7ff fa94 	bl	8001f10 <GPIO_Pin_Init>
 80029e8:	e013      	b.n	8002a12 <SPI_Pin_Init+0x786>
			else if(config->miso_pin == SPI_Configurations.Pin._SPI3_.MISO3.PC11) GPIO_Pin_Init(GPIOC,11, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	799b      	ldrb	r3, [r3, #6]
 80029ee:	461a      	mov	r2, r3
 80029f0:	2327      	movs	r3, #39	@ 0x27
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d10d      	bne.n	8002a12 <SPI_Pin_Init+0x786>
 80029f6:	2002      	movs	r0, #2
 80029f8:	2400      	movs	r4, #0
 80029fa:	2303      	movs	r3, #3
 80029fc:	2200      	movs	r2, #0
 80029fe:	2106      	movs	r1, #6
 8002a00:	9102      	str	r1, [sp, #8]
 8002a02:	9201      	str	r2, [sp, #4]
 8002a04:	9300      	str	r3, [sp, #0]
 8002a06:	4623      	mov	r3, r4
 8002a08:	4602      	mov	r2, r0
 8002a0a:	210b      	movs	r1, #11
 8002a0c:	481b      	ldr	r0, [pc, #108]	@ (8002a7c <SPI_Pin_Init+0x7f0>)
 8002a0e:	f7ff fa7f 	bl	8001f10 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a20:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 |= SPI_CR1_BIDIOE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	e077      	b.n	8002b24 <SPI_Pin_Init+0x898>
		else if((config->mode == SPI_Configurations.Mode.Half_Duplex_Slave) || (config->mode == SPI_Configurations.Mode.RX_Only_Master) || (config->mode == SPI_Configurations.Mode.TX_Only_Slave))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	89db      	ldrh	r3, [r3, #14]
 8002a38:	220e      	movs	r2, #14
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <SPI_Pin_Init+0x7c6>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	89db      	ldrh	r3, [r3, #14]
 8002a42:	220f      	movs	r2, #15
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <SPI_Pin_Init+0x7c6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	89db      	ldrh	r3, [r3, #14]
 8002a4c:	2212      	movs	r2, #18
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d168      	bne.n	8002b24 <SPI_Pin_Init+0x898>
			if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PB3) GPIO_Pin_Init(GPIOB, 3, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	791b      	ldrb	r3, [r3, #4]
 8002a56:	461a      	mov	r2, r3
 8002a58:	2317      	movs	r3, #23
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d114      	bne.n	8002a88 <SPI_Pin_Init+0x7fc>
 8002a5e:	2002      	movs	r0, #2
 8002a60:	2400      	movs	r4, #0
 8002a62:	2303      	movs	r3, #3
 8002a64:	2200      	movs	r2, #0
 8002a66:	2106      	movs	r1, #6
 8002a68:	9102      	str	r1, [sp, #8]
 8002a6a:	9201      	str	r2, [sp, #4]
 8002a6c:	9300      	str	r3, [sp, #0]
 8002a6e:	4623      	mov	r3, r4
 8002a70:	4602      	mov	r2, r0
 8002a72:	2103      	movs	r1, #3
 8002a74:	4803      	ldr	r0, [pc, #12]	@ (8002a84 <SPI_Pin_Init+0x7f8>)
 8002a76:	f7ff fa4b 	bl	8001f10 <GPIO_Pin_Init>
 8002a7a:	e019      	b.n	8002ab0 <SPI_Pin_Init+0x824>
 8002a7c:	40020800 	.word	0x40020800
 8002a80:	40003c00 	.word	0x40003c00
 8002a84:	40020400 	.word	0x40020400
			else if(config->clock_pin == SPI_Configurations.Pin._SPI3_.CLK3.PC10) GPIO_Pin_Init(GPIOC, 10, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	791b      	ldrb	r3, [r3, #4]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	2325      	movs	r3, #37	@ 0x25
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d10d      	bne.n	8002ab0 <SPI_Pin_Init+0x824>
 8002a94:	2002      	movs	r0, #2
 8002a96:	2400      	movs	r4, #0
 8002a98:	2303      	movs	r3, #3
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	2106      	movs	r1, #6
 8002a9e:	9102      	str	r1, [sp, #8]
 8002aa0:	9201      	str	r2, [sp, #4]
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	4623      	mov	r3, r4
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	210a      	movs	r1, #10
 8002aaa:	4820      	ldr	r0, [pc, #128]	@ (8002b2c <SPI_Pin_Init+0x8a0>)
 8002aac:	f7ff fa30 	bl	8001f10 <GPIO_Pin_Init>
			if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PB5) GPIO_Pin_Init(GPIOB, 5, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	795b      	ldrb	r3, [r3, #5]
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2319      	movs	r3, #25
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d10e      	bne.n	8002ada <SPI_Pin_Init+0x84e>
 8002abc:	2002      	movs	r0, #2
 8002abe:	2400      	movs	r4, #0
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	2106      	movs	r1, #6
 8002ac6:	9102      	str	r1, [sp, #8]
 8002ac8:	9201      	str	r2, [sp, #4]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	4623      	mov	r3, r4
 8002ace:	4602      	mov	r2, r0
 8002ad0:	2105      	movs	r1, #5
 8002ad2:	4817      	ldr	r0, [pc, #92]	@ (8002b30 <SPI_Pin_Init+0x8a4>)
 8002ad4:	f7ff fa1c 	bl	8001f10 <GPIO_Pin_Init>
 8002ad8:	e013      	b.n	8002b02 <SPI_Pin_Init+0x876>
			else if(config->mosi_pin == SPI_Configurations.Pin._SPI3_.MOSI3.PC12) GPIO_Pin_Init(GPIOC, 12, GPIO_Configuration.Mode.Alternate_Function, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.No_Pull_Up_Down, GPIO_Configuration.Alternate_Functions.SPI_3);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	795b      	ldrb	r3, [r3, #5]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2327      	movs	r3, #39	@ 0x27
 8002ae2:	429a      	cmp	r2, r3
 8002ae4:	d10d      	bne.n	8002b02 <SPI_Pin_Init+0x876>
 8002ae6:	2002      	movs	r0, #2
 8002ae8:	2400      	movs	r4, #0
 8002aea:	2303      	movs	r3, #3
 8002aec:	2200      	movs	r2, #0
 8002aee:	2106      	movs	r1, #6
 8002af0:	9102      	str	r1, [sp, #8]
 8002af2:	9201      	str	r2, [sp, #4]
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4623      	mov	r3, r4
 8002af8:	4602      	mov	r2, r0
 8002afa:	210c      	movs	r1, #12
 8002afc:	480b      	ldr	r0, [pc, #44]	@ (8002b2c <SPI_Pin_Init+0x8a0>)
 8002afe:	f7ff fa07 	bl	8001f10 <GPIO_Pin_Init>
			config->Port -> CR1 |= SPI_CR1_BIDIMODE;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b10:	601a      	str	r2, [r3, #0]
			config->Port -> CR1 &= ~SPI_CR1_BIDIOE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	681a      	ldr	r2, [r3, #0]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002b20:	601a      	str	r2, [r3, #0]
}
 8002b22:	e7ff      	b.n	8002b24 <SPI_Pin_Init+0x898>
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd90      	pop	{r4, r7, pc}
 8002b2c:	40020800 	.word	0x40020800
 8002b30:	40020400 	.word	0x40020400

08002b34 <SPI_Init>:


int8_t SPI_Init(SPI_Config *config)
{
 8002b34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af04      	add	r7, sp, #16
 8002b3a:	6078      	str	r0, [r7, #4]
	if(config->type == SPI_Configurations.Type.Master){
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	8b1b      	ldrh	r3, [r3, #24]
 8002b40:	2232      	movs	r2, #50	@ 0x32
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d110      	bne.n	8002b68 <SPI_Init+0x34>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.General_Purpose_Output, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6898      	ldr	r0, [r3, #8]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	7b19      	ldrb	r1, [r3, #12]
 8002b4e:	2501      	movs	r5, #1
 8002b50:	2600      	movs	r6, #0
 8002b52:	2303      	movs	r3, #3
 8002b54:	2201      	movs	r2, #1
 8002b56:	2400      	movs	r4, #0
 8002b58:	9402      	str	r4, [sp, #8]
 8002b5a:	9201      	str	r2, [sp, #4]
 8002b5c:	9300      	str	r3, [sp, #0]
 8002b5e:	4633      	mov	r3, r6
 8002b60:	462a      	mov	r2, r5
 8002b62:	f7ff f9d5 	bl	8001f10 <GPIO_Pin_Init>
 8002b66:	e014      	b.n	8002b92 <SPI_Init+0x5e>
	}
	else if(config->type == SPI_Configurations.Type.Slave){
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8b1b      	ldrh	r3, [r3, #24]
 8002b6c:	2233      	movs	r2, #51	@ 0x33
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d10f      	bne.n	8002b92 <SPI_Init+0x5e>
		GPIO_Pin_Init(config->NSS_Port, config->NSS_Pin, GPIO_Configuration.Mode.Input, GPIO_Configuration.Output_Type.Push_Pull, GPIO_Configuration.Speed.Very_High_Speed, GPIO_Configuration.Pull.Pull_Up, GPIO_Configuration.Alternate_Functions.None);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6898      	ldr	r0, [r3, #8]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	7b19      	ldrb	r1, [r3, #12]
 8002b7a:	2500      	movs	r5, #0
 8002b7c:	2600      	movs	r6, #0
 8002b7e:	2303      	movs	r3, #3
 8002b80:	2201      	movs	r2, #1
 8002b82:	2400      	movs	r4, #0
 8002b84:	9402      	str	r4, [sp, #8]
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	4633      	mov	r3, r6
 8002b8c:	462a      	mov	r2, r5
 8002b8e:	f7ff f9bf 	bl	8001f10 <GPIO_Pin_Init>
	}

	SPI_Clock_Enable(config);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff fb40 	bl	8002218 <SPI_Clock_Enable>
	SPI_Pin_Init(config);
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff fb77 	bl	800228c <SPI_Pin_Init>

	config -> Port -> CR1 &= ~SPI_CR1_SPE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002bac:	601a      	str	r2, [r3, #0]

	if((config -> Port == SPI1) || (config -> Port == SPI2) || (config -> Port == SPI3))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a8e      	ldr	r2, [pc, #568]	@ (8002dec <SPI_Init+0x2b8>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d00a      	beq.n	8002bce <SPI_Init+0x9a>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a8c      	ldr	r2, [pc, #560]	@ (8002df0 <SPI_Init+0x2bc>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d005      	beq.n	8002bce <SPI_Init+0x9a>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a8b      	ldr	r2, [pc, #556]	@ (8002df4 <SPI_Init+0x2c0>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	f040 81f8 	bne.w	8002fbe <SPI_Init+0x48a>
	{
		     if(config -> clock_phase == SPI_Configurations.Clock_Phase.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPHA;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	8b9b      	ldrh	r3, [r3, #28]
 8002bd2:	2217      	movs	r2, #23
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d108      	bne.n	8002bea <SPI_Init+0xb6>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0201 	bic.w	r2, r2, #1
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	e010      	b.n	8002c0c <SPI_Init+0xd8>
		else if(config -> clock_phase == SPI_Configurations.Clock_Phase.High_1) config-> Port -> CR1 |= SPI_CR1_CPHA;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8b9b      	ldrh	r3, [r3, #28]
 8002bee:	2216      	movs	r2, #22
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d108      	bne.n	8002c06 <SPI_Init+0xd2>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0201 	orr.w	r2, r2, #1
 8002c02:	601a      	str	r2, [r3, #0]
 8002c04:	e002      	b.n	8002c0c <SPI_Init+0xd8>
		else {return -1;}
 8002c06:	f04f 33ff 	mov.w	r3, #4294967295
 8002c0a:	e1da      	b.n	8002fc2 <SPI_Init+0x48e>

		     if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.Low_0) config-> Port -> CR1 &= ~SPI_CR1_CPOL;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	8b5b      	ldrh	r3, [r3, #26]
 8002c10:	2221      	movs	r2, #33	@ 0x21
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d108      	bne.n	8002c28 <SPI_Init+0xf4>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f022 0202 	bic.w	r2, r2, #2
 8002c24:	601a      	str	r2, [r3, #0]
 8002c26:	e010      	b.n	8002c4a <SPI_Init+0x116>
		else if(config -> clock_polarity == SPI_Configurations.Clock_Polarity.High_1) config-> Port -> CR1 |= SPI_CR1_CPOL;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	8b5b      	ldrh	r3, [r3, #26]
 8002c2c:	2220      	movs	r2, #32
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d108      	bne.n	8002c44 <SPI_Init+0x110>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0202 	orr.w	r2, r2, #2
 8002c40:	601a      	str	r2, [r3, #0]
 8002c42:	e002      	b.n	8002c4a <SPI_Init+0x116>
		else {return -1;}
 8002c44:	f04f 33ff 	mov.w	r3, #4294967295
 8002c48:	e1bb      	b.n	8002fc2 <SPI_Init+0x48e>

		     if(config -> crc == SPI_Configurations.CRC_Enable.Disable) config -> Port -> CR1 &= ~SPI_CR1_CRCEN;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	8a1b      	ldrh	r3, [r3, #16]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d108      	bne.n	8002c66 <SPI_Init+0x132>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e010      	b.n	8002c88 <SPI_Init+0x154>
		else if(config -> crc == SPI_Configurations.CRC_Enable.Enable) config -> Port -> CR1 |=  SPI_CR1_CRCEN;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	8a1b      	ldrh	r3, [r3, #16]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d108      	bne.n	8002c82 <SPI_Init+0x14e>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002c7e:	601a      	str	r2, [r3, #0]
 8002c80:	e002      	b.n	8002c88 <SPI_Init+0x154>
		else {return -1;}
 8002c82:	f04f 33ff 	mov.w	r3, #4294967295
 8002c86:	e19c      	b.n	8002fc2 <SPI_Init+0x48e>

		     if(config -> data_format == SPI_Configurations.Data_Format.Bit8) config -> Port -> CR1 &= ~SPI_CR1_DFF;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	8a5b      	ldrh	r3, [r3, #18]
 8002c8c:	220b      	movs	r2, #11
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d108      	bne.n	8002ca4 <SPI_Init+0x170>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ca0:	601a      	str	r2, [r3, #0]
 8002ca2:	e010      	b.n	8002cc6 <SPI_Init+0x192>
		else if(config -> data_format == SPI_Configurations.Data_Format.Bit16) config -> Port -> CR1 |=  SPI_CR1_DFF;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8a5b      	ldrh	r3, [r3, #18]
 8002ca8:	220c      	movs	r2, #12
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <SPI_Init+0x18c>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e002      	b.n	8002cc6 <SPI_Init+0x192>
		else {return -1;}
 8002cc0:	f04f 33ff 	mov.w	r3, #4294967295
 8002cc4:	e17d      	b.n	8002fc2 <SPI_Init+0x48e>

		     if(config -> frame_format == SPI_Configurations.Frame_Format.LSB_First) config -> Port -> CR1 |= SPI_CR1_LSBFIRST;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8a9b      	ldrh	r3, [r3, #20]
 8002cca:	2218      	movs	r2, #24
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d108      	bne.n	8002ce2 <SPI_Init+0x1ae>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e010      	b.n	8002d04 <SPI_Init+0x1d0>
		else if(config -> frame_format == SPI_Configurations.Frame_Format.MSB_First) config -> Port -> CR1 &= ~SPI_CR1_LSBFIRST;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	8a9b      	ldrh	r3, [r3, #20]
 8002ce6:	2217      	movs	r2, #23
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d108      	bne.n	8002cfe <SPI_Init+0x1ca>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	e002      	b.n	8002d04 <SPI_Init+0x1d0>
		else {return -1;}
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8002d02:	e15e      	b.n	8002fc2 <SPI_Init+0x48e>

		     if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_2) config -> Port -> CR1 &=   ~SPI_CR1_BR;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	8adb      	ldrh	r3, [r3, #22]
 8002d08:	2228      	movs	r2, #40	@ 0x28
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d108      	bne.n	8002d20 <SPI_Init+0x1ec>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 8002d1c:	601a      	str	r2, [r3, #0]
 8002d1e:	e06b      	b.n	8002df8 <SPI_Init+0x2c4>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_4) config -> Port -> CR1 |=    SPI_CR1_BR_0;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	8adb      	ldrh	r3, [r3, #22]
 8002d24:	2229      	movs	r2, #41	@ 0x29
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d108      	bne.n	8002d3c <SPI_Init+0x208>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f042 0208 	orr.w	r2, r2, #8
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	e05d      	b.n	8002df8 <SPI_Init+0x2c4>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_8) config -> Port -> CR1 |=    SPI_CR1_BR_1;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	8adb      	ldrh	r3, [r3, #22]
 8002d40:	222a      	movs	r2, #42	@ 0x2a
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d108      	bne.n	8002d58 <SPI_Init+0x224>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f042 0210 	orr.w	r2, r2, #16
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	e04f      	b.n	8002df8 <SPI_Init+0x2c4>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_16) config -> Port -> CR1 |=   SPI_CR1_BR_0 | SPI_CR1_BR_1;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	8adb      	ldrh	r3, [r3, #22]
 8002d5c:	222b      	movs	r2, #43	@ 0x2b
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d108      	bne.n	8002d74 <SPI_Init+0x240>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f042 0218 	orr.w	r2, r2, #24
 8002d70:	601a      	str	r2, [r3, #0]
 8002d72:	e041      	b.n	8002df8 <SPI_Init+0x2c4>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_32) config -> Port -> CR1 |=   SPI_CR1_BR_2;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	8adb      	ldrh	r3, [r3, #22]
 8002d78:	222c      	movs	r2, #44	@ 0x2c
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d108      	bne.n	8002d90 <SPI_Init+0x25c>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	601a      	str	r2, [r3, #0]
 8002d8e:	e033      	b.n	8002df8 <SPI_Init+0x2c4>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_64) config -> Port -> CR1 |=   SPI_CR1_BR_2 | SPI_CR1_BR_0;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	8adb      	ldrh	r3, [r3, #22]
 8002d94:	222d      	movs	r2, #45	@ 0x2d
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d108      	bne.n	8002dac <SPI_Init+0x278>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681a      	ldr	r2, [r3, #0]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f042 0228 	orr.w	r2, r2, #40	@ 0x28
 8002da8:	601a      	str	r2, [r3, #0]
 8002daa:	e025      	b.n	8002df8 <SPI_Init+0x2c4>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_128) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	8adb      	ldrh	r3, [r3, #22]
 8002db0:	222e      	movs	r2, #46	@ 0x2e
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d108      	bne.n	8002dc8 <SPI_Init+0x294>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f042 0230 	orr.w	r2, r2, #48	@ 0x30
 8002dc4:	601a      	str	r2, [r3, #0]
 8002dc6:	e017      	b.n	8002df8 <SPI_Init+0x2c4>
		else if(config->prescaler == SPI_Configurations.Prescaler.CLK_div_256) config -> Port -> CR1 |=  SPI_CR1_BR_2 | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	8adb      	ldrh	r3, [r3, #22]
 8002dcc:	222f      	movs	r2, #47	@ 0x2f
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d108      	bne.n	8002de4 <SPI_Init+0x2b0>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f042 0238 	orr.w	r2, r2, #56	@ 0x38
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e009      	b.n	8002df8 <SPI_Init+0x2c4>
		else {return -1;}
 8002de4:	f04f 33ff 	mov.w	r3, #4294967295
 8002de8:	e0eb      	b.n	8002fc2 <SPI_Init+0x48e>
 8002dea:	bf00      	nop
 8002dec:	40013000 	.word	0x40013000
 8002df0:	40003800 	.word	0x40003800
 8002df4:	40003c00 	.word	0x40003c00

		     if(config->type == SPI_Configurations.Type.Master) config -> Port -> CR1 |= SPI_CR1_MSTR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8b1b      	ldrh	r3, [r3, #24]
 8002dfc:	2232      	movs	r2, #50	@ 0x32
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d108      	bne.n	8002e14 <SPI_Init+0x2e0>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f042 0204 	orr.w	r2, r2, #4
 8002e10:	601a      	str	r2, [r3, #0]
 8002e12:	e010      	b.n	8002e36 <SPI_Init+0x302>
		else if(config->type == SPI_Configurations.Type.Slave) config -> Port -> CR1 &= ~SPI_CR1_MSTR;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	8b1b      	ldrh	r3, [r3, #24]
 8002e18:	2233      	movs	r2, #51	@ 0x33
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d108      	bne.n	8002e30 <SPI_Init+0x2fc>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 0204 	bic.w	r2, r2, #4
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	e002      	b.n	8002e36 <SPI_Init+0x302>
		else {return -1;}
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295
 8002e34:	e0c5      	b.n	8002fc2 <SPI_Init+0x48e>

		     if(config->interrupt == SPI_Configurations.Interrupts.Disable) config -> Port ->  CR2 &= ~(SPI_CR2_TXEIE | SPI_CR2_RXNEIE | SPI_CR2_ERRIE);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8bdb      	ldrh	r3, [r3, #30]
 8002e3a:	2246      	movs	r2, #70	@ 0x46
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d108      	bne.n	8002e52 <SPI_Init+0x31e>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	685a      	ldr	r2, [r3, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002e4e:	605a      	str	r2, [r3, #4]
 8002e50:	e02c      	b.n	8002eac <SPI_Init+0x378>
		else if(config->interrupt == SPI_Configurations.Interrupts.Tx_Buffer_Empty) config -> Port ->  CR2 |= SPI_CR2_TXEIE;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	8bdb      	ldrh	r3, [r3, #30]
 8002e56:	2249      	movs	r2, #73	@ 0x49
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d108      	bne.n	8002e6e <SPI_Init+0x33a>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002e6a:	605a      	str	r2, [r3, #4]
 8002e6c:	e01e      	b.n	8002eac <SPI_Init+0x378>
		else if(config->interrupt == SPI_Configurations.Interrupts.RX_Buffer_not_Empty) config -> Port ->  CR2 |= SPI_CR2_RXNEIE ;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	8bdb      	ldrh	r3, [r3, #30]
 8002e72:	2248      	movs	r2, #72	@ 0x48
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d108      	bne.n	8002e8a <SPI_Init+0x356>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685a      	ldr	r2, [r3, #4]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e86:	605a      	str	r2, [r3, #4]
 8002e88:	e010      	b.n	8002eac <SPI_Init+0x378>
		else if(config->interrupt == SPI_Configurations.Interrupts.Error) config -> Port ->  CR2 |=  SPI_CR2_ERRIE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	8bdb      	ldrh	r3, [r3, #30]
 8002e8e:	2247      	movs	r2, #71	@ 0x47
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d108      	bne.n	8002ea6 <SPI_Init+0x372>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0220 	orr.w	r2, r2, #32
 8002ea2:	605a      	str	r2, [r3, #4]
 8002ea4:	e002      	b.n	8002eac <SPI_Init+0x378>
		else { return -1;}
 8002ea6:	f04f 33ff 	mov.w	r3, #4294967295
 8002eaa:	e08a      	b.n	8002fc2 <SPI_Init+0x48e>

		if(config -> dma == SPI_Configurations.DMA_Type.RX_DMA_Disable){
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	8c1b      	ldrh	r3, [r3, #32]
 8002eb0:	2240      	movs	r2, #64	@ 0x40
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d108      	bne.n	8002ec8 <SPI_Init+0x394>
		    config -> Port -> CR2 &= ~SPI_CR2_RXDMAEN;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685a      	ldr	r2, [r3, #4]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f022 0201 	bic.w	r2, r2, #1
 8002ec4:	605a      	str	r2, [r3, #4]
 8002ec6:	e02f      	b.n	8002f28 <SPI_Init+0x3f4>
		 }
		else if(config -> dma == SPI_Configurations.DMA_Type.RX_DMA_Enable)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8c1b      	ldrh	r3, [r3, #32]
 8002ecc:	223f      	movs	r2, #63	@ 0x3f
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d12a      	bne.n	8002f28 <SPI_Init+0x3f4>
		{
			config -> Port -> CR2 |=  SPI_CR2_RXDMAEN;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0201 	orr.w	r2, r2, #1
 8002ee0:	605a      	str	r2, [r3, #4]
			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0202 	orr.w	r2, r2, #2
 8002ef0:	605a      	str	r2, [r3, #4]
			if(config -> Port == SPI1){
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a35      	ldr	r2, [pc, #212]	@ (8002fcc <SPI_Init+0x498>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <SPI_Init+0x3ce>
				xDMA1_RX_Init();
 8002efc:	f7ff f90a 	bl	8002114 <xDMA1_RX_Init>
 8002f00:	e012      	b.n	8002f28 <SPI_Init+0x3f4>
			}
			else if(config -> Port == SPI2){
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a32      	ldr	r2, [pc, #200]	@ (8002fd0 <SPI_Init+0x49c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d102      	bne.n	8002f12 <SPI_Init+0x3de>
				xDMA2_RX_Init();
 8002f0c:	f7ff f92e 	bl	800216c <xDMA2_RX_Init>
 8002f10:	e00a      	b.n	8002f28 <SPI_Init+0x3f4>
			}
			else if(config -> Port == SPI3){
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd4 <SPI_Init+0x4a0>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d102      	bne.n	8002f22 <SPI_Init+0x3ee>
				xDMA3_RX_Init();
 8002f1c:	f7ff f952 	bl	80021c4 <xDMA3_RX_Init>
 8002f20:	e002      	b.n	8002f28 <SPI_Init+0x3f4>
			}
			else {return -1;}
 8002f22:	f04f 33ff 	mov.w	r3, #4294967295
 8002f26:	e04c      	b.n	8002fc2 <SPI_Init+0x48e>
		}

		if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Disable){
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	8c1b      	ldrh	r3, [r3, #32]
 8002f2c:	223e      	movs	r2, #62	@ 0x3e
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d108      	bne.n	8002f44 <SPI_Init+0x410>
			config -> Port -> CR2 &= ~SPI_CR2_TXDMAEN;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 0202 	bic.w	r2, r2, #2
 8002f40:	605a      	str	r2, [r3, #4]
 8002f42:	e02a      	b.n	8002f9a <SPI_Init+0x466>
		}
		else if(config -> dma == SPI_Configurations.DMA_Type.TX_DMA_Enable){
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	8c1b      	ldrh	r3, [r3, #32]
 8002f48:	223d      	movs	r2, #61	@ 0x3d
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d122      	bne.n	8002f94 <SPI_Init+0x460>
			config -> Port -> CR2 |=  SPI_CR2_TXDMAEN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0202 	orr.w	r2, r2, #2
 8002f5c:	605a      	str	r2, [r3, #4]
			if(config -> Port == SPI1){
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1a      	ldr	r2, [pc, #104]	@ (8002fcc <SPI_Init+0x498>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d102      	bne.n	8002f6e <SPI_Init+0x43a>
				xDMA1_TX_Init();
 8002f68:	f7ff f850 	bl	800200c <xDMA1_TX_Init>
 8002f6c:	e015      	b.n	8002f9a <SPI_Init+0x466>
			}
			else if(config -> Port == SPI2){
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a17      	ldr	r2, [pc, #92]	@ (8002fd0 <SPI_Init+0x49c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d102      	bne.n	8002f7e <SPI_Init+0x44a>
				xDMA2_TX_Init();
 8002f78:	f7ff f874 	bl	8002064 <xDMA2_TX_Init>
 8002f7c:	e00d      	b.n	8002f9a <SPI_Init+0x466>
			}
			else if(config -> Port == SPI3){
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a14      	ldr	r2, [pc, #80]	@ (8002fd4 <SPI_Init+0x4a0>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d102      	bne.n	8002f8e <SPI_Init+0x45a>
				xDMA3_TX_Init();
 8002f88:	f7ff f898 	bl	80020bc <xDMA3_TX_Init>
 8002f8c:	e005      	b.n	8002f9a <SPI_Init+0x466>
			}
			else {return -1;}
 8002f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f92:	e016      	b.n	8002fc2 <SPI_Init+0x48e>
		}
		else {return -1;}
 8002f94:	f04f 33ff 	mov.w	r3, #4294967295
 8002f98:	e013      	b.n	8002fc2 <SPI_Init+0x48e>

		config -> Port -> CR1 &= ~SPI_CR1_SSM ;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002fa8:	601a      	str	r2, [r3, #0]
		config -> Port -> CR2 |=  SPI_CR2_SSOE ;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	685a      	ldr	r2, [r3, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f042 0204 	orr.w	r2, r2, #4
 8002fb8:	605a      	str	r2, [r3, #4]
	else
	{
		return -1;
	}

	return 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e001      	b.n	8002fc2 <SPI_Init+0x48e>
		return -1;
 8002fbe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	370c      	adds	r7, #12
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40013000 	.word	0x40013000
 8002fd0:	40003800 	.word	0x40003800
 8002fd4:	40003c00 	.word	0x40003c00

08002fd8 <SPI_Enable>:

void SPI_Enable(SPI_Config *config)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 |= SPI_CR1_SPE;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fee:	601a      	str	r2, [r3, #0]
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <SPI_Disable>:

void SPI_Disable(SPI_Config *config)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
	config->Port -> CR1 &= ~SPI_CR1_SPE;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003012:	601a      	str	r2, [r3, #0]
}
 8003014:	bf00      	nop
 8003016:	370c      	adds	r7, #12
 8003018:	46bd      	mov	sp, r7
 800301a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301e:	4770      	bx	lr

08003020 <SPI_TRX_Byte>:
	if(config ->Port == SPI3)RCC -> APB1RSTR |= RCC_APB1RSTR_SPI3RST;
}


uint16_t SPI_TRX_Byte(SPI_Config *config,uint16_t tx_data)
{
 8003020:	b480      	push	{r7}
 8003022:	b085      	sub	sp, #20
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	460b      	mov	r3, r1
 800302a:	807b      	strh	r3, [r7, #2]
	volatile uint16_t temp = 0;
 800302c:	2300      	movs	r3, #0
 800302e:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003030:	bf00      	nop
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	f003 0302 	and.w	r3, r3, #2
 800303c:	2b00      	cmp	r3, #0
 800303e:	d0f8      	beq.n	8003032 <SPI_TRX_Byte+0x12>
	config->Port -> DR = tx_data;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	887a      	ldrh	r2, [r7, #2]
 8003046:	60da      	str	r2, [r3, #12]
	while (!(config->Port->SR & SPI_SR_RXNE));
 8003048:	bf00      	nop
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 0301 	and.w	r3, r3, #1
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f8      	beq.n	800304a <SPI_TRX_Byte+0x2a>
	temp = config->Port -> DR;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	b29b      	uxth	r3, r3
 8003060:	81fb      	strh	r3, [r7, #14]
	while (!(config->Port->SR & SPI_SR_TXE));
 8003062:	bf00      	nop
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d0f8      	beq.n	8003064 <SPI_TRX_Byte+0x44>
	while (config->Port->SR & SPI_SR_BSY);
 8003072:	bf00      	nop
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f8      	bne.n	8003074 <SPI_TRX_Byte+0x54>
	return temp;
 8003082:	89fb      	ldrh	r3, [r7, #14]
 8003084:	b29b      	uxth	r3, r3
}
 8003086:	4618      	mov	r0, r3
 8003088:	3714      	adds	r7, #20
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
	...

08003094 <SPI_TRX_Buffer>:




int8_t SPI_TRX_Buffer(SPI_Config *config, uint16_t *tx_buffer,uint16_t *rx_buffer, uint16_t tx_length, uint16_t rx_length)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
 80030a0:	807b      	strh	r3, [r7, #2]

	if((config->dma & SPI_Configurations.DMA_Type.RX_DMA_Enable) || (config->dma & SPI_Configurations.DMA_Type.TX_DMA_Enable))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8c1b      	ldrh	r3, [r3, #32]
 80030a6:	461a      	mov	r2, r3
 80030a8:	233f      	movs	r3, #63	@ 0x3f
 80030aa:	4013      	ands	r3, r2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d107      	bne.n	80030c0 <SPI_TRX_Buffer+0x2c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8c1b      	ldrh	r3, [r3, #32]
 80030b4:	461a      	mov	r2, r3
 80030b6:	233d      	movs	r3, #61	@ 0x3d
 80030b8:	4013      	ands	r3, r2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 816e 	beq.w	800339c <SPI_TRX_Buffer+0x308>
	{
		if(config->Port == SPI1)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a89      	ldr	r2, [pc, #548]	@ (80032ec <SPI_TRX_Buffer+0x258>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d178      	bne.n	80031bc <SPI_TRX_Buffer+0x128>
		{
			xDMA1_TX.memory_address = (uint32_t)&tx_buffer[0];
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	4a88      	ldr	r2, [pc, #544]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 80030ce:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	8a5b      	ldrh	r3, [r3, #18]
 80030d4:	220b      	movs	r2, #11
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d103      	bne.n	80030e2 <SPI_TRX_Buffer+0x4e>
 80030da:	2200      	movs	r2, #0
 80030dc:	4b84      	ldr	r3, [pc, #528]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 80030de:	629a      	str	r2, [r3, #40]	@ 0x28
 80030e0:	e008      	b.n	80030f4 <SPI_TRX_Buffer+0x60>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8a5b      	ldrh	r3, [r3, #18]
 80030e6:	220c      	movs	r2, #12
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d103      	bne.n	80030f4 <SPI_TRX_Buffer+0x60>
 80030ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80030f0:	4b7f      	ldr	r3, [pc, #508]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 80030f2:	629a      	str	r2, [r3, #40]	@ 0x28
			xDMA1_TX.peripheral_address = (uint32_t)&config->Port->DR;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	330c      	adds	r3, #12
 80030fa:	461a      	mov	r2, r3
 80030fc:	4b7c      	ldr	r3, [pc, #496]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 80030fe:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8a5b      	ldrh	r3, [r3, #18]
 8003104:	220b      	movs	r2, #11
 8003106:	4293      	cmp	r3, r2
 8003108:	d103      	bne.n	8003112 <SPI_TRX_Buffer+0x7e>
 800310a:	2200      	movs	r2, #0
 800310c:	4b78      	ldr	r3, [pc, #480]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 800310e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003110:	e008      	b.n	8003124 <SPI_TRX_Buffer+0x90>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	8a5b      	ldrh	r3, [r3, #18]
 8003116:	220c      	movs	r2, #12
 8003118:	4293      	cmp	r3, r2
 800311a:	d103      	bne.n	8003124 <SPI_TRX_Buffer+0x90>
 800311c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003120:	4b73      	ldr	r3, [pc, #460]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 8003122:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA1_TX.buffer_length = tx_length + 2;
 8003124:	887b      	ldrh	r3, [r7, #2]
 8003126:	3302      	adds	r3, #2
 8003128:	b29a      	uxth	r2, r3
 800312a:	4b71      	ldr	r3, [pc, #452]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 800312c:	869a      	strh	r2, [r3, #52]	@ 0x34
			xDMA1_TX.memory_pointer_increment = DMA_Configuration.Memory_Pointer_Increment.Enable;
 800312e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003132:	b29a      	uxth	r2, r3
 8003134:	4b6e      	ldr	r3, [pc, #440]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 8003136:	841a      	strh	r2, [r3, #32]
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
			xDMA1_RX.memory_address = (uint32_t)&rx_buffer[0];
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a6e      	ldr	r2, [pc, #440]	@ (80032f4 <SPI_TRX_Buffer+0x260>)
 800313c:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8a5b      	ldrh	r3, [r3, #18]
 8003142:	220b      	movs	r2, #11
 8003144:	4293      	cmp	r3, r2
 8003146:	d103      	bne.n	8003150 <SPI_TRX_Buffer+0xbc>
 8003148:	2200      	movs	r2, #0
 800314a:	4b69      	ldr	r3, [pc, #420]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 800314c:	629a      	str	r2, [r3, #40]	@ 0x28
 800314e:	e008      	b.n	8003162 <SPI_TRX_Buffer+0xce>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.half_word;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8a5b      	ldrh	r3, [r3, #18]
 8003154:	220c      	movs	r2, #12
 8003156:	4293      	cmp	r3, r2
 8003158:	d103      	bne.n	8003162 <SPI_TRX_Buffer+0xce>
 800315a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800315e:	4b64      	ldr	r3, [pc, #400]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 8003160:	629a      	str	r2, [r3, #40]	@ 0x28
			xDMA1_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	330c      	adds	r3, #12
 8003168:	461a      	mov	r2, r3
 800316a:	4b62      	ldr	r3, [pc, #392]	@ (80032f4 <SPI_TRX_Buffer+0x260>)
 800316c:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.byte;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8a5b      	ldrh	r3, [r3, #18]
 8003172:	220b      	movs	r2, #11
 8003174:	4293      	cmp	r3, r2
 8003176:	d103      	bne.n	8003180 <SPI_TRX_Buffer+0xec>
 8003178:	2200      	movs	r2, #0
 800317a:	4b5d      	ldr	r3, [pc, #372]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 800317c:	625a      	str	r2, [r3, #36]	@ 0x24
 800317e:	e008      	b.n	8003192 <SPI_TRX_Buffer+0xfe>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA1_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	8a5b      	ldrh	r3, [r3, #18]
 8003184:	220c      	movs	r2, #12
 8003186:	4293      	cmp	r3, r2
 8003188:	d103      	bne.n	8003192 <SPI_TRX_Buffer+0xfe>
 800318a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800318e:	4b58      	ldr	r3, [pc, #352]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 8003190:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA1_RX.buffer_length = rx_length;
 8003192:	4a58      	ldr	r2, [pc, #352]	@ (80032f4 <SPI_TRX_Buffer+0x260>)
 8003194:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003196:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA1_TX);
 8003198:	4855      	ldr	r0, [pc, #340]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 800319a:	f7fd ff47 	bl	800102c <DMA_Set_Target>
//			DMA_Set_Target(&xDMA1_RX);
			DMA_Set_Trigger(&xDMA1_TX);
 800319e:	4854      	ldr	r0, [pc, #336]	@ (80032f0 <SPI_TRX_Buffer+0x25c>)
 80031a0:	f7fd ff82 	bl	80010a8 <DMA_Set_Trigger>
//			DMA_Set_Trigger(&xDMA1_RX);

			while((DMA2_Stream3_Flag.Transfer_Complete_Flag == false)){}
 80031a4:	bf00      	nop
 80031a6:	4b54      	ldr	r3, [pc, #336]	@ (80032f8 <SPI_TRX_Buffer+0x264>)
 80031a8:	781b      	ldrb	r3, [r3, #0]
 80031aa:	f083 0301 	eor.w	r3, r3, #1
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f8      	bne.n	80031a6 <SPI_TRX_Buffer+0x112>
			DMA2_Stream3_Flag.Transfer_Complete_Flag = false;
 80031b4:	4b50      	ldr	r3, [pc, #320]	@ (80032f8 <SPI_TRX_Buffer+0x264>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	701a      	strb	r2, [r3, #0]
		if(config->Port == SPI1)
 80031ba:	e107      	b.n	80033cc <SPI_TRX_Buffer+0x338>


		}
		else if(config->Port == SPI2)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a4e      	ldr	r2, [pc, #312]	@ (80032fc <SPI_TRX_Buffer+0x268>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d168      	bne.n	8003298 <SPI_TRX_Buffer+0x204>
		{
			xDMA2_TX.memory_address = (uint32_t)&tx_buffer[0];
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4a4d      	ldr	r2, [pc, #308]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 80031ca:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	8a5b      	ldrh	r3, [r3, #18]
 80031d0:	220b      	movs	r2, #11
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d103      	bne.n	80031de <SPI_TRX_Buffer+0x14a>
 80031d6:	2200      	movs	r2, #0
 80031d8:	4b49      	ldr	r3, [pc, #292]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 80031da:	629a      	str	r2, [r3, #40]	@ 0x28
 80031dc:	e008      	b.n	80031f0 <SPI_TRX_Buffer+0x15c>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8a5b      	ldrh	r3, [r3, #18]
 80031e2:	220c      	movs	r2, #12
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d103      	bne.n	80031f0 <SPI_TRX_Buffer+0x15c>
 80031e8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80031ec:	4b44      	ldr	r3, [pc, #272]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 80031ee:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA2_TX.peripheral_address = (uint32_t)&config->Port->DR;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	330c      	adds	r3, #12
 80031f6:	461a      	mov	r2, r3
 80031f8:	4b41      	ldr	r3, [pc, #260]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 80031fa:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8a5b      	ldrh	r3, [r3, #18]
 8003200:	220b      	movs	r2, #11
 8003202:	4293      	cmp	r3, r2
 8003204:	d103      	bne.n	800320e <SPI_TRX_Buffer+0x17a>
 8003206:	2200      	movs	r2, #0
 8003208:	4b3d      	ldr	r3, [pc, #244]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 800320a:	625a      	str	r2, [r3, #36]	@ 0x24
 800320c:	e008      	b.n	8003220 <SPI_TRX_Buffer+0x18c>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	8a5b      	ldrh	r3, [r3, #18]
 8003212:	220c      	movs	r2, #12
 8003214:	4293      	cmp	r3, r2
 8003216:	d103      	bne.n	8003220 <SPI_TRX_Buffer+0x18c>
 8003218:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800321c:	4b38      	ldr	r3, [pc, #224]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 800321e:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA2_RX.buffer_length = tx_length + 2;
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	3302      	adds	r3, #2
 8003224:	b29a      	uxth	r2, r3
 8003226:	4b37      	ldr	r3, [pc, #220]	@ (8003304 <SPI_TRX_Buffer+0x270>)
 8003228:	869a      	strh	r2, [r3, #52]	@ 0x34

			xDMA2_RX.memory_address = (uint32_t)&rx_buffer[0];
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a35      	ldr	r2, [pc, #212]	@ (8003304 <SPI_TRX_Buffer+0x270>)
 800322e:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	8a5b      	ldrh	r3, [r3, #18]
 8003234:	220b      	movs	r2, #11
 8003236:	4293      	cmp	r3, r2
 8003238:	d103      	bne.n	8003242 <SPI_TRX_Buffer+0x1ae>
 800323a:	2200      	movs	r2, #0
 800323c:	4b30      	ldr	r3, [pc, #192]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 800323e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003240:	e008      	b.n	8003254 <SPI_TRX_Buffer+0x1c0>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	8a5b      	ldrh	r3, [r3, #18]
 8003246:	220c      	movs	r2, #12
 8003248:	4293      	cmp	r3, r2
 800324a:	d103      	bne.n	8003254 <SPI_TRX_Buffer+0x1c0>
 800324c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003250:	4b2b      	ldr	r3, [pc, #172]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 8003252:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA2_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	330c      	adds	r3, #12
 800325a:	461a      	mov	r2, r3
 800325c:	4b29      	ldr	r3, [pc, #164]	@ (8003304 <SPI_TRX_Buffer+0x270>)
 800325e:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA2_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	8a5b      	ldrh	r3, [r3, #18]
 8003264:	220b      	movs	r2, #11
 8003266:	4293      	cmp	r3, r2
 8003268:	d103      	bne.n	8003272 <SPI_TRX_Buffer+0x1de>
 800326a:	2200      	movs	r2, #0
 800326c:	4b24      	ldr	r3, [pc, #144]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 800326e:	625a      	str	r2, [r3, #36]	@ 0x24
 8003270:	e008      	b.n	8003284 <SPI_TRX_Buffer+0x1f0>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA2_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	8a5b      	ldrh	r3, [r3, #18]
 8003276:	220c      	movs	r2, #12
 8003278:	4293      	cmp	r3, r2
 800327a:	d103      	bne.n	8003284 <SPI_TRX_Buffer+0x1f0>
 800327c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003280:	4b1f      	ldr	r3, [pc, #124]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 8003282:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA2_RX.buffer_length = rx_length;
 8003284:	4a1f      	ldr	r2, [pc, #124]	@ (8003304 <SPI_TRX_Buffer+0x270>)
 8003286:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003288:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA2_TX);
 800328a:	481d      	ldr	r0, [pc, #116]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 800328c:	f7fd fece 	bl	800102c <DMA_Set_Target>
//			DMA_Set_Target(&xDMA2_RX);
			DMA_Set_Trigger(&xDMA2_TX);
 8003290:	481b      	ldr	r0, [pc, #108]	@ (8003300 <SPI_TRX_Buffer+0x26c>)
 8003292:	f7fd ff09 	bl	80010a8 <DMA_Set_Trigger>
		if(config->Port == SPI1)
 8003296:	e099      	b.n	80033cc <SPI_TRX_Buffer+0x338>
//			DMA_Set_Trigger(&xDMA2_RX);

		}
		else if(config->Port == SPI3)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a1a      	ldr	r2, [pc, #104]	@ (8003308 <SPI_TRX_Buffer+0x274>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d179      	bne.n	8003396 <SPI_TRX_Buffer+0x302>
		{
			xDMA3_TX.memory_address = (uint32_t)&tx_buffer[0];
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	4a19      	ldr	r2, [pc, #100]	@ (800330c <SPI_TRX_Buffer+0x278>)
 80032a6:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8a5b      	ldrh	r3, [r3, #18]
 80032ac:	220b      	movs	r2, #11
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d103      	bne.n	80032ba <SPI_TRX_Buffer+0x226>
 80032b2:	2200      	movs	r2, #0
 80032b4:	4b15      	ldr	r3, [pc, #84]	@ (800330c <SPI_TRX_Buffer+0x278>)
 80032b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80032b8:	e008      	b.n	80032cc <SPI_TRX_Buffer+0x238>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	8a5b      	ldrh	r3, [r3, #18]
 80032be:	220c      	movs	r2, #12
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d103      	bne.n	80032cc <SPI_TRX_Buffer+0x238>
 80032c4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80032c8:	4b10      	ldr	r3, [pc, #64]	@ (800330c <SPI_TRX_Buffer+0x278>)
 80032ca:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA3_TX.peripheral_address = (uint32_t)&config->Port->DR;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	330c      	adds	r3, #12
 80032d2:	461a      	mov	r2, r3
 80032d4:	4b0d      	ldr	r3, [pc, #52]	@ (800330c <SPI_TRX_Buffer+0x278>)
 80032d6:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	8a5b      	ldrh	r3, [r3, #18]
 80032dc:	220b      	movs	r2, #11
 80032de:	4293      	cmp	r3, r2
 80032e0:	d116      	bne.n	8003310 <SPI_TRX_Buffer+0x27c>
 80032e2:	2200      	movs	r2, #0
 80032e4:	4b09      	ldr	r3, [pc, #36]	@ (800330c <SPI_TRX_Buffer+0x278>)
 80032e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80032e8:	e01b      	b.n	8003322 <SPI_TRX_Buffer+0x28e>
 80032ea:	bf00      	nop
 80032ec:	40013000 	.word	0x40013000
 80032f0:	200000a0 	.word	0x200000a0
 80032f4:	200000d8 	.word	0x200000d8
 80032f8:	20000078 	.word	0x20000078
 80032fc:	40003800 	.word	0x40003800
 8003300:	20000110 	.word	0x20000110
 8003304:	20000148 	.word	0x20000148
 8003308:	40003c00 	.word	0x40003c00
 800330c:	20000180 	.word	0x20000180
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	8a5b      	ldrh	r3, [r3, #18]
 8003314:	220c      	movs	r2, #12
 8003316:	4293      	cmp	r3, r2
 8003318:	d103      	bne.n	8003322 <SPI_TRX_Buffer+0x28e>
 800331a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800331e:	4b2e      	ldr	r3, [pc, #184]	@ (80033d8 <SPI_TRX_Buffer+0x344>)
 8003320:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA3_RX.buffer_length = tx_length;
 8003322:	4a2e      	ldr	r2, [pc, #184]	@ (80033dc <SPI_TRX_Buffer+0x348>)
 8003324:	887b      	ldrh	r3, [r7, #2]
 8003326:	8693      	strh	r3, [r2, #52]	@ 0x34

			xDMA3_RX.memory_address = (uint32_t)&rx_buffer[0];
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a2c      	ldr	r2, [pc, #176]	@ (80033dc <SPI_TRX_Buffer+0x348>)
 800332c:	6313      	str	r3, [r2, #48]	@ 0x30
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.memory_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	8a5b      	ldrh	r3, [r3, #18]
 8003332:	220b      	movs	r2, #11
 8003334:	4293      	cmp	r3, r2
 8003336:	d103      	bne.n	8003340 <SPI_TRX_Buffer+0x2ac>
 8003338:	2200      	movs	r2, #0
 800333a:	4b27      	ldr	r3, [pc, #156]	@ (80033d8 <SPI_TRX_Buffer+0x344>)
 800333c:	629a      	str	r2, [r3, #40]	@ 0x28
 800333e:	e008      	b.n	8003352 <SPI_TRX_Buffer+0x2be>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.memory_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	8a5b      	ldrh	r3, [r3, #18]
 8003344:	220c      	movs	r2, #12
 8003346:	4293      	cmp	r3, r2
 8003348:	d103      	bne.n	8003352 <SPI_TRX_Buffer+0x2be>
 800334a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800334e:	4b22      	ldr	r3, [pc, #136]	@ (80033d8 <SPI_TRX_Buffer+0x344>)
 8003350:	629a      	str	r2, [r3, #40]	@ 0x28

			xDMA3_RX.peripheral_address = (uint32_t)&config->Port->DR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	330c      	adds	r3, #12
 8003358:	461a      	mov	r2, r3
 800335a:	4b20      	ldr	r3, [pc, #128]	@ (80033dc <SPI_TRX_Buffer+0x348>)
 800335c:	62da      	str	r2, [r3, #44]	@ 0x2c
			if(config->data_format == SPI_Configurations.Data_Format.Bit8) xDMA3_TX.peripheral_data_size = DMA_Configuration.Memory_Data_Size.byte;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8a5b      	ldrh	r3, [r3, #18]
 8003362:	220b      	movs	r2, #11
 8003364:	4293      	cmp	r3, r2
 8003366:	d103      	bne.n	8003370 <SPI_TRX_Buffer+0x2dc>
 8003368:	2200      	movs	r2, #0
 800336a:	4b1b      	ldr	r3, [pc, #108]	@ (80033d8 <SPI_TRX_Buffer+0x344>)
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24
 800336e:	e008      	b.n	8003382 <SPI_TRX_Buffer+0x2ee>
			else if(config->data_format == SPI_Configurations.Data_Format.Bit16) xDMA3_TX.peripheral_data_size = DMA_Configuration.Peripheral_Data_Size.half_word;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8a5b      	ldrh	r3, [r3, #18]
 8003374:	220c      	movs	r2, #12
 8003376:	4293      	cmp	r3, r2
 8003378:	d103      	bne.n	8003382 <SPI_TRX_Buffer+0x2ee>
 800337a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800337e:	4b16      	ldr	r3, [pc, #88]	@ (80033d8 <SPI_TRX_Buffer+0x344>)
 8003380:	625a      	str	r2, [r3, #36]	@ 0x24
			xDMA3_RX.buffer_length = rx_length;
 8003382:	4a16      	ldr	r2, [pc, #88]	@ (80033dc <SPI_TRX_Buffer+0x348>)
 8003384:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003386:	8693      	strh	r3, [r2, #52]	@ 0x34

			DMA_Set_Target(&xDMA3_TX);
 8003388:	4813      	ldr	r0, [pc, #76]	@ (80033d8 <SPI_TRX_Buffer+0x344>)
 800338a:	f7fd fe4f 	bl	800102c <DMA_Set_Target>
//			DMA_Set_Target(&xDMA3_RX);
			DMA_Set_Trigger(&xDMA3_TX);
 800338e:	4812      	ldr	r0, [pc, #72]	@ (80033d8 <SPI_TRX_Buffer+0x344>)
 8003390:	f7fd fe8a 	bl	80010a8 <DMA_Set_Trigger>
		if(config->Port == SPI1)
 8003394:	e01a      	b.n	80033cc <SPI_TRX_Buffer+0x338>
//			DMA_Set_Trigger(&xDMA3_RX);

		}
		else
		{
			return -1;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295
 800339a:	e018      	b.n	80033ce <SPI_TRX_Buffer+0x33a>
		}
	}
	else
	{
		for(uint16_t i = 0; i < tx_length; i++)
 800339c:	2300      	movs	r3, #0
 800339e:	82fb      	strh	r3, [r7, #22]
 80033a0:	e010      	b.n	80033c4 <SPI_TRX_Buffer+0x330>
		{
			rx_buffer[i] = SPI_TRX_Byte(config,tx_buffer[i]);
 80033a2:	8afb      	ldrh	r3, [r7, #22]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	4413      	add	r3, r2
 80033aa:	8819      	ldrh	r1, [r3, #0]
 80033ac:	8afb      	ldrh	r3, [r7, #22]
 80033ae:	005b      	lsls	r3, r3, #1
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	18d4      	adds	r4, r2, r3
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f7ff fe33 	bl	8003020 <SPI_TRX_Byte>
 80033ba:	4603      	mov	r3, r0
 80033bc:	8023      	strh	r3, [r4, #0]
		for(uint16_t i = 0; i < tx_length; i++)
 80033be:	8afb      	ldrh	r3, [r7, #22]
 80033c0:	3301      	adds	r3, #1
 80033c2:	82fb      	strh	r3, [r7, #22]
 80033c4:	8afa      	ldrh	r2, [r7, #22]
 80033c6:	887b      	ldrh	r3, [r7, #2]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d3ea      	bcc.n	80033a2 <SPI_TRX_Buffer+0x30e>
		}
	}

	return 1;
 80033cc:	2301      	movs	r3, #1
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	371c      	adds	r7, #28
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000180 	.word	0x20000180
 80033dc:	200001b8 	.word	0x200001b8

080033e0 <SPI_NSS_High>:


void SPI_NSS_High(SPI_Config *config)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
	GPIO_Pin_High(config->NSS_Port, config->NSS_Pin);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	7b1b      	ldrb	r3, [r3, #12]
 80033f0:	4619      	mov	r1, r3
 80033f2:	4610      	mov	r0, r2
 80033f4:	f7fe fdf5 	bl	8001fe2 <GPIO_Pin_High>
}
 80033f8:	bf00      	nop
 80033fa:	3708      	adds	r7, #8
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}

08003400 <SPI_Data_Format_Update>:

void SPI_Data_Format_Update(SPI_Config *config)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
	SPI_Disable(config);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff fdf7 	bl	8002ffc <SPI_Disable>
	if(config -> data_format == SPI_Configurations.Data_Format.Bit8) config -> Port -> CR1 &= ~SPI_CR1_DFF;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	8a5b      	ldrh	r3, [r3, #18]
 8003412:	220b      	movs	r2, #11
 8003414:	4293      	cmp	r3, r2
 8003416:	d108      	bne.n	800342a <SPI_Data_Format_Update+0x2a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003426:	601a      	str	r2, [r3, #0]
 8003428:	e00c      	b.n	8003444 <SPI_Data_Format_Update+0x44>
	else if(config -> data_format == SPI_Configurations.Data_Format.Bit16) config -> Port -> CR1 |=  SPI_CR1_DFF;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	8a5b      	ldrh	r3, [r3, #18]
 800342e:	220c      	movs	r2, #12
 8003430:	4293      	cmp	r3, r2
 8003432:	d107      	bne.n	8003444 <SPI_Data_Format_Update+0x44>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003442:	601a      	str	r2, [r3, #0]
	SPI_Enable(config);
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f7ff fdc7 	bl	8002fd8 <SPI_Enable>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <SPI_NSS_Low>:

void SPI_NSS_Low(SPI_Config *config)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
	GPIO_Pin_Low(config->NSS_Port, config->NSS_Pin);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	689a      	ldr	r2, [r3, #8]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7b1b      	ldrb	r3, [r3, #12]
 8003462:	4619      	mov	r1, r3
 8003464:	4610      	mov	r0, r2
 8003466:	f7fe fda7 	bl	8001fb8 <GPIO_Pin_Low>
}
 800346a:	bf00      	nop
 800346c:	3708      	adds	r7, #8
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
	...

08003474 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003474:	b480      	push	{r7}
 8003476:	b083      	sub	sp, #12
 8003478:	af00      	add	r7, sp, #0
 800347a:	4603      	mov	r3, r0
 800347c:	6039      	str	r1, [r7, #0]
 800347e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003484:	2b00      	cmp	r3, #0
 8003486:	db0a      	blt.n	800349e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	b2da      	uxtb	r2, r3
 800348c:	490c      	ldr	r1, [pc, #48]	@ (80034c0 <__NVIC_SetPriority+0x4c>)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	0112      	lsls	r2, r2, #4
 8003494:	b2d2      	uxtb	r2, r2
 8003496:	440b      	add	r3, r1
 8003498:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800349c:	e00a      	b.n	80034b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	4908      	ldr	r1, [pc, #32]	@ (80034c4 <__NVIC_SetPriority+0x50>)
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	3b04      	subs	r3, #4
 80034ac:	0112      	lsls	r2, r2, #4
 80034ae:	b2d2      	uxtb	r2, r2
 80034b0:	440b      	add	r3, r1
 80034b2:	761a      	strb	r2, [r3, #24]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	e000e100 	.word	0xe000e100
 80034c4:	e000ed00 	.word	0xe000ed00

080034c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3b01      	subs	r3, #1
 80034d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034d8:	d301      	bcc.n	80034de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034da:	2301      	movs	r3, #1
 80034dc:	e00f      	b.n	80034fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034de:	4a0a      	ldr	r2, [pc, #40]	@ (8003508 <SysTick_Config+0x40>)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3b01      	subs	r3, #1
 80034e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e6:	210f      	movs	r1, #15
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f7ff ffc2 	bl	8003474 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f0:	4b05      	ldr	r3, [pc, #20]	@ (8003508 <SysTick_Config+0x40>)
 80034f2:	2200      	movs	r2, #0
 80034f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f6:	4b04      	ldr	r3, [pc, #16]	@ (8003508 <SysTick_Config+0x40>)
 80034f8:	2207      	movs	r2, #7
 80034fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
 8003506:	bf00      	nop
 8003508:	e000e010 	.word	0xe000e010

0800350c <MCU_Clock_Setup>:
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
	uint8_t pll_m = 8;
 8003512:	2308      	movs	r3, #8
 8003514:	71fb      	strb	r3, [r7, #7]
	uint16_t pll_n = 336; //192
 8003516:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800351a:	80bb      	strh	r3, [r7, #4]
	uint8_t pll_p = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	70fb      	strb	r3, [r7, #3]
	uint8_t pll_q = 7;
 8003520:	2307      	movs	r3, #7
 8003522:	70bb      	strb	r3, [r7, #2]
	RCC->PLLCFGR = 0x00000000;
 8003524:	4b3c      	ldr	r3, [pc, #240]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 8003526:	2200      	movs	r2, #0
 8003528:	605a      	str	r2, [r3, #4]
	RCC -> CR |= RCC_CR_HSEON;
 800352a:	4b3b      	ldr	r3, [pc, #236]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4a3a      	ldr	r2, [pc, #232]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 8003530:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003534:	6013      	str	r3, [r2, #0]
	while(!(RCC -> CR & RCC_CR_HSERDY)){}
 8003536:	bf00      	nop
 8003538:	4b37      	ldr	r3, [pc, #220]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003540:	2b00      	cmp	r3, #0
 8003542:	d0f9      	beq.n	8003538 <MCU_Clock_Setup+0x2c>
	RCC -> APB1ENR |= RCC_APB1ENR_PWREN;
 8003544:	4b34      	ldr	r3, [pc, #208]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003548:	4a33      	ldr	r2, [pc, #204]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800354a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	@ 0x40
	PWR ->CR |= PWR_CR_VOS;
 8003550:	4b32      	ldr	r3, [pc, #200]	@ (800361c <MCU_Clock_Setup+0x110>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a31      	ldr	r2, [pc, #196]	@ (800361c <MCU_Clock_Setup+0x110>)
 8003556:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800355a:	6013      	str	r3, [r2, #0]
	FLASH -> ACR |= FLASH_ACR_ICEN | FLASH_ACR_PRFTEN | FLASH_ACR_DCEN | FLASH_ACR_LATENCY_5WS;
 800355c:	4b30      	ldr	r3, [pc, #192]	@ (8003620 <MCU_Clock_Setup+0x114>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	4a2f      	ldr	r2, [pc, #188]	@ (8003620 <MCU_Clock_Setup+0x114>)
 8003562:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003566:	f043 0305 	orr.w	r3, r3, #5
 800356a:	6013      	str	r3, [r2, #0]
	RCC->PLLCFGR |= (pll_q << 24) | (pll_p << 16) | (pll_n << 6) | (pll_m << 0);
 800356c:	4b2a      	ldr	r3, [pc, #168]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	78ba      	ldrb	r2, [r7, #2]
 8003572:	0611      	lsls	r1, r2, #24
 8003574:	78fa      	ldrb	r2, [r7, #3]
 8003576:	0412      	lsls	r2, r2, #16
 8003578:	4311      	orrs	r1, r2
 800357a:	88ba      	ldrh	r2, [r7, #4]
 800357c:	0192      	lsls	r2, r2, #6
 800357e:	4311      	orrs	r1, r2
 8003580:	79fa      	ldrb	r2, [r7, #7]
 8003582:	430a      	orrs	r2, r1
 8003584:	4611      	mov	r1, r2
 8003586:	4a24      	ldr	r2, [pc, #144]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 8003588:	430b      	orrs	r3, r1
 800358a:	6053      	str	r3, [r2, #4]
	RCC ->PLLCFGR |= 1 << 22;
 800358c:	4b22      	ldr	r3, [pc, #136]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	4a21      	ldr	r2, [pc, #132]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 8003592:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003596:	6053      	str	r3, [r2, #4]
	RCC -> CFGR |= RCC_CFGR_HPRE_DIV1;
 8003598:	4b1f      	ldr	r3, [pc, #124]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800359a:	4a1f      	ldr	r2, [pc, #124]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE1_DIV4;
 80035a0:	4b1d      	ldr	r3, [pc, #116]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	4a1c      	ldr	r2, [pc, #112]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035a6:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 80035aa:	6093      	str	r3, [r2, #8]
	RCC -> CFGR |= RCC_CFGR_PPRE2_DIV2;
 80035ac:	4b1a      	ldr	r3, [pc, #104]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a19      	ldr	r2, [pc, #100]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80035b6:	6093      	str	r3, [r2, #8]
	RCC -> CR |= RCC_CR_PLLON;
 80035b8:	4b17      	ldr	r3, [pc, #92]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a16      	ldr	r2, [pc, #88]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80035c2:	6013      	str	r3, [r2, #0]
	while(!(RCC->CR & RCC_CR_PLLRDY)){}
 80035c4:	bf00      	nop
 80035c6:	4b14      	ldr	r3, [pc, #80]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f9      	beq.n	80035c6 <MCU_Clock_Setup+0xba>
	RCC -> CFGR |= RCC_CFGR_SW_PLL;
 80035d2:	4b11      	ldr	r3, [pc, #68]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	4a10      	ldr	r2, [pc, #64]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035d8:	f043 0302 	orr.w	r3, r3, #2
 80035dc:	6093      	str	r3, [r2, #8]
	while((RCC -> CFGR & RCC_CFGR_SWS_PLL) != RCC_CFGR_SWS_PLL);
 80035de:	bf00      	nop
 80035e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 80035e2:	689b      	ldr	r3, [r3, #8]
 80035e4:	f003 0308 	and.w	r3, r3, #8
 80035e8:	2b08      	cmp	r3, #8
 80035ea:	d1f9      	bne.n	80035e0 <MCU_Clock_Setup+0xd4>
	SystemCoreClockUpdate();
 80035ec:	f000 f8f8 	bl	80037e0 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock/168);
 80035f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003624 <MCU_Clock_Setup+0x118>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	08db      	lsrs	r3, r3, #3
 80035f6:	4a0c      	ldr	r2, [pc, #48]	@ (8003628 <MCU_Clock_Setup+0x11c>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	085b      	lsrs	r3, r3, #1
 80035fe:	4618      	mov	r0, r3
 8003600:	f7ff ff62 	bl	80034c8 <SysTick_Config>
	RCC -> APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8003604:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 8003606:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003608:	4a03      	ldr	r2, [pc, #12]	@ (8003618 <MCU_Clock_Setup+0x10c>)
 800360a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800360e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8003610:	bf00      	nop
 8003612:	3708      	adds	r7, #8
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	40007000 	.word	0x40007000
 8003620:	40023c00 	.word	0x40023c00
 8003624:	20000000 	.word	0x20000000
 8003628:	18618619 	.word	0x18618619

0800362c <Delay_Config>:
{
 800362c:	b480      	push	{r7}
 800362e:	af00      	add	r7, sp, #0
	SysTick->CTRL = 0;
 8003630:	4b09      	ldr	r3, [pc, #36]	@ (8003658 <Delay_Config+0x2c>)
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0x00FFFFFF;
 8003636:	4b08      	ldr	r3, [pc, #32]	@ (8003658 <Delay_Config+0x2c>)
 8003638:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 800363c:	605a      	str	r2, [r3, #4]
	SysTick->VAL = 0;
 800363e:	4b06      	ldr	r3, [pc, #24]	@ (8003658 <Delay_Config+0x2c>)
 8003640:	2200      	movs	r2, #0
 8003642:	609a      	str	r2, [r3, #8]
	SysTick->CTRL = 5;
 8003644:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <Delay_Config+0x2c>)
 8003646:	2205      	movs	r2, #5
 8003648:	601a      	str	r2, [r3, #0]
	return (0UL);                                                     /* Function successful */
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <Delay_ms>:
{
 800365c:	b480      	push	{r7}
 800365e:	b085      	sub	sp, #20
 8003660:	af00      	add	r7, sp, #0
 8003662:	ed87 0a01 	vstr	s0, [r7, #4]
	unsigned long x =0x29040 * (ms);
 8003666:	edd7 7a01 	vldr	s15, [r7, #4]
 800366a:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80036b0 <Delay_ms+0x54>
 800366e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003672:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003676:	ee17 3a90 	vmov	r3, s15
 800367a:	60fb      	str	r3, [r7, #12]
	SysTick->LOAD =  x ;
 800367c:	4a0d      	ldr	r2, [pc, #52]	@ (80036b4 <Delay_ms+0x58>)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6053      	str	r3, [r2, #4]
	SysTick->VAL = 0;
 8003682:	4b0c      	ldr	r3, [pc, #48]	@ (80036b4 <Delay_ms+0x58>)
 8003684:	2200      	movs	r2, #0
 8003686:	609a      	str	r2, [r3, #8]
	SysTick->CTRL |= 1;
 8003688:	4b0a      	ldr	r3, [pc, #40]	@ (80036b4 <Delay_ms+0x58>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a09      	ldr	r2, [pc, #36]	@ (80036b4 <Delay_ms+0x58>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6013      	str	r3, [r2, #0]
	while((SysTick->CTRL & 0x00010000) == 0);
 8003694:	bf00      	nop
 8003696:	4b07      	ldr	r3, [pc, #28]	@ (80036b4 <Delay_ms+0x58>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d0f9      	beq.n	8003696 <Delay_ms+0x3a>
	return (0UL);                                                     /* Function successful */
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	48241000 	.word	0x48241000
 80036b4:	e000e010 	.word	0xe000e010

080036b8 <Delay_s>:


__STATIC_INLINE uint32_t Delay_s(unsigned long s)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
	s = s * 1000;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80036c6:	fb02 f303 	mul.w	r3, r2, r3
 80036ca:	607b      	str	r3, [r7, #4]
	for (; s>0; s--)
 80036cc:	e006      	b.n	80036dc <Delay_s+0x24>
	{
		Delay_ms(1);
 80036ce:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80036d2:	f7ff ffc3 	bl	800365c <Delay_ms>
	for (; s>0; s--)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	3b01      	subs	r3, #1
 80036da:	607b      	str	r3, [r7, #4]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d1f5      	bne.n	80036ce <Delay_s+0x16>
	}
	return (0UL);
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3708      	adds	r7, #8
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}

080036ec <main>:
SPI_Config x;

GC9A01_Typedef GC9A01_Driver;

int main(void)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
	MCU_Clock_Setup();
 80036f2:	f7ff ff0b 	bl	800350c <MCU_Clock_Setup>
	Delay_Config();
 80036f6:	f7ff ff99 	bl	800362c <Delay_Config>




	GC9A01_Driver.SPI_Driver.NSS_Pin = 3;
 80036fa:	4b2d      	ldr	r3, [pc, #180]	@ (80037b0 <main+0xc4>)
 80036fc:	2203      	movs	r2, #3
 80036fe:	731a      	strb	r2, [r3, #12]
	GC9A01_Driver.SPI_Driver.NSS_Port = GPIOA;
 8003700:	4b2b      	ldr	r3, [pc, #172]	@ (80037b0 <main+0xc4>)
 8003702:	4a2c      	ldr	r2, [pc, #176]	@ (80037b4 <main+0xc8>)
 8003704:	609a      	str	r2, [r3, #8]
	GC9A01_Driver.SPI_Driver.clock_pin = SPI_Configurations.Pin._SPI1_.CLK1.PA5;
 8003706:	220f      	movs	r2, #15
 8003708:	4b29      	ldr	r3, [pc, #164]	@ (80037b0 <main+0xc4>)
 800370a:	711a      	strb	r2, [r3, #4]
	GC9A01_Driver.SPI_Driver.miso_pin = SPI_Configurations.Pin._SPI1_.MISO1.PA6;
 800370c:	2210      	movs	r2, #16
 800370e:	4b28      	ldr	r3, [pc, #160]	@ (80037b0 <main+0xc4>)
 8003710:	719a      	strb	r2, [r3, #6]
	GC9A01_Driver.SPI_Driver.mosi_pin = SPI_Configurations.Pin._SPI1_.MOSI1.PA7;
 8003712:	2211      	movs	r2, #17
 8003714:	4b26      	ldr	r3, [pc, #152]	@ (80037b0 <main+0xc4>)
 8003716:	715a      	strb	r2, [r3, #5]
	GC9A01_Driver.DC_Pin = 2;
 8003718:	4b25      	ldr	r3, [pc, #148]	@ (80037b0 <main+0xc4>)
 800371a:	2202      	movs	r2, #2
 800371c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
	GC9A01_Driver.DC_Port = GPIOA;
 8003720:	4b23      	ldr	r3, [pc, #140]	@ (80037b0 <main+0xc4>)
 8003722:	4a24      	ldr	r2, [pc, #144]	@ (80037b4 <main+0xc8>)
 8003724:	625a      	str	r2, [r3, #36]	@ 0x24
	GC9A01_Driver.Reset_Pin = 1;
 8003726:	4b22      	ldr	r3, [pc, #136]	@ (80037b0 <main+0xc4>)
 8003728:	2201      	movs	r2, #1
 800372a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	GC9A01_Driver.Reset_Port = GPIOA;
 800372e:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <main+0xc4>)
 8003730:	4a20      	ldr	r2, [pc, #128]	@ (80037b4 <main+0xc8>)
 8003732:	62da      	str	r2, [r3, #44]	@ 0x2c

	GC9A01_Driver.SPI_Driver.Port = SPI1;
 8003734:	4b1e      	ldr	r3, [pc, #120]	@ (80037b0 <main+0xc4>)
 8003736:	4a20      	ldr	r2, [pc, #128]	@ (80037b8 <main+0xcc>)
 8003738:	601a      	str	r2, [r3, #0]
	GC9A01_Driver.SPI_Driver.clock_phase = SPI_Configurations.Clock_Phase.Low_0;
 800373a:	2317      	movs	r3, #23
 800373c:	461a      	mov	r2, r3
 800373e:	4b1c      	ldr	r3, [pc, #112]	@ (80037b0 <main+0xc4>)
 8003740:	839a      	strh	r2, [r3, #28]
	GC9A01_Driver.SPI_Driver.clock_polarity = SPI_Configurations.Clock_Polarity.Low_0;
 8003742:	2321      	movs	r3, #33	@ 0x21
 8003744:	461a      	mov	r2, r3
 8003746:	4b1a      	ldr	r3, [pc, #104]	@ (80037b0 <main+0xc4>)
 8003748:	835a      	strh	r2, [r3, #26]
	GC9A01_Driver.SPI_Driver.crc = SPI_Configurations.CRC_Enable.Disable;
 800374a:	2300      	movs	r3, #0
 800374c:	461a      	mov	r2, r3
 800374e:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <main+0xc4>)
 8003750:	821a      	strh	r2, [r3, #16]
	GC9A01_Driver.SPI_Driver.data_format = SPI_Configurations.Data_Format.Bit8;
 8003752:	230b      	movs	r3, #11
 8003754:	461a      	mov	r2, r3
 8003756:	4b16      	ldr	r3, [pc, #88]	@ (80037b0 <main+0xc4>)
 8003758:	825a      	strh	r2, [r3, #18]
	GC9A01_Driver.SPI_Driver.dma = SPI_Configurations.DMA_Type.TX_DMA_Enable;
 800375a:	233d      	movs	r3, #61	@ 0x3d
 800375c:	461a      	mov	r2, r3
 800375e:	4b14      	ldr	r3, [pc, #80]	@ (80037b0 <main+0xc4>)
 8003760:	841a      	strh	r2, [r3, #32]
	GC9A01_Driver.SPI_Driver.frame_format = SPI_Configurations.Frame_Format.MSB_First;
 8003762:	2317      	movs	r3, #23
 8003764:	461a      	mov	r2, r3
 8003766:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <main+0xc4>)
 8003768:	829a      	strh	r2, [r3, #20]
	GC9A01_Driver.SPI_Driver.interrupt = SPI_Configurations.Interrupts.Disable;
 800376a:	2346      	movs	r3, #70	@ 0x46
 800376c:	461a      	mov	r2, r3
 800376e:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <main+0xc4>)
 8003770:	83da      	strh	r2, [r3, #30]
	GC9A01_Driver.SPI_Driver.mode = SPI_Configurations.Mode.Full_Duplex_Master;
 8003772:	230b      	movs	r3, #11
 8003774:	461a      	mov	r2, r3
 8003776:	4b0e      	ldr	r3, [pc, #56]	@ (80037b0 <main+0xc4>)
 8003778:	81da      	strh	r2, [r3, #14]
	GC9A01_Driver.SPI_Driver.prescaler = SPI_Configurations.Prescaler.CLK_div_2;
 800377a:	2328      	movs	r3, #40	@ 0x28
 800377c:	461a      	mov	r2, r3
 800377e:	4b0c      	ldr	r3, [pc, #48]	@ (80037b0 <main+0xc4>)
 8003780:	82da      	strh	r2, [r3, #22]
	GC9A01_Driver.SPI_Driver.type = SPI_Configurations.Type.Master;
 8003782:	2332      	movs	r3, #50	@ 0x32
 8003784:	461a      	mov	r2, r3
 8003786:	4b0a      	ldr	r3, [pc, #40]	@ (80037b0 <main+0xc4>)
 8003788:	831a      	strh	r2, [r3, #24]
	GC9A01_Init(&GC9A01_Driver);
 800378a:	4809      	ldr	r0, [pc, #36]	@ (80037b0 <main+0xc4>)
 800378c:	f7fd fece 	bl	800152c <GC9A01_Init>
	GC9A01_Splash_Screen(&GC9A01_Driver, 0xFFFF);
 8003790:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003794:	4806      	ldr	r0, [pc, #24]	@ (80037b0 <main+0xc4>)
 8003796:	f7fe fa44 	bl	8001c22 <GC9A01_Splash_Screen>
	Delay_s(1);
 800379a:	2001      	movs	r0, #1
 800379c:	f7ff ff8c 	bl	80036b8 <Delay_s>


	GC9A01_Draw_Mercury(&GC9A01_Driver);
 80037a0:	4803      	ldr	r0, [pc, #12]	@ (80037b0 <main+0xc4>)
 80037a2:	f7fe fabd 	bl	8001d20 <GC9A01_Draw_Mercury>
//	uint16_t green = 0x00;
//	uint16_t blue = 0x00;
//
//	int i  = 0;

	uint16_t color_16_bit = 0;
 80037a6:	2300      	movs	r3, #0
 80037a8:	80fb      	strh	r3, [r7, #6]

	for(;;)
 80037aa:	bf00      	nop
 80037ac:	e7fd      	b.n	80037aa <main+0xbe>
 80037ae:	bf00      	nop
 80037b0:	200001f0 	.word	0x200001f0
 80037b4:	40020000 	.word	0x40020000
 80037b8:	40013000 	.word	0x40013000

080037bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037c0:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <SystemInit+0x20>)
 80037c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037c6:	4a05      	ldr	r2, [pc, #20]	@ (80037dc <SystemInit+0x20>)
 80037c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80037cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80037d0:	bf00      	nop
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	e000ed00 	.word	0xe000ed00

080037e0 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	b087      	sub	sp, #28
 80037e4:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	2300      	movs	r3, #0
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	2302      	movs	r3, #2
 80037f0:	60fb      	str	r3, [r7, #12]
 80037f2:	2300      	movs	r3, #0
 80037f4:	60bb      	str	r3, [r7, #8]
 80037f6:	2302      	movs	r3, #2
 80037f8:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80037fa:	4b34      	ldr	r3, [pc, #208]	@ (80038cc <SystemCoreClockUpdate+0xec>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 030c 	and.w	r3, r3, #12
 8003802:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b08      	cmp	r3, #8
 8003808:	d011      	beq.n	800382e <SystemCoreClockUpdate+0x4e>
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b08      	cmp	r3, #8
 800380e:	d844      	bhi.n	800389a <SystemCoreClockUpdate+0xba>
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <SystemCoreClockUpdate+0x3e>
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	2b04      	cmp	r3, #4
 800381a:	d004      	beq.n	8003826 <SystemCoreClockUpdate+0x46>
 800381c:	e03d      	b.n	800389a <SystemCoreClockUpdate+0xba>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800381e:	4b2c      	ldr	r3, [pc, #176]	@ (80038d0 <SystemCoreClockUpdate+0xf0>)
 8003820:	4a2c      	ldr	r2, [pc, #176]	@ (80038d4 <SystemCoreClockUpdate+0xf4>)
 8003822:	601a      	str	r2, [r3, #0]
      break;
 8003824:	e03d      	b.n	80038a2 <SystemCoreClockUpdate+0xc2>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8003826:	4b2a      	ldr	r3, [pc, #168]	@ (80038d0 <SystemCoreClockUpdate+0xf0>)
 8003828:	4a2b      	ldr	r2, [pc, #172]	@ (80038d8 <SystemCoreClockUpdate+0xf8>)
 800382a:	601a      	str	r2, [r3, #0]
      break;
 800382c:	e039      	b.n	80038a2 <SystemCoreClockUpdate+0xc2>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800382e:	4b27      	ldr	r3, [pc, #156]	@ (80038cc <SystemCoreClockUpdate+0xec>)
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	0d9b      	lsrs	r3, r3, #22
 8003834:	f003 0301 	and.w	r3, r3, #1
 8003838:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383a:	4b24      	ldr	r3, [pc, #144]	@ (80038cc <SystemCoreClockUpdate+0xec>)
 800383c:	685b      	ldr	r3, [r3, #4]
 800383e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003842:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d00c      	beq.n	8003864 <SystemCoreClockUpdate+0x84>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800384a:	4a23      	ldr	r2, [pc, #140]	@ (80038d8 <SystemCoreClockUpdate+0xf8>)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003852:	4a1e      	ldr	r2, [pc, #120]	@ (80038cc <SystemCoreClockUpdate+0xec>)
 8003854:	6852      	ldr	r2, [r2, #4]
 8003856:	0992      	lsrs	r2, r2, #6
 8003858:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800385c:	fb02 f303 	mul.w	r3, r2, r3
 8003860:	617b      	str	r3, [r7, #20]
 8003862:	e00b      	b.n	800387c <SystemCoreClockUpdate+0x9c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8003864:	4a1b      	ldr	r2, [pc, #108]	@ (80038d4 <SystemCoreClockUpdate+0xf4>)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	fbb2 f3f3 	udiv	r3, r2, r3
 800386c:	4a17      	ldr	r2, [pc, #92]	@ (80038cc <SystemCoreClockUpdate+0xec>)
 800386e:	6852      	ldr	r2, [r2, #4]
 8003870:	0992      	lsrs	r2, r2, #6
 8003872:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003876:	fb02 f303 	mul.w	r3, r2, r3
 800387a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800387c:	4b13      	ldr	r3, [pc, #76]	@ (80038cc <SystemCoreClockUpdate+0xec>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	0c1b      	lsrs	r3, r3, #16
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	3301      	adds	r3, #1
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800388c:	697a      	ldr	r2, [r7, #20]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	fbb2 f3f3 	udiv	r3, r2, r3
 8003894:	4a0e      	ldr	r2, [pc, #56]	@ (80038d0 <SystemCoreClockUpdate+0xf0>)
 8003896:	6013      	str	r3, [r2, #0]
      break;
 8003898:	e003      	b.n	80038a2 <SystemCoreClockUpdate+0xc2>
    default:
      SystemCoreClock = HSI_VALUE;
 800389a:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <SystemCoreClockUpdate+0xf0>)
 800389c:	4a0d      	ldr	r2, [pc, #52]	@ (80038d4 <SystemCoreClockUpdate+0xf4>)
 800389e:	601a      	str	r2, [r3, #0]
      break;
 80038a0:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <SystemCoreClockUpdate+0xec>)
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	091b      	lsrs	r3, r3, #4
 80038a8:	f003 030f 	and.w	r3, r3, #15
 80038ac:	4a0b      	ldr	r2, [pc, #44]	@ (80038dc <SystemCoreClockUpdate+0xfc>)
 80038ae:	5cd3      	ldrb	r3, [r2, r3]
 80038b0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 80038b2:	4b07      	ldr	r3, [pc, #28]	@ (80038d0 <SystemCoreClockUpdate+0xf0>)
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
 80038bc:	4a04      	ldr	r2, [pc, #16]	@ (80038d0 <SystemCoreClockUpdate+0xf0>)
 80038be:	6013      	str	r3, [r2, #0]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40023800 	.word	0x40023800
 80038d0:	20000000 	.word	0x20000000
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	017d7840 	.word	0x017d7840
 80038dc:	0800d9f4 	.word	0x0800d9f4

080038e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80038e0:	480d      	ldr	r0, [pc, #52]	@ (8003918 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80038e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80038e4:	f7ff ff6a 	bl	80037bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80038e8:	480c      	ldr	r0, [pc, #48]	@ (800391c <LoopForever+0x6>)
  ldr r1, =_edata
 80038ea:	490d      	ldr	r1, [pc, #52]	@ (8003920 <LoopForever+0xa>)
  ldr r2, =_sidata
 80038ec:	4a0d      	ldr	r2, [pc, #52]	@ (8003924 <LoopForever+0xe>)
  movs r3, #0
 80038ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80038f0:	e002      	b.n	80038f8 <LoopCopyDataInit>

080038f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80038f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80038f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80038f6:	3304      	adds	r3, #4

080038f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80038f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80038fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80038fc:	d3f9      	bcc.n	80038f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80038fe:	4a0a      	ldr	r2, [pc, #40]	@ (8003928 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003900:	4c0a      	ldr	r4, [pc, #40]	@ (800392c <LoopForever+0x16>)
  movs r3, #0
 8003902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003904:	e001      	b.n	800390a <LoopFillZerobss>

08003906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003908:	3204      	adds	r2, #4

0800390a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800390a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800390c:	d3fb      	bcc.n	8003906 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800390e:	f000 f811 	bl	8003934 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003912:	f7ff feeb 	bl	80036ec <main>

08003916 <LoopForever>:

LoopForever:
  b LoopForever
 8003916:	e7fe      	b.n	8003916 <LoopForever>
  ldr   r0, =_estack
 8003918:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800391c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003920:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8003924:	0800da0c 	.word	0x0800da0c
  ldr r2, =_sbss
 8003928:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800392c:	20000224 	.word	0x20000224

08003930 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003930:	e7fe      	b.n	8003930 <ADC_IRQHandler>
	...

08003934 <__libc_init_array>:
 8003934:	b570      	push	{r4, r5, r6, lr}
 8003936:	4d0d      	ldr	r5, [pc, #52]	@ (800396c <__libc_init_array+0x38>)
 8003938:	4c0d      	ldr	r4, [pc, #52]	@ (8003970 <__libc_init_array+0x3c>)
 800393a:	1b64      	subs	r4, r4, r5
 800393c:	10a4      	asrs	r4, r4, #2
 800393e:	2600      	movs	r6, #0
 8003940:	42a6      	cmp	r6, r4
 8003942:	d109      	bne.n	8003958 <__libc_init_array+0x24>
 8003944:	4d0b      	ldr	r5, [pc, #44]	@ (8003974 <__libc_init_array+0x40>)
 8003946:	4c0c      	ldr	r4, [pc, #48]	@ (8003978 <__libc_init_array+0x44>)
 8003948:	f000 f826 	bl	8003998 <_init>
 800394c:	1b64      	subs	r4, r4, r5
 800394e:	10a4      	asrs	r4, r4, #2
 8003950:	2600      	movs	r6, #0
 8003952:	42a6      	cmp	r6, r4
 8003954:	d105      	bne.n	8003962 <__libc_init_array+0x2e>
 8003956:	bd70      	pop	{r4, r5, r6, pc}
 8003958:	f855 3b04 	ldr.w	r3, [r5], #4
 800395c:	4798      	blx	r3
 800395e:	3601      	adds	r6, #1
 8003960:	e7ee      	b.n	8003940 <__libc_init_array+0xc>
 8003962:	f855 3b04 	ldr.w	r3, [r5], #4
 8003966:	4798      	blx	r3
 8003968:	3601      	adds	r6, #1
 800396a:	e7f2      	b.n	8003952 <__libc_init_array+0x1e>
 800396c:	0800da04 	.word	0x0800da04
 8003970:	0800da04 	.word	0x0800da04
 8003974:	0800da04 	.word	0x0800da04
 8003978:	0800da08 	.word	0x0800da08

0800397c <memcpy>:
 800397c:	440a      	add	r2, r1
 800397e:	4291      	cmp	r1, r2
 8003980:	f100 33ff 	add.w	r3, r0, #4294967295
 8003984:	d100      	bne.n	8003988 <memcpy+0xc>
 8003986:	4770      	bx	lr
 8003988:	b510      	push	{r4, lr}
 800398a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800398e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003992:	4291      	cmp	r1, r2
 8003994:	d1f9      	bne.n	800398a <memcpy+0xe>
 8003996:	bd10      	pop	{r4, pc}

08003998 <_init>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr

080039a4 <_fini>:
 80039a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039a6:	bf00      	nop
 80039a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039aa:	bc08      	pop	{r3}
 80039ac:	469e      	mov	lr, r3
 80039ae:	4770      	bx	lr
